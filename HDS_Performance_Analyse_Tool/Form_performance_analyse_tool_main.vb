Option Explicit On
Option Strict On

Imports System.IO
Imports System.Text
Imports System.Windows.Forms.DataVisualization.Charting
Imports ICSharpCode.SharpZipLib.Zip
Imports System.ComponentModel
Imports System.Text.RegularExpressions
Imports System.Globalization
Imports System.Xml
'Imports System.Threading
'Imports System.Threading.Tasks
Imports HDS_Performance_Analyse_Tool.csv
Imports HDS_Performance_Analyse_Tool.EvalFunctions
Imports HDS_Performance_Analyse_Tool.Evaluator


Public Class Form_Performance_Analyse_Tool_Main

    Dim version As String = "02.74"

#Region "Global Variables"
    Private Const TVIF_STATE As Integer = &H8
    Private Const TVIS_STATEIMAGEMASK As Integer = &HF000
    Private Const TV_FIRST As Integer = &H1100
    Private Const TVM_SETITEM As Integer = TV_FIRST + 63

    'include the events of the class Evaluator (calculator class) to this class
    Dim evaluator1 As New Evaluator
    WithEvents evaluator_events As Evaluator

    Public Structure TVITEM
        Public mask As Integer
        Public hItem As IntPtr
        Public state As Integer
        Public stateMask As Integer
        Public lpszText As String
        Public cchTextMax As Integer
        Public iImage As Integer
        Public iSelectedImage As Integer
        Public cChildren As Integer
        Public lParam As IntPtr
    End Structure

    Private Declare Auto Function SendMessage Lib "User32.dll" (ByVal hwnd As IntPtr, ByVal msg As Integer, ByVal wParam As IntPtr, ByRef lParam As TVITEM) As Integer

    Private Sub HideRootCheckBox(ByVal node As TreeNode)
        Dim tvi As New TVITEM
        tvi.hItem = node.Handle
        tvi.mask = TVIF_STATE
        tvi.stateMask = TVIS_STATEIMAGEMASK
        tvi.state = 0
        SendMessage(TreeView_available_performancedata.Handle, TVM_SETITEM, IntPtr.Zero, tvi)
    End Sub


    'raidcom variables
    ''' <summary>
    ''' The str_raidcom_data_available [string] contains the available parts of the raidcom information
    ''' </summary>
    Dim str_raidcom_data_available As String = Nothing
    ''' <summary>
    ''' The str_raidcom_full_path [string] contains the full path name of the horcm directory. if it is "" then the horcm folder does not exist.
    ''' </summary>
    Dim str_raidcom_full_path As String = Nothing
    'raidcom constants
    ''' <summary>
    ''' The str_raidcom_horcmdir_pattern [string] contains the pattern to search the foldernames for horcm data
    ''' </summary>
    Const str_raidcom_horcmdir_pattern As String = "horcmdir"
    Const str_raidcom_get_ldevlist_def_pattern As String = "_raidcom_get_ldevlist_def.txt"
    Const str_raidcom_get_ldevlist_def_pattern_physical_ldev As String = "RAID_LEVEL "
    Const str_raidcom_get_ldevlist_def_availabale_pattern_physical_ldev As String = "physical_ldev"
    Const str_raidcom_get_ldevlist_def_pattern_vvol_ldev As String = "B_POOLID :"
    Const str_raidcom_get_ldevlist_def_pattern_vvol_ldev_hdt As String = " HDT "
    Const str_raidcom_get_ldevlist_def_availabale_pattern_vvol_ldev As String = "vvol_ldev"

    'background color of the graph
    Dim str_background_color As String = Nothing

    Public Const str_severity_information As String = "information"
    Public Const str_severity_warning As String = "warning"
    Public Const str_severity_error As String = "error"
    Public Const str_severity_debug As String = "debug"

    'last path choosen by user. if none is specified c:\ is taken.
    Dim path_performance_export_data As String = Nothing

    Dim str_negative_values_in_series_start As String = "There are negative values in the series (Found values are: "
    Dim str_negative_values_in_series_end As String = "). See the manual for the details."
    Dim str_negative_values_in_series_values As String = Nothing
    Const str_default_value As String = "default"
    Const str_no_value As String = "No."
    Const str_time_value As String = "time"
    Const str_no_result As String = "-1"
    'this value is used for the performance value position. otherwise the instr function gives false values back (inst "13","3" returns also ok)
    Const str_value_specifier As String = ":"
    Const str_serial_number_pattern As String = "Serial number :"
    Const str_serial_number_replace_pattern As String = "SN:"
    Const str_file_ending_csv As String = "*.csv"
    Const str_sum_up_take_filename_as_name As String = "sum_up_and_take_filename_as_name"
    Const str_average_up_take_filename_as_name As String = "average_up_and_take_filename_as_name"
    Const str_average_up_take_hsd_name As String = "average_up_and_take_hsd_name"
    Const str_average_up As String = "average_up_but_keep_the_element_name"
    Const str_take_filename_name As String = "take_filename_as_name"

    'this is the line count of how many lines are used for other purposes before the performance array starts
    'the 7 first rows are for header info
    Const int_array_descritor_line_count As Integer = 8

    'filename of the configuration file. is saved at the same logation as the application was started from
    Const str_configurationfilename As String = "configuration.xml"

    'datetimepicker 
    Dim boolean_datetimepicker_set As Boolean = Nothing
    Dim date_datetimepicker_start_selected As Date = Nothing
    Dim date_datetimepicker_end_selected As Date = Nothing

    ' performancedata available
    'this string is used to write the avalable data in after checking what is available
    Dim str_performance_data_available As String = Nothing

    'tooltip for the charts
    Dim toolTip_chart_name As New ToolTip()

    'all extracted files are created in this subfolder
    Dim str_export_foldername_unzipped As String = Nothing

    '    'last choosen foldername
    Dim str_export_foldername_last_chosen As String = Nothing

    'conversion factor from kb to mb 1/1024 -> 0.0009765625
    Const dbl_conversion_kb_mb As Double = 0.0009765625
    Const dbl_conversion_us_ms As Double = 0.001
    Const dbl_conversion_min_sec As Double = 0.016666666666666
    Const dbl_conversion_mb_kb As Double = 1024
#End Region

#Region "Variables \ Storage Common"
    'name of the section in treeview
    Const str_processor As String = "Processor"
    Const str_processor_mppk As String = "MPPK"
    Const str_phy As String = "PHY_"
    Const str_short As String = "Short_"
    Const str_paritygroup As String = "Parity Group"
    Const str_cache As String = "Cache"
    Const str_port As String = "Port"
    Const str_backend As String = "ESW"
    Const str_backend_dka_esw As String = "DKA_ESW"
    Const str_backend_cha_esw As String = "CHA_ESW"
    Const str_backend_esw_cache As String = "ESW_Cache"
    Const str_backend_mppcb_esw As String = "MPPCB_ESW"
    Const str_backend_hm700 As String = "Backend"
    Const str_backend_hm700_bepk_mainkp As String = "BEPK_MainPK"
    Const str_backend_hm700_cache_mainpk As String = "Cache_MainPK"
    Const str_backend_hm700_fepk_mainpk As String = "FEPK_MainPK"
    Const str_openports As String = "Open"
    Const str_mfports As String = "Mainframe"
    Const str_tchurports As String = "Initiator"

    Const str_truecopy As String = "True Copy"
    Const str_lu As String = "LU"
    Const str_hur As String = "HUR"
    'Const str_phyldev As String = "LDEV"
    Const str_ldeveachofcu As String = "LDEV"
    Const str_phyldev_physical As String = "Physical"

    'variable to specify the storage system to react on specialities
    Dim str_storage_system As String = ""
    Dim str_storage_system_serial As String = Nothing

    'there will be also the zipfilename created out of this constant ("PHYProc_dat.ZIP")
    Const str_export_foldername_mp As String = "PhyProc_dat"
    Const str_export_filename_mp As String = "PHY_Short_MP.csv"
    Const str_export_filename_HM700_mppk As String = "PHY_MPPK_MPB-1MA.MP00-1MA.csv"
    Const str_export_foldername_mppk As String = "PhyMPPK_dat"

    Const str_performance_data_available_mp As String = "mpb"
    Const str_performance_data_available_mppk As String = "mppk"
    Const str_performance_data_available_hur_jnl As String = "hur_jnl"
    Const str_performance_data_available_hur_repl As String = "hur_repl"

    'pg
    Const str_export_foldername_phypg As String = "PhyPG_dat"
    Const str_export_filename_phypg As String = "PHY_Short_PG.csv"
    Const str_performance_data_available_phypg As String = "phypg"

    'port
    Const str_export_foldername_port As String = "Port_dat"
    Const str_export_filename_port_iops As String = "Port_IOPS.csv"
    Const str_export_filename_port_kbps As String = "Port_KBPS.csv"
    Const str_export_filename_port_response As String = "Port_Response.csv"
    Const str_performance_data_available_port As String = "port"

    Const str_export_foldername_mfport As String = "MFPort_dat"
    Const str_export_filename_mfport_iops As String = "MF_Port_IOPS.csv"
    Const str_export_filename_mfport_read_kbps As String = "MF_Port_Read_KBPS.csv"
    Const str_export_filename_mfport_write_kbps As String = "MF_Port_Write_KBPS.csv"
    Const str_export_filename_mfport_response As String = "MF_Port_Response.csv"
    Const str_export_filename_mfport_disc_time As String = "MF_Port_Avr_DisconnectTime.csv"


    '---------------------------------------------
    'true copy all
    '---------------------------------------------
    Const str_export_foldername_remotecopy As String = "RemoteCopy_dat"
    Const str_export_filename_remotecopy As String = "RemoteCopy.csv"
    Const str_export_filename_initiator_ports_iops As String = "Port_Initiator_IOPS.csv"
    Const str_export_filename_initiator_ports_transfer As String = "Port_Initiator_KBPS.csv"
    Const str_export_filename_initiator_ports_response As String = "Port_Initiator_Response.csv"
    Const str_performance_data_available_remotecopy As String = "remotecopy"
    Const str_truecopy_chart_name_initiator_ports As String = "Initiator Ports"
    Const str_truecopy_chart_name_remoteio As String = "Remote IO"
    Const str_truecopy_data_name_remoteio As String = "All RIO,All Write,Initial Copy RIO,Update Copy RIO"
    Const str_truecopy_chart_name_remotetransfer As String = "Remote Transfer"
    Const str_truecopy_data_name_remotetransfer As String = "Initial Copy Transfer(KB/s),Update Copy Transfer(KB/s)"
    Const str_truecopy_chart_name_remoteresponse As String = "Remote Response Time"
    Const str_truecopy_data_name_remoteresponse As String = "Initial Copy Response(ms),Update Copy Response(ms)"
    Const str_truecopy_chart_name_remoteoutofsync As String = "Out of Sync Tracks"
    Const str_truecopy_data_name_remoteoutofsync As String = "Out of Sync Tracks"
    Const str_truecopy_chart_name_remotesynchronized As String = "Pair Synchronized"
    Const str_truecopy_data_name_remotesynchronized As String = "Pair Synchronized(%)"

    '---------------------------------------------
    'hur all
    '---------------------------------------------
    Const str_export_foldername_hurjnl As String = "URJNL_dat"
    Const str_export_filename_hurjnl_initial_copy_transfer As String = "URJNL_Initial_Copy_Transfer.csv"
    Const str_hur_chart_name_jnl_initial_copy_transfer As String = "URJNL Initial Copy Transfer"
    Const str_export_filename_hurjnl_write_transfer As String = "URJNL_Write_Transfer.csv"
    Const str_hur_chart_name_jnl_write_transfer As String = "URJNL Write Transfer"
    'M
    Const str_export_filename_hurjnl_m_usedrate As String = "URJNL_M-JNL_Data_Used_Rate.csv"
    Const str_hur_chart_name_jnl_m_usedrate As String = "M-JNL Data Used Rate"
    Const str_export_filename_hurjnl_m_rio As String = "URJNL_M-JNL_Asynchronous_RIO.csv"
    Const str_hur_chart_name_jnl_m_rio As String = "M-JNL Asynchronous RIO"
    Const str_export_filename_hurjnl_m_response As String = "URJNL_M-JNL_Asynchronous_Copy_Response.csv"
    Const str_hur_chart_name_jnl_m_response As String = "M-JNL Asynchronous Copy Response"
    Const str_export_filename_hurjnl_m_transfer As String = "URJNL_M-JNL_Asynchronous_Copy_Transfer.csv"
    Const str_hur_chart_name_jnl_m_transfer As String = "M-JNL Asynchronous Copy Transfer"
    'R
    Const str_export_filename_hurjnl_r_usedrate As String = "URJNL_R-JNL_Data_Used_Rate.csv"
    Const str_hur_chart_name_jnl_r_usedrate As String = "R-JNL Data Used Rate"
    Const str_export_filename_hurjnl_r_rio As String = "URJNL_R-JNL_Asynchronous_RIO.csv"
    Const str_hur_chart_name_jnl_r_rio As String = "R-JNL Asynchronous RIO"
    Const str_export_filename_hurjnl_r_response As String = "URJNL_R-JNL_Asynchronous_Copy_Response.csv"
    Const str_hur_chart_name_jnl_r_response As String = "R-JNL Asynchronous Copy Response"
    Const str_export_filename_hurjnl_r_transfer As String = "URJNL_R-JNL_Asynchronous_Copy_Transfer.csv"
    Const str_hur_chart_name_jnl_r_transfer As String = "R-JNL Asynchronous Copy Transfer"

    '---------------------------------------------
    'ldev phyldev
    '---------------------------------------------
    Const str_export_foldername_phyldev As String = "PhyLDEV_dat"
    Const str_performance_data_available_phyldev As String = "phyldev"
    Const str_export_filename_phyldev_start As String = "PHY_Short_LDEV_"
    Const str_export_filename_phyldev_si_start As String = "PHY_Short_LDEV_SI_"
    Dim str_export_filename_phyldev As String = Nothing

    '---------------------------------------------
    'ldev ldeveachofcu
    '---------------------------------------------
    Const str_export_foldername_ldeveachofcu As String = "LDEVEachOfCU_dat"
    Const str_performance_data_available_ldeveachofcu As String = "ldeveachofcu"
    'iops
    Const str_export_filename_ldeveachofcu_iops As String = "LDEV_IOPS"
    Const str_export_filename_ldeveachofcu_iops_read As String = "LDEV_Read_IOPS"
    Const str_export_filename_ldeveachofcu_iops_read_rand As String = "LDEV_Rnd_Read_IOPS"
    Const str_export_filename_ldeveachofcu_iops_read_seq As String = "LDEV_Seq_Read_IOPS"
    Const str_export_filename_ldeveachofcu_iops_write As String = "LDEV_Write_IOPS"
    Const str_export_filename_ldeveachofcu_iops_write_rand As String = "LDEV_Rnd_Write_IOPS"
    Const str_export_filename_ldeveachofcu_iops_write_seq As String = "LDEV_Seq_Write_IOPS"
    'trans rate
    Const str_export_filename_ldeveachofcu_transrate As String = "LDEV_TransRate"
    Const str_export_filename_ldeveachofcu_transrate_read As String = "LDEV_Read_TransRate"
    Const str_export_filename_ldeveachofcu_transrate_write As String = "LDEV_Write_TransRate"
    'response
    Const str_export_filename_ldeveachofcu_response As String = "LDEV_Response"
    Const str_export_filename_ldeveachofcu_response_read As String = "LDEV_Read_Response"
    Const str_export_filename_ldeveachofcu_response_write As String = "LDEV_Write_Response"

    '---------------------------------------------
    'lu
    '---------------------------------------------
    Const str_export_foldername_lu As String = "LU_dat"
    'iops
    Const str_export_filename_lu_iops As String = "LU_IOPS.csv"
    Const str_export_filename_lu_iops_ran_read As String = "LU_Rnd_Read_IOPS.csv"
    Const str_export_filename_lu_iops_seq_read As String = "LU_Seq_Read_IOPS.csv"
    Const str_export_filename_lu_iops_ran_write As String = "LU_Rnd_Write_IOPS.csv"
    Const str_export_filename_lu_iops_seq_write As String = "LU_Seq_Write_IOPS.csv"
    'transfer
    Const str_export_filename_lu_kbps As String = "LU_TransRate.csv"
    Const str_export_filename_lu_kbps_write As String = "LU_Write_TransRate.csv"
    Const str_export_filename_lu_kbps_read As String = "LU_Read_TransRate.csv"
    Const str_export_filename_lu_c2d_trans As String = "LU_C2D_Trans.csv"
    Const str_export_filename_lu_d2c_trans_random As String = "LU_D2CR_Trans.csv"
    Const str_export_filename_lu_d2c_trans_sequential As String = "LU_D2CS_Trans.csv"

    'response
    Const str_export_filename_lu_response As String = "LU_Response.csv"
    Const str_export_filename_lu_response_read As String = "LU_Read_Response.csv"
    Const str_export_filename_lu_response_write As String = "LU_Write_response.csv"
    'hit rates
    Const str_export_filename_lu_hit_rnd_read As String = "LU_Rnd_Read_Hit.csv"
    Const str_export_filename_lu_hit_rnd_write As String = "LU_Rnd_Write_Hit.csv"
    Const str_export_filename_lu_hit_seq_read As String = "LU_Seq_Read_Hit.csv"
    Const str_export_filename_lu_hit_seq_write As String = "LU_Seq_Write_Hit.csv"
    Const str_performance_data_available_lu As String = "lu_hostgroup"

#End Region

#Region "Variables \ RAID600 -> USP-V"
    'RAID600 -> USP-V
    Const str_storage_type_raid600 As String = "RAID600"
    'chp (USP-V)
    Dim arraylist_uspv_chp As New ArrayList
    Const str_export_filename_chp As String = "PHY_Short_CHP.csv"
    Const str_performance_data_available_chp As String = "chp"
    Const str_export_filename_cache_usage As String = "PHY_Short_Cache_Usage_Rate.csv"
    '----------------------------------------------------
    'chp (USP-VM)
    Dim arraylist_uspvm_chp As New ArrayList

    Const str_performance_data_available_phycsw As String = "phycsw" 'cache RAID600

    Const str_export_foldername_phycsw As String = "PhyCSW_dat" 'cache RAID600

#End Region

#Region "Variables \ RAID700 -> VSP"
    'RAID700 -> VSP
    Const str_storage_type_raid700 As String = "VSP"
    'mp (VSP HUS-VM)
    Dim arraylist_vsp_mp As New ArrayList

    Const str_performance_data_available_phyesw As String = "phyesw" 'cache RAID700
    'cache
    Const str_export_foldername_phyesw As String = "PhyESW_dat" 'cache RAID700

#End Region

#Region "Variables \ HM800 -> Gx00"
    'RAID800 -> VSP G1000
    Const str_storage_type_hm800 As String = "VSP Gx00"
    Const str_storage_type_G100 As String = "G100"
    Const str_storage_type_G200 As String = "G200"
    Const str_storage_type_G400_G600 As String = "VSP G400/G600"
    Const str_storage_type_G800 As String = "VSP G800"
    'mp (VSP G1000)
    'Dim arraylist_hm800_mp As New ArrayList

    Const str_export_filename_phypg_hm800 As String = "PHY_PG.csv"
    Const str_export_filename_phyproc_hm800 As String = "PHY_MP.csv"

    Const str_export_foldername_HM800_phympu As String = "PhyMPU_dat"
    Const str_performance_data_available_phympu_hm800 As String = "phympu" 'cache HM800
    Const str_export_filename_start_phympu_write_pending_hm800 As String = "Write_Pending_Rate"
    Const str_mpu_pattern_hm800 As String = "_MPU-"

    'cache
    Const str_export_filename_start_phympu_cache_usage_hm800 As String = "Cache_Usage_Rate"


#End Region

#Region "Variables \ HM850 -> Gx50"
    Const str_storage_type_F370 As String = "VSP F370"
    Const str_storage_type_F700 As String = "VSP F700"
    Const str_storage_type_G900 As String = "VSP G900"
    Const str_storage_type_GF350 As String = "VSP G350"
    Const str_storage_type_GF130 As String = "VSP G130"

#End Region

#Region "Variables \ VSP G5x00"
    'mp (VSP G1000)
    Dim arraylist_vsp5000_mp As New ArrayList

    Const str_storage_type_vsp5000 As String = "VSP 5000 series"

    Const str_export_foldername_raid900_phympu As String = "PhyMPU_dat"
    Const str_export_foldername_raid900_mfport As String = "MFPort_dat"
    Const str_export_foldername_raid900_phyprocdetail As String = "PhyProcDetail_dat" 'MPPK data

    Const str_performance_data_available_phympu_raid900 As String = "phympu" 'cache raid9009
    Const str_export_filename_start_phympu_write_pending_raid900 As String = "Write_Pending_Rate"
    Const str_export_filename_start_phympu_cache_usage_raid900 As String = "Cache_Usage_Rate"
    Const str_mpu_pattern_raid900 As String = "_MPU-"
    Const str_hieisw_pattern_raid900 As String = "HIE_ISW"
    Const str_mpuhie_pattern_raid900 As String = "MPU_HIE"

    Const str_export_filename_vsp5000_backend_hie As String = "PHY_Short_HIE_ISW.csv"
    Const str_export_filename_vsp5000_backend_mpu As String = "PHY_Short_MPU_HIE.csv"
    Const str_performance_data_available_phybackend_vsp5000 As String = "phybackend_vsp5000" 'cache RAID900
    Const str_performance_data_available_mfport As String = "mfport" 'mfport raid

    'treeview names
    Const str_raid900_backend_hie As String = "HIE"

#End Region

#Region "Variables \ RAID800 -> VSP G1000"
    'RAID800 -> VSP G1000
    Const str_storage_type_raid800 As String = "VSP G1000"
    'mp (VSP G1000)
    Dim arraylist_vspg1000_mp As New ArrayList

    'cache
    Const str_export_foldername_phycmpk As String = "PhyCMPK_dat" 'cache RAID800
    Const str_export_filename_phycmpk As String = "PHY_Short_Write_Pending_Rate.csv"
    Const str_export_filename_raid800_backend_cha As String = "PHY_Short_CHA_CMPK.csv"
    Const str_export_filename_raid800_backend_cache As String = "PHY_Short_CMPK_Cache.csv"
    Const str_export_filename_raid800_backend_dka As String = "PHY_Short_DKA_CMPK.csv"
    Const str_export_filename_raid800_backend_mppcb As String = "PHY_Short_MPPCB_CMPK.csv"

    Const str_performance_data_available_phycmpk As String = "phycmpk"

    'treeview names
    Const str_raid800_backend_cmpk As String = "CMPK"

    Const str_raid800_backend_cha_cmpk As String = "CHA_CMPK"
    Const str_raid800_backend_cmpk_cache As String = "CMPK_Cache"
    Const str_raid800_backend_dka_cmpk As String = "DKA_CMPK"
    Const str_raid800_backend_mppcb_cmpk As String = "MPPCB_CMPK"

#End Region

#Region "Variables \ HM700 -> HUS-VM"
    'HUS VM -> HM700
    Const str_storage_type_raid750 As String = "HUS VM"
    'mp (HUS VM)
    Dim arraylist_husvm_mp As New ArrayList

    'cache
    Const str_export_foldername_HM700_phyesw As String = "PhyMainPK_dat" 'cache HM700 (HUS-VM)
    Const str_export_filename_phyesw As String = "PHY_Short_Write_Pending_Rate.csv"
    'example "PHY_Short_Write_Pending_Rate_MPB-1MA.csv"
    Const str_mpu As String = "_MPU-"
    Const str_mpb_pattern As String = "_MPB-"
    Const str_export_filename_start_HM700_phesw_write_pending As String = "Short_Write_Pending_Rate" 'cache numbering HM700 (HUS-VM)
    Const str_export_filename_start_phesw_write_pending As String = "Short_Write_Pending_Rate" 'cache numbering RAID700 (VSP)

    'backend
    'example "PHY_Cache_Allocate_MPB-1MA.csv"
    Const str_export_filename_start_phesw_cache_allocation As String = "Cache_Allocate"

    'example "PHY_Short_Cache_Usage_Rate_MPB-1MA.csv"
    Const str_export_filename_start_phyesw_cache_usage As String = "Short_Cache_Usage_Rate"

    Const str_performance_data_available_HM700_phyesw As String = "phyHM700esw" 'cache HM700
    'dka
    Const str_export_filename_backend_dka As String = "PHY_Short_DKA_ESW.csv"
    'cha
    Const str_export_filename_backend_cha As String = "PHY_Short_CHA_ESW.csv"
    'cache
    Const str_export_filename_backend_cache As String = "PHY_Short_ESW_Cache.csv"
    'mppcb
    Const str_export_filename_backend_mppcb As String = "PHY_Short_MPPCB_ESW.csv"
    'hm700 backend
    Const str_export_filename_backend_hm700_bepk As String = "PHY_Short_BEPK_MainPK.csv"
    Const str_export_filename_backend_hm700_cache As String = "PHY_Short_Cache_MainPK.csv"
    Const str_export_filename_backend_hm700_fepk As String = "PHY_Short_FEPK_MainPK.csv"

#End Region

#Region "Variables \ DF800, HUS"
    'AMS2x00 -> DF800
    Const str_storage_type_df800 As String = "DF800"

    'this constant is here because sometimes the pfm file contains only one line and contains skipped. this pattern is used to skip these files
    Const str_skipped_pfm_file As String = "skipped"

    '--------------------------------------------------------------------
    'DF800 (AMS2x00)
    Dim arraylist_df_filename_port As New ArrayList
    Const str_performance_data_available_df As String = "df_performance"
    Const str_df_pfm_file_filter As String = "pfm*"
    Const str_df_port_section As String = "---- Port Information ----"
    Const str_df_rg_section As String = "---- RG Information ----"
    Const str_df_lu_section As String = "---- LU Information ----"
    Const str_df_cache_section As String = "---- Cache Information ----"
    Const str_df_processor_section As String = "---- Processor Information ----"
    Const str_df_drive_section As String = "---- Drive Information ----"
    Const str_df_drive_operate_section As String = "---- Drive Operate Information ----"
    Const str_df_backend_section As String = "---- Backend Information ----"

    'identifier of a description line
    Const str_df_descriptor_identifier As String = "CTL"

    'folder created for the df port performance information
    Const str_df_name_port As String = "Port"
    Const str_df_name_rg As String = "RG"
    Const str_df_name_dppool As String = "DP Pool"
    Const str_df_name_lu As String = "LU"
    Const str_df_name_cache As String = "Cache"
    Const str_df_name_processor As String = "Processor"
    Const str_df_name_processor_core As String = "Core"
    Const str_df_name_cache_partitition As String = "Partition"
    Const str_df_name_drive As String = "Drive"
    Const str_df_name_drive_operate As String = "Drive Operate"
    Const str_df_name_backend As String = "Backend"

    'port
    Const str_df_filename_port_transfer_descriptor As String = "Trans. Rate(MB_S).csv"
    Const str_df_filename_port_transfer_sequential_read_descriptor As String = "Sequential Read Trans. Rate(MB_S).csv"
    Const str_df_filename_port_transfer_sequential_write_descriptor As String = "Sequential Write Trans. Rate(MB_S).csv"
    Const str_df_filename_port_transfer_random_read_descriptor As String = "Random Read Trans. Rate(MB_S).csv"
    Const str_df_filename_port_transfer_random_write_descriptor As String = "Random Write Trans. Rate(MB_S).csv"
    Const str_df_filename_port_iops_descriptor As String = "IO Rate(IOPS).csv"
    Const str_df_filename_port_iops_sequential_read_descriptor As String = "Sequential Read Rate(IOPS).csv"
    Const str_df_filename_port_iops_sequential_write_descriptor As String = "Sequential Write Rate(IOPS).csv"
    Const str_df_filename_port_iops_random_read_descriptor As String = "Random Read Rate(IOPS).csv"
    Const str_df_filename_port_iops_random_write_descriptor As String = "Random Write Rate(IOPS).csv"

    'cpu
    Const str_df_filename_cpu_descriptor As String = "Core Usage(%).csv"
    'cache
    Const str_df_filename_cache_descriptor As String = "Partition_Write Pending Rate(%).csv"

    'drive
    Const str_df_filename_driveoperate_descriptor As String = "Operating Rate(%).csv"
    Const str_df_filename_drive_tag_count_descriptor As String = "Tag Count.csv"

    'lu
    'iops
    Const str_df_filename_lu_descriptor As String = "IO Rate(IOPS).csv"
    Const str_df_filename_lu_iops_descriptor As String = "IO Rate(IOPS).csv"
    Const str_df_filename_lu_iops_random_read_descriptor As String = "Random Read Rate(IOPS).csv"
    Const str_df_filename_lu_iops_random_write_descriptor As String = "Random Write Rate(IOPS).csv"
    Const str_df_filename_lu_iops_sequential_read_descriptor As String = "Sequential Read Rate(IOPS).csv"
    Const str_df_filename_lu_iops_sequential_write_descriptor As String = "Sequential Write Rate(IOPS).csv"
    'transfer
    Const str_df_filename_lu_transfer_descriptor As String = "Trans. Rate(MB_S).csv"
    Const str_df_filename_lu_transfer_random_read_descriptor As String = "Random Read Trans. Rate(MB_S).csv"
    Const str_df_filename_lu_transfer_random_write_descriptor As String = "Random Write Trans. Rate(MB_S).csv"
    Const str_df_filename_lu_transfer_sequential_read_descriptor As String = "Sequential Read Trans. Rate(MB_S).csv"
    Const str_df_filename_lu_transfer_sequential_write_descriptor As String = "Sequential Write Trans. Rate(MB_S).csv"
    'response time
    'Const str_df_filename_lu_response_total_descriptor As String = "Data CMD Time(microsec.).csv"
    'Const str_df_filename_lu_response_total_max_descriptor As String = "Data CMD Max Time(microsec.).csv"
    'detail
    Const str_df_filename_lu_response_job_write_count_descriptor As String = "Write CMD Job Count.csv"
    Const str_df_filename_lu_response_job_write_descriptor As String = "Write CMD Job Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_write_max_descriptor As String = "Write CMD Job Max Time(microsec.).csv"
    Const str_df_filename_lu_response_job_write_hit_count_descriptor As String = "Write CMD Hit Count.csv"
    Const str_df_filename_lu_response_job_write_hit_descriptor As String = "Write CMD Hit Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_write_hit_max_descriptor As String = "Write CMD Hit Max Time(microsec.).csv"
    Const str_df_filename_lu_response_job_write_miss_count_descriptor As String = "Write CMD Miss Count.csv"
    Const str_df_filename_lu_response_job_write_miss_descriptor As String = "Write CMD Miss Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_write_miss_max_descriptor As String = "Write CMD Miss Max Time(microsec.).csv"
    Const str_df_filename_lu_response_job_read_count_descriptor As String = "Read CMD Job Count.csv"
    Const str_df_filename_lu_response_job_read_descriptor As String = "Read CMD Job Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_read_max_descriptor As String = "Read CMD Job Max Time(microsec.).csv"
    Const str_df_filename_lu_response_job_read_hit_count_descriptor As String = "Read CMD Hit Count.csv"
    Const str_df_filename_lu_response_job_read_hit_descriptor As String = "Read CMD Hit Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_read_hit_max_descriptor As String = "Read CMD Hit Max Time(microsec.).csv"
    Const str_df_filename_lu_response_job_read_miss_count_descriptor As String = "Read CMD Miss Count.csv"
    Const str_df_filename_lu_response_job_read_miss_descriptor As String = "Read CMD Miss Time(microsec.).csv"
    'Const str_df_filename_lu_response_job_read_miss_max_descriptor As String = "Read CMD Miss Max Time(microsec.).csv"
    Const str_what_to_do_lu_response As String = "df_lu_response"

    'job delay
    'read hit delay
    Const str_df_filename_lu_job_delay_read_hit_300ms_descriptor As String = "Read Hit Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_read_hit_499ms_descriptor As String = "Read Hit Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_read_hit_999ms_descriptor As String = "Read Hit Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_read_hit_1000msplus_descriptor As String = "Read Hit Delay CMD Count(1000ms-).csv"
    'read cmd delay
    Const str_df_filename_lu_job_delay_read_job_300ms_descriptor As String = "Read Job Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_read_job_499ms_descriptor As String = "Read Job Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_read_job_999ms_descriptor As String = "Read Job Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_read_job_1000msplus_descriptor As String = "Read Job Delay CMD Count(1000ms-).csv"
    'read miss delay
    Const str_df_filename_lu_job_delay_read_miss_300ms_descriptor As String = "Read Miss Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_read_miss_499ms_descriptor As String = "Read Miss Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_read_miss_999ms_descriptor As String = "Read Miss Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_read_miss_1000msplus_descriptor As String = "Read Miss Delay CMD Count(1000ms-).csv"

    'write hit delay
    Const str_df_filename_lu_job_delay_write_hit_300ms_descriptor As String = "Write Hit Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_write_hit_499ms_descriptor As String = "Write Hit Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_write_hit_999ms_descriptor As String = "Write Hit Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_write_hit_1000msplus_descriptor As String = "Write Hit Delay CMD Count(1000ms-).csv"
    'write cmd delay
    Const str_df_filename_lu_job_delay_write_job_300ms_descriptor As String = "Write Job Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_write_job_499ms_descriptor As String = "Write Job Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_write_job_999ms_descriptor As String = "Write Job Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_write_job_1000msplus_descriptor As String = "Write Job Delay CMD Count(1000ms-).csv"
    'write miss delay
    Const str_df_filename_lu_job_delay_write_miss_300ms_descriptor As String = "Write Miss Delay CMD Count(_300ms).csv"
    Const str_df_filename_lu_job_delay_write_miss_499ms_descriptor As String = "Write Miss Delay CMD Count(300-499ms).csv"
    Const str_df_filename_lu_job_delay_write_miss_999ms_descriptor As String = "Write Miss Delay CMD Count(500-999ms).csv"
    Const str_df_filename_lu_job_delay_write_miss_1000msplus_descriptor As String = "Write Miss Delay CMD Count(1000ms-).csv"

    'tag count
    Const str_df_filename_lu_tag_count_write_descriptor As String = "Write Tag Count.csv"
    Const str_df_filename_lu_tag_count_read_descriptor As String = "Read Tag Count.csv"
    'hit rates
    Const str_df_filename_lu_hit_rate_read_descriptor As String = "Read Hit(%).csv"
    Const str_df_filename_lu_hit_rate_write_descriptor As String = "Write Hit(%).csv"

    Const str_performance_data_available_df_response As String = "df_lu_response"
    'these files are created after the extraction
    Const str_df_filename_lu_response_time_total_descriptor As String = "Total Response Time(microsec.).csv"
    Const str_df_filename_lu_response_time_read_descriptor As String = "Read Response Time(microsec.).csv"
    Const str_df_filename_lu_response_time_write_descriptor As String = "Write Response Time(microsec.).csv"
    'DF end

#End Region

    Private Sub Form_Performance_Analyse_Tool_Main_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        'check .net version
        If InStr(System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion, "v4.0", Microsoft.VisualBasic.CompareMethod.Text) = 0 Then
            MsgBox("A minimum requirement to run this program is .NET Framework version 4")
            Me.Close()
        End If

        'cursor is a cross
        'Me.Cursor = Cursors.Cross

        ToolStripComboBox_topx_value.Items.Add(5)
        ToolStripComboBox_topx_value.Items.Add(10)
        ToolStripComboBox_topx_value.Items.Add(15)
        ToolStripComboBox_topx_value.Items.Add(20)
        ToolStripComboBox_topx_value.Items.Add(25)
        ToolStripComboBox_topx_value.Items.Add(30)
        ToolStripComboBox_topx_value.Items.Add(35)
        ToolStripComboBox_topx_value.Items.Add(40)
        ToolStripComboBox_topx_value.Items.Add(45)
        ToolStripComboBox_topx_value.Items.Add(50)
        'default is 10
        ToolStripComboBox_topx_value.SelectedIndex = 1
        ToolStripComboBox_topx_value.DropDownStyle = ComboBoxStyle.DropDownList

        'menu settings
        Me.ToolStripMenuItem_save_configuration.Visible = True
        Me.ToolStripMenuItem_save_configuration.Checked = False
        Me.ToolStripMenuItem_save_configuration.CheckOnClick = True

        'read the configuration file
        If File.Exists(Environment.CurrentDirectory & "\" & str_configurationfilename) Then
            Call read_configuration()
        End If

        'set defaults if config file does not exist
        If str_export_foldername_unzipped = Nothing Then
            str_export_foldername_unzipped = "UnZippedFiles"
        End If
        If path_performance_export_data = Nothing Then
            path_performance_export_data = "c:\"
        End If

        'form properties
        Me.Text = "Performance_Analyse_Tool (version " & version & ")"

        ' Set the Format type and the CustomFormat string.
        DateTimePicker_start_performancedate.Visible = False
        Label_start_performancedate.Visible = False
        DateTimePicker_end_performancedate.Visible = False
        Label_end_performancedata.Visible = False
        DateTimePicker_start_performancedate.Format = DateTimePickerFormat.Custom
        DateTimePicker_start_performancedate.CustomFormat = "dd.MM.yyyy - HH:mm"
        DateTimePicker_end_performancedate.Format = DateTimePickerFormat.Custom
        DateTimePicker_end_performancedate.CustomFormat = "dd.MM.yyyy - HH:mm"
        'use the datetimepicker
        boolean_datetimepicker_set = False

        'tooltip properties
        toolTip_chart_name.ShowAlways = True
        toolTip_chart_name.UseFading = True
        toolTip_chart_name.UseAnimation = True
        toolTip_chart_name.IsBalloon = True
        toolTip_chart_name.AutoPopDelay = 1000
        toolTip_chart_name.InitialDelay = 500
        toolTip_chart_name.ReshowDelay = 5000

        'exit button properties
        Me.Button_exit.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right
        Me.Button_select_performance_data_folder.Anchor = AnchorStyles.Top Or AnchorStyles.Left

        'treeview properties
        Me.TreeView_available_performancedata.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Bottom
        'tabcontrol properties
        Me.TabControl_chart1.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Bottom Or AnchorStyles.Right

        'checkbox properties
        'scalability checkboxes
        GroupBox_scalability.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        CheckBox_scalability.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        Label_green.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        Label_amber.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        NumericUpDown_green.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        NumericUpDown_amber.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        'extra options
        GroupBox_extra_options.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        CheckBox_stacked_view.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left
        'hide all 
        CheckBox_stacked_view.Visible = False
        GroupBox_extra_options.Visible = False
        NumericUpDown_amber.Visible = False
        NumericUpDown_green.Visible = False
        Label_amber.Visible = False
        Label_green.Visible = False
        CheckBox_scalability.Visible = False
        GroupBox_scalability.Visible = False

        'progressbar and label
        Me.Label_progress_chart.Text = "Collecting Data"
        Me.ProgressBar_chart.Visible = False
        Me.ProgressBar_chart.Value = 0
        Me.Label_progress_chart.Visible = False

        'checkboxes and numeric up and down
        NumericUpDown_amber.Enabled = False
        NumericUpDown_green.Enabled = False
        CheckBox_scalability.Enabled = False
        CheckBox_scalability.Checked = False
        NumericUpDown_green.Value = 30
        NumericUpDown_amber.Value = 80
        GroupBox_scalability.Anchor = AnchorStyles.Bottom Or AnchorStyles.Left

        ToolStripMenuItem_hide_error_numbers.Checked = False

        'create chp conversion list
        'uspv chp arraylist
        arraylist_uspv_chp.Clear()
        arraylist_uspv_chp.Add("CHP00-1EU,CHP00(CL1-A/CL5-A)")
        arraylist_uspv_chp.Add("CHP01-1EU,CHP01(CL3-A/CL7-A)")
        arraylist_uspv_chp.Add("CHP02-1EU,CHP02(CL1-B/CL5-B)")
        arraylist_uspv_chp.Add("CHP03-1EU,CHP03(CL3-B/CL7-B)")
        arraylist_uspv_chp.Add("CHP10-1FU,CHP10(CL1-E/CL5-E)")
        arraylist_uspv_chp.Add("CHP11-1FU,CHP11(CL3-E/CL7-E)")
        arraylist_uspv_chp.Add("CHP12-1FU,CHP12(CL1-F/CL5-F)")
        arraylist_uspv_chp.Add("CHP13-1FU,CHP13(CL3-F/CL7-F)")
        arraylist_uspv_chp.Add("CHP04-1EL,CHP04(CL1-C/CL5-C)")
        arraylist_uspv_chp.Add("CHP05-1EL,CHP05(CL3-C/CL7-C)")
        arraylist_uspv_chp.Add("CHP06-1EL,CHP06(CL1-D/CL5-D)")
        arraylist_uspv_chp.Add("CHP07-1EL,CHP07(CL3-D/CL7-D)")
        arraylist_uspv_chp.Add("CHP14-1FL,CHP14(CL1-G/CL5-G)")
        arraylist_uspv_chp.Add("CHP15-1FL,CHP15(CL3-G/CL7-G)")
        arraylist_uspv_chp.Add("CHP16-1FL,CHP16(CL1-H/CL5-H)")
        arraylist_uspv_chp.Add("CHP17-1FL,CHP17(CL3-H/CL7-H)")
        arraylist_uspv_chp.Add("CHP20-1GU,CHP20(CL1-J/CL5-J)")
        arraylist_uspv_chp.Add("CHP21-1GU,CHP21(CL3-J/CL7-J)")
        arraylist_uspv_chp.Add("CHP22-1GU,CHP22(CL1-K/CL5-K)")
        arraylist_uspv_chp.Add("CHP23-1GU,CHP23(CL3-K/CL7-K)")
        arraylist_uspv_chp.Add("CHP30-1HU,CHP30(CL1-N/CL5-N)")
        arraylist_uspv_chp.Add("CHP31-1HU,CHP31(CL3-N/CL7-N)")
        arraylist_uspv_chp.Add("CHP32-1HU,CHP32(CL1-P/CL5-P)")
        arraylist_uspv_chp.Add("CHP33-1HU,CHP33(CL3-P/CL7-P)")
        arraylist_uspv_chp.Add("CHP24-1GL,CHP24(CL1-L/CL5-L)")
        arraylist_uspv_chp.Add("CHP25-1GL,CHP25(CL3-L/CL7-L)")
        arraylist_uspv_chp.Add("CHP26-1GL,CHP26(CL1-M/CL5-M)")
        arraylist_uspv_chp.Add("CHP27-1GL,CHP27(CL3-M/CL7-M)")
        arraylist_uspv_chp.Add("CHP34-1HL,CHP34(CL1-Q/CL5-Q)")
        arraylist_uspv_chp.Add("CHP35-1HL,CHP35(CL3-Q/CL7-Q)")
        arraylist_uspv_chp.Add("CHP36-1HL,CHP36(CL1-R/CL5-R)")
        arraylist_uspv_chp.Add("CHP37-1HL,CHP37(CL3-R/CL7-R)")
        arraylist_uspv_chp.Add("CHP80-2QU,CHP80(CL2-A/CL6-A)")
        arraylist_uspv_chp.Add("CHP81-2QU,CHP81(CL4-A/CL8-A)")
        arraylist_uspv_chp.Add("CHP82-2QU,CHP82(CL2-B/CL6-B)")
        arraylist_uspv_chp.Add("CHP83-2QU,CHP83(CL4-B/CL8-B)")
        arraylist_uspv_chp.Add("CHP90-2RU,CHP90(CL2-E/CL6-E)")
        arraylist_uspv_chp.Add("CHP91-2RU,CHP91(CL4-E/CL8-E)")
        arraylist_uspv_chp.Add("CHP92-2RU,CHP92(CL2-F/CL6-F)")
        arraylist_uspv_chp.Add("CHP93-2RU,CHP93(CL4-F/CL8-F)")
        arraylist_uspv_chp.Add("CHP84-2QL,CHP84(CL2-C/CL6-C)")
        arraylist_uspv_chp.Add("CHP85-2QL,CHP85(CL4-C/CL8-C)")
        arraylist_uspv_chp.Add("CHP86-2QL,CHP86(CL2-D/CL6-D)")
        arraylist_uspv_chp.Add("CHP87-2QL,CHP87(CL4-D/CL8-D)")
        arraylist_uspv_chp.Add("CHP94-2RL,CHP94(CL2-G/CL6-G)")
        arraylist_uspv_chp.Add("CHP95-2RL,CHP95(CL4-G/CL8-G)")
        arraylist_uspv_chp.Add("CHP96-2RL,CHP96(CL2-H/CL6-H)")
        arraylist_uspv_chp.Add("CHP97-2RL,CHP97(CL4-H/CL8-H)")
        arraylist_uspv_chp.Add("CHPA0-2TU,CHPA0(CL2-J/CL6-J)")
        arraylist_uspv_chp.Add("CHPA1-2TU,CHPA1(CL4-J/CL8-J)")
        arraylist_uspv_chp.Add("CHPA2-2TU,CHPA2(CL2-K/CL6-K)")
        arraylist_uspv_chp.Add("CHPA3-2TU,CHPA3(CL4-K/CL8-K)")
        arraylist_uspv_chp.Add("CHPB0-2UU,CHPB0(CL2-N/CL6-N)")
        arraylist_uspv_chp.Add("CHPB1-2UU,CHPB1(CL4-N/CL8-N)")
        arraylist_uspv_chp.Add("CHPB2-2UU,CHPB2(CL2-P/CL6-P)")
        arraylist_uspv_chp.Add("CHPB3-2UU,CHPB3(CL4-P/CL8-P)")
        arraylist_uspv_chp.Add("CHPA4-2TL,CHPA4(CL2-L/CL6-L)")
        arraylist_uspv_chp.Add("CHPA5-2TL,CHPA5(CL4-L/CL8-L)")
        arraylist_uspv_chp.Add("CHPA6-2TL,CHPA6(CL2-M/CL6-M)")
        arraylist_uspv_chp.Add("CHPA7-2TL,CHPA7(CL4-M/CL8-M)")
        arraylist_uspv_chp.Add("CHPB4-2UL,CHPB4(CL2-Q/CL6-Q)")
        arraylist_uspv_chp.Add("CHPB5-2UL,CHPB5(CL4-Q/CL8-Q)")
        arraylist_uspv_chp.Add("CHPB6-2UL,CHPB6(CL2-R/CL6-R)")
        arraylist_uspv_chp.Add("CHPB7-2UL,CHPB7(CL4-R/CL8-R)")

        'usp-vm
        'uspvm chp arraylist
        arraylist_uspvm_chp.Clear()
        arraylist_uspvm_chp.Add("CHP50-1B,CHP50(CL9-E/CLD-E)")
        arraylist_uspvm_chp.Add("CHP52-1B,CHP52(CL9-F/CLD-F)")
        arraylist_uspvm_chp.Add("CHP51-1B,CHP51(CLB-E/CLF-E)")
        arraylist_uspvm_chp.Add("CHP53-1B,CHP53(CLB-F/CLF-F)")
        arraylist_uspvm_chp.Add("CHP00-1G,CHP00(CL1-A/CL5-A)")
        arraylist_uspvm_chp.Add("CHP01-1G,CHP01(CL1-B/CL5-B)")
        arraylist_uspvm_chp.Add("CHP02-1G,CHP02(CL3-A/CL7-A)")
        arraylist_uspvm_chp.Add("CHP03-1G,CHP03(CL3-B/CL7-B)")
        arraylist_uspvm_chp.Add("CHPD0-2E,CHPD0(CLA-E/CLE-E)")
        arraylist_uspvm_chp.Add("CHPD1-2E,CHPD1(CLA-F/CLE-F)")
        arraylist_uspvm_chp.Add("CHPD2-2E,CHPD2(CLC-E/CLG-E)")
        arraylist_uspvm_chp.Add("CHPD3-2E,CHPD3(CLC-F/CLG-F)")
        arraylist_uspvm_chp.Add("CHP80-2L,CHP80(CL2-A/CL6-A)")
        arraylist_uspvm_chp.Add("CHP82-2L,CHP82(CL2-B/CL6-B)")
        arraylist_uspvm_chp.Add("CHP81-2L,CHP81(CL4-A/CL8-A)")
        arraylist_uspvm_chp.Add("CHP83-2L,CHP83(CL4-B/CL8-B)")
        arraylist_uspvm_chp.Add("CHP40-1H,CHP40(CL1-E/CL5-E)")
        arraylist_uspvm_chp.Add("CHP42-1H,CHP42(CL1-F/CL5-F)")
        arraylist_uspvm_chp.Add("CHP41-1H,CHP41(CL3-E/CL7-E)")
        arraylist_uspvm_chp.Add("CHP43-1H,CHP43(CL3-F/CL7-F)")
        arraylist_uspvm_chp.Add("CHP20-1A,CHP20(CL9-A/CLD-A)")
        arraylist_uspvm_chp.Add("CHP22-1A,CHP22(CL9-B/CLD-B)")
        arraylist_uspvm_chp.Add("CHP21-1A,CHP21(CLB-A/CLF-A)")
        arraylist_uspvm_chp.Add("CHP23-1A,CHP23(CLB-B/CLF-B)")
        arraylist_uspvm_chp.Add("CHP90-2K,CHP90(CL2-E/CL6-E)")
        arraylist_uspvm_chp.Add("CHP92-2K,CHP92(CL2-F/CL6-F)")
        arraylist_uspvm_chp.Add("CHP91-2K,CHP91(CL4-E/CL8-E)")
        arraylist_uspvm_chp.Add("CHP93-2K,CHP93(CL4-F/CL8-F)")
        arraylist_uspvm_chp.Add("CHPC0-2F,CHPC0(CLA-A/CLE-A)")
        arraylist_uspvm_chp.Add("CHPC1-2F,CHPC1(CLA-B/CLE-B)")
        arraylist_uspvm_chp.Add("CHPC2-2F,CHPC2(CLC-A/CLG-A)")
        arraylist_uspvm_chp.Add("CHPC3-2F,CHPC3(CLC-B/CLG-B)")

        'create mp conversion list
        'vsp mp arraylist
        arraylist_vsp_mp.Clear()
        arraylist_vsp_mp.Add("MPB-1MA.MP00-1MA,MPB0(1MA)-MP00")
        arraylist_vsp_mp.Add("MPB-1MA.MP01-1MA,MPB0(1MA)-MP01")
        arraylist_vsp_mp.Add("MPB-1MA.MP02-1MA,MPB0(1MA)-MP02")
        arraylist_vsp_mp.Add("MPB-1MA.MP03-1MA,MPB0(1MA)-MP03")
        arraylist_vsp_mp.Add("MPB-1MB.MP04-1MB,MPB1(1MB)-MP04")
        arraylist_vsp_mp.Add("MPB-1MB.MP05-1MB,MPB1(1MB)-MP05")
        arraylist_vsp_mp.Add("MPB-1MB.MP06-1MB,MPB1(1MB)-MP06")
        arraylist_vsp_mp.Add("MPB-1MB.MP07-1MB,MPB1(1MB)-MP07")
        arraylist_vsp_mp.Add("MPB-2MC.MP08-2MC,MPB2(2MC)-MP08")
        arraylist_vsp_mp.Add("MPB-2MC.MP09-2MC,MPB2(2MC)-MP09")
        arraylist_vsp_mp.Add("MPB-2MC.MP0A-2MC,MPB2(2MC)-MP0A")
        arraylist_vsp_mp.Add("MPB-2MC.MP0B-2MC,MPB2(2MC)-MP0B")
        arraylist_vsp_mp.Add("MPB-2MD.MP0C-2MD,MPB3(2MD)-MP0C")
        arraylist_vsp_mp.Add("MPB-2MD.MP0D-2MD,MPB3(2MD)-MP0D")
        arraylist_vsp_mp.Add("MPB-2MD.MP0E-2MD,MPB3(2MD)-MP0E")
        arraylist_vsp_mp.Add("MPB-2MD.MP0F-2MD,MPB3(2MD)-MP0F")
        arraylist_vsp_mp.Add("MPB-1ME.MP10-1ME,MPB4(1ME)-MP10")
        arraylist_vsp_mp.Add("MPB-1ME.MP11-1ME,MPB4(1ME)-MP11")
        arraylist_vsp_mp.Add("MPB-1ME.MP12-1ME,MPB4(1ME)-MP12")
        arraylist_vsp_mp.Add("MPB-1ME.MP13-1ME,MPB4(1ME)-MP13")
        arraylist_vsp_mp.Add("MPB-1MF.MP14-1MF,MPB5(1MF)-MP14")
        arraylist_vsp_mp.Add("MPB-1MF.MP15-1MF,MPB5(1MF)-MP15")
        arraylist_vsp_mp.Add("MPB-1MF.MP16-1MF,MPB5(1MF)-MP16")
        arraylist_vsp_mp.Add("MPB-1MF.MP17-1MF,MPB5(1MF)-MP17")
        arraylist_vsp_mp.Add("MPB-2MG.MP18-2MG,MPB6(2MG)-MP18")
        arraylist_vsp_mp.Add("MPB-2MG.MP19-2MG,MPB6(2MG)-MP19")
        arraylist_vsp_mp.Add("MPB-2MG.MP1A-2MG,MPB6(2MG)-MP1A")
        arraylist_vsp_mp.Add("MPB-2MG.MP1B-2MG,MPB6(2MG)-MP1B")
        arraylist_vsp_mp.Add("MPB-2MH.MP1C-2MH,MPB7(2MH)-MP1C")
        arraylist_vsp_mp.Add("MPB-2MH.MP1D-2MH,MPB7(2MH)-MP1D")
        arraylist_vsp_mp.Add("MPB-2MH.MP1E-2MH,MPB7(2MH)-MP1E")
        arraylist_vsp_mp.Add("MPB-2MH.MP1F-2MH,MPB7(2MH)-MP1F")
        arraylist_vsp_mp.Add("BackEnd,BackEnd")
        arraylist_vsp_mp.Add("System,System")
        arraylist_vsp_mp.Add("Open-Target,Open-Target")
        arraylist_vsp_mp.Add("Open-Initiator,Open-Initiator")
        arraylist_vsp_mp.Add("Open-External,Open-External")
        arraylist_vsp_mp.Add("MF-Target,MF-Target")
        arraylist_vsp_mp.Add("MF-External,MF-External")

        'create mp conversion list
        'hus v mp arraylist
        arraylist_husvm_mp.Clear()
        arraylist_husvm_mp.Add("MPU-10.MP10-00,MPU-10(MP00)")
        arraylist_husvm_mp.Add("MPU-10.MP10-01,MPU-10(MP01)")
        arraylist_husvm_mp.Add("MPU-10.MP10-02,MPU-10(MP02)")
        arraylist_husvm_mp.Add("MPU-10.MP10-03,MPU-10(MP03)")
        arraylist_husvm_mp.Add("MPU-10.MP10-04,MPU-10(MP04)")
        arraylist_husvm_mp.Add("MPU-10.MP10-05,MPU-10(MP05)")
        arraylist_husvm_mp.Add("MPU-10.MP10-06,MPU-10(MP06)")
        arraylist_husvm_mp.Add("MPU-10.MP10-07,MPU-10(MP07)")
        arraylist_husvm_mp.Add("MPU-10.MP10-08,MPU-10(MP08)")
        arraylist_husvm_mp.Add("MPU-10.MP10-09,MPU-10(MP09)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0A,MPU-10(MP0A)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0B,MPU-10(MP0B)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0C,MPU-10(MP0C)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0D,MPU-10(MP0D)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0E,MPU-10(MP0E)")
        arraylist_husvm_mp.Add("MPU-10.MP10-0F,MPU-10(MP0F)")
        arraylist_husvm_mp.Add("MPU-10.MP10-10,MPU-10(MP10)")
        arraylist_husvm_mp.Add("MPU-10.MP10-11,MPU-10(MP11)")
        arraylist_husvm_mp.Add("MPU-10.MP10-12,MPU-10(MP12)")
        arraylist_husvm_mp.Add("MPU-10.MP10-13,MPU-10(MP13)")

        arraylist_husvm_mp.Add("MPU-11.MP11-00,MPU-11(MP00)")
        arraylist_husvm_mp.Add("MPU-11.MP11-01,MPU-11(MP01)")
        arraylist_husvm_mp.Add("MPU-11.MP11-02,MPU-11(MP02)")
        arraylist_husvm_mp.Add("MPU-11.MP11-03,MPU-11(MP03)")
        arraylist_husvm_mp.Add("MPU-11.MP11-04,MPU-11(MP04)")
        arraylist_husvm_mp.Add("MPU-11.MP11-05,MPU-11(MP05)")
        arraylist_husvm_mp.Add("MPU-11.MP11-06,MPU-11(MP06)")
        arraylist_husvm_mp.Add("MPU-11.MP11-07,MPU-11(MP07)")
        arraylist_husvm_mp.Add("MPU-11.MP11-08,MPU-11(MP08)")
        arraylist_husvm_mp.Add("MPU-11.MP11-09,MPU-11(MP09)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0A,MPU-11(MP0A)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0B,MPU-11(MP0B)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0C,MPU-11(MP0C)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0D,MPU-11(MP0D)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0E,MPU-11(MP0E)")
        arraylist_husvm_mp.Add("MPU-11.MP11-0F,MPU-11(MP0F)")
        arraylist_husvm_mp.Add("MPU-11.MP11-10,MPU-11(MP10)")
        arraylist_husvm_mp.Add("MPU-11.MP11-11,MPU-11(MP11)")
        arraylist_husvm_mp.Add("MPU-11.MP11-12,MPU-11(MP12)")
        arraylist_husvm_mp.Add("MPU-11.MP11-13,MPU-11(MP13)")

        arraylist_husvm_mp.Add("MPU-20.MP20-00,MPU-20(MP00)")
        arraylist_husvm_mp.Add("MPU-20.MP20-01,MPU-20(MP01)")
        arraylist_husvm_mp.Add("MPU-20.MP20-02,MPU-20(MP02)")
        arraylist_husvm_mp.Add("MPU-20.MP20-03,MPU-20(MP03)")
        arraylist_husvm_mp.Add("MPU-20.MP20-04,MPU-20(MP04)")
        arraylist_husvm_mp.Add("MPU-20.MP20-05,MPU-20(MP05)")
        arraylist_husvm_mp.Add("MPU-20.MP20-06,MPU-20(MP06)")
        arraylist_husvm_mp.Add("MPU-20.MP20-07,MPU-20(MP07)")
        arraylist_husvm_mp.Add("MPU-20.MP20-08,MPU-20(MP08)")
        arraylist_husvm_mp.Add("MPU-20.MP20-09,MPU-20(MP09)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0A,MPU-20(MP0A)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0B,MPU-20(MP0B)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0C,MPU-20(MP0C)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0D,MPU-20(MP0D)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0E,MPU-20(MP0E)")
        arraylist_husvm_mp.Add("MPU-20.MP20-0F,MPU-20(MP0F)")
        arraylist_husvm_mp.Add("MPU-20.MP20-10,MPU-20(MP10)")
        arraylist_husvm_mp.Add("MPU-20.MP20-11,MPU-20(MP11)")
        arraylist_husvm_mp.Add("MPU-20.MP20-12,MPU-20(MP12)")
        arraylist_husvm_mp.Add("MPU-20.MP20-13,MPU-20(MP13)")

        arraylist_husvm_mp.Add("MPU-21.MP21-00,MPU-21(MP00)")
        arraylist_husvm_mp.Add("MPU-21.MP21-01,MPU-21(MP01)")
        arraylist_husvm_mp.Add("MPU-21.MP21-02,MPU-21(MP02)")
        arraylist_husvm_mp.Add("MPU-21.MP21-03,MPU-21(MP03)")
        arraylist_husvm_mp.Add("MPU-21.MP21-04,MPU-21(MP04)")
        arraylist_husvm_mp.Add("MPU-21.MP21-05,MPU-21(MP05)")
        arraylist_husvm_mp.Add("MPU-21.MP21-06,MPU-21(MP06)")
        arraylist_husvm_mp.Add("MPU-21.MP21-07,MPU-21(MP07)")
        arraylist_husvm_mp.Add("MPU-21.MP21-08,MPU-21(MP08)")
        arraylist_husvm_mp.Add("MPU-21.MP21-09,MPU-21(MP09)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0A,MPU-21(MP0A)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0B,MPU-21(MP0B)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0C,MPU-21(MP0C)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0D,MPU-21(MP0D)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0E,MPU-21(MP0E)")
        arraylist_husvm_mp.Add("MPU-21.MP21-0F,MPU-21(MP0F)")
        arraylist_husvm_mp.Add("MPU-21.MP21-10,MPU-21(MP10)")
        arraylist_husvm_mp.Add("MPU-21.MP21-11,MPU-21(MP11)")
        arraylist_husvm_mp.Add("MPU-21.MP21-12,MPU-21(MP12)")
        arraylist_husvm_mp.Add("MPU-21.MP21-13,MPU-21(MP13)")

        arraylist_husvm_mp.Add("BackEnd,BackEnd")
        arraylist_husvm_mp.Add("System,System")
        arraylist_husvm_mp.Add("Open-Target,Open-Target")
        arraylist_husvm_mp.Add("Open-Initiator,Open-Initiator")
        arraylist_husvm_mp.Add("Open-External,Open-External")
        arraylist_husvm_mp.Add("MF-Target,MF-Target")
        arraylist_husvm_mp.Add("MF-External,MF-External")

        'create mp conversion list
        'vsp g1000 mp arraylist
        arraylist_vspg1000_mp.Clear()
        'Module #0
        arraylist_vspg1000_mp.Add("MPB-1MA.MP00-1MA,MPB-1MA(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP01-1MA,MPB-1MA(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP02-1MA,MPB-1MA(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP03-1MA,MPB-1MA(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP04-1MA,MPB-1MA(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP05-1MA,MPB-1MA(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP06-1MA,MPB-1MA(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1MA.MP07-1MA,MPB-1MA(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1MB.MP00-1MB,MPB-1MB(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP01-1MB,MPB-1MB(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP02-1MB,MPB-1MB(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP03-1MB,MPB-1MB(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP04-1MB,MPB-1MB(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP05-1MB,MPB-1MB(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP06-1MB,MPB-1MB(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1MB.MP07-1MB,MPB-1MB(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1PE.MP00-1PE,MPB-1PE(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP01-1PE,MPB-1PE(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP02-1PE,MPB-1PE(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP03-1PE,MPB-1PE(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP04-1PE,MPB-1PE(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP05-1PE,MPB-1PE(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP06-1PE,MPB-1PE(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1PE.MP07-1PE,MPB-1PE(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1PF.MP00-1PF,MPB-1PF(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP01-1PF,MPB-1PF(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP02-1PF,MPB-1PF(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP03-1PF,MPB-1PF(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP04-1PF,MPB-1PF(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP05-1PF,MPB-1PF(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP06-1PF,MPB-1PF(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1PF.MP07-1PF,MPB-1PF(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2MA.MP00-2MA,MPB-2MA(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP01-2MA,MPB-2MA(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP02-2MA,MPB-2MA(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP03-2MA,MPB-2MA(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP04-2MA,MPB-2MA(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP05-2MA,MPB-2MA(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP06-2MA,MPB-2MA(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2MA.MP07-2MA,MPB-2MA(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2MB.MP00-2MB,MPB-2MB(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP01-2MB,MPB-2MB(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP02-2MB,MPB-2MB(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP03-2MB,MPB-2MB(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP04-2MB,MPB-2MB(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP05-2MB,MPB-2MB(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP06-2MB,MPB-2MB(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2MB.MP07-2MB,MPB-2MB(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2PE.MP00-2PE,MPB-2PE(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP01-2PE,MPB-2PE(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP02-2PE,MPB-2PE(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP03-2PE,MPB-2PE(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP04-2PE,MPB-2PE(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP05-2PE,MPB-2PE(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP06-2PE,MPB-2PE(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2PE.MP07-2PE,MPB-2PE(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2PF.MP00-2PF,MPB-2PF(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP01-2PF,MPB-2PF(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP02-2PF,MPB-2PF(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP03-2PF,MPB-2PF(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP04-2PF,MPB-2PF(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP05-2PF,MPB-2PF(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP06-2PF,MPB-2PF(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2PF.MP07-2PF,MPB-2PF(MP07)")

        'module #1

        arraylist_vspg1000_mp.Add("MPB-1MC.MP00-1MC,MPB-1MC(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP01-1MC,MPB-1MC(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP02-1MC,MPB-1MC(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP03-1MC,MPB-1MC(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP04-1MC,MPB-1MC(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP05-1MC,MPB-1MC(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP06-1MC,MPB-1MC(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1MC.MP07-1MC,MPB-1MC(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1MD.MP00-1MD,MPB-1MD(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP01-1MD,MPB-1MD(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP02-1MD,MPB-1MD(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP03-1MD,MPB-1MD(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP04-1MD,MPB-1MD(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP05-1MD,MPB-1MD(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP06-1MD,MPB-1MD(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1MD.MP07-1MD,MPB-1MD(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1PL.MP00-1PL,MPB-1PL(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP01-1PL,MPB-1PL(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP02-1PL,MPB-1PL(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP03-1PL,MPB-1PL(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP04-1PL,MPB-1PL(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP05-1PL,MPB-1PL(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP06-1PL,MPB-1PL(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1PL.MP07-1PL,MPB-1PL(MP07)")

        arraylist_vspg1000_mp.Add("MPB-1PM.MP00-1PM,MPB-1PM(MP00)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP01-1PM,MPB-1PM(MP01)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP02-1PM,MPB-1PM(MP02)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP03-1PM,MPB-1PM(MP03)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP04-1PM,MPB-1PM(MP04)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP05-1PM,MPB-1PM(MP05)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP06-1PM,MPB-1PM(MP06)")
        arraylist_vspg1000_mp.Add("MPB-1PM.MP07-1PM,MPB-1PM(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2MC.MP00-2MC,MPB-2MC(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP01-2MC,MPB-2MC(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP02-2MC,MPB-2MC(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP03-2MC,MPB-2MC(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP04-2MC,MPB-2MC(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP05-2MC,MPB-2MC(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP06-2MC,MPB-2MC(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2MC.MP07-2MC,MPB-2MC(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2MD.MP00-2MD,MPB-2MD(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP01-2MD,MPB-2MD(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP02-2MD,MPB-2MD(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP03-2MD,MPB-2MD(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP04-2MD,MPB-2MD(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP05-2MD,MPB-2MD(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP06-2MD,MPB-2MD(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2MD.MP07-2MD,MPB-2MD(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2PL.MP00-2PL,MPB-2PL(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP01-2PL,MPB-2PL(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP02-2PL,MPB-2PL(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP03-2PL,MPB-2PL(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP04-2PL,MPB-2PL(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP05-2PL,MPB-2PL(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP06-2PL,MPB-2PL(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2PL.MP07-2PL,MPB-2PL(MP07)")

        arraylist_vspg1000_mp.Add("MPB-2PM.MP00-2PM,MPB-2PM(MP00)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP01-2PM,MPB-2PM(MP01)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP02-2PM,MPB-2PM(MP02)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP03-2PM,MPB-2PM(MP03)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP04-2PM,MPB-2PM(MP04)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP05-2PM,MPB-2PM(MP05)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP06-2PM,MPB-2PM(MP06)")
        arraylist_vspg1000_mp.Add("MPB-2PM.MP07-2PM,MPB-2PM(MP07)")

        'in the manual it says different, but .....

        'arraylist_vspg1000_mp.Add("MPB-1MB.MP08-1MB,MPB-1MB(MP08)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP09-1MB,MPB-1MB(MP09)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0A-1MB,MPB-1MB(MP0A)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0B-1MB,MPB-1MB(MP0B)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0C-1MB,MPB-1MB(MP0C)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0D-1MB,MPB-1MB(MP0D)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0E-1MB,MPB-1MB(MP0E)")
        'arraylist_vspg1000_mp.Add("MPB-1MB.MP0F-1MB,MPB-1MB(MP0F)")

        'arraylist_vspg1000_mp.Add("MPB-1PE.MP10-1PE,MPB-1PE(MP10)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP11-1PE,MPB-1PE(MP11)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP12-1PE,MPB-1PE(MP12)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP13-1PE,MPB-1PE(MP13)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP14-1PE,MPB-1PE(MP14)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP15-1PE,MPB-1PE(MP15)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP16-1PE,MPB-1PE(MP16)")
        'arraylist_vspg1000_mp.Add("MPB-1PE.MP17-1PE,MPB-1PE(MP17)")

        'arraylist_vspg1000_mp.Add("MPB-1PF.MP18-1PF,MPB-1PF(MP18)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP19-1PF,MPB-1PF(MP19)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1A-1PF,MPB-1PF(MP1A)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1B-1PF,MPB-1PF(MP1B)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1C-1PF,MPB-1PF(MP1C)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1D-1PF,MPB-1PF(MP1D)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1E-1PF,MPB-1PF(MP1E)")
        'arraylist_vspg1000_mp.Add("MPB-1PF.MP1F-1PF,MPB-1PF(MP1F)")

        'arraylist_vspg1000_mp.Add("MPB-2MA.MP20-2MA,MPB-2MA(MP20)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP21-2MA,MPB-2MA(MP21)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP22-2MA,MPB-2MA(MP22)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP23-2MA,MPB-2MA(MP23)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP24-2MA,MPB-2MA(MP24)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP25-2MA,MPB-2MA(MP25)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP26-2MA,MPB-2MA(MP26)")
        'arraylist_vspg1000_mp.Add("MPB-2MA.MP27-2MA,MPB-2MA(MP27)")

        'arraylist_vspg1000_mp.Add("MPB-2MB.MP28-2MB,MPB-2MB(MP28)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP29-2MB,MPB-2MB(MP29)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2A-2MB,MPB-2MB(MP2A)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2B-2MB,MPB-2MB(MP2B)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2C-2MB,MPB-2MB(MP2C)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2D-2MB,MPB-2MB(MP2D)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2E-2MB,MPB-2MB(MP2E)")
        'arraylist_vspg1000_mp.Add("MPB-2MB.MP2F-2MB,MPB-2MB(MP2F)")

        'arraylist_vspg1000_mp.Add("MPB-2PE.MP30-2PE,MPB-2PE(MP30)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP31-2PE,MPB-2PE(MP31)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP32-2PE,MPB-2PE(MP32)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP33-2PE,MPB-2PE(MP33)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP34-2PE,MPB-2PE(MP34)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP35-2PE,MPB-2PE(MP35)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP36-2PE,MPB-2PE(MP36)")
        'arraylist_vspg1000_mp.Add("MPB-2PE.MP37-2PE,MPB-2PE(MP37)")

        'arraylist_vspg1000_mp.Add("MPB-2PF.MP38-2PF,MPB-2PF(MP38)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP39-2PF,MPB-2PF(MP39)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3A-2PF,MPB-2PF(MP3A)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3B-2PF,MPB-2PF(MP3B)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3C-2PF,MPB-2PF(MP3C)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3D-2PF,MPB-2PF(MP3D)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3E-2PF,MPB-2PF(MP3E)")
        'arraylist_vspg1000_mp.Add("MPB-2PF.MP3F-2PF,MPB-2PF(MP3F)")

        ''Module #1
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP40-1MC,MPB-1MC(MP40)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP41-1MC,MPB-1MC(MP41)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP42-1MC,MPB-1MC(MP42)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP43-1MC,MPB-1MC(MP43)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP44-1MC,MPB-1MC(MP44)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP45-1MC,MPB-1MC(MP45)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP46-1MC,MPB-1MC(MP46)")
        'arraylist_vspg1000_mp.Add("MPB-1MC.MP47-1MC,MPB-1MC(MP47)")

        'arraylist_vspg1000_mp.Add("MPB-1MD.MP48-1MD,MPB-1MD(MP48)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP49-1MD,MPB-1MD(MP49)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4A-1MD,MPB-1MD(MP4A)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4B-1MD,MPB-1MD(MP4B)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4C-1MD,MPB-1MD(MP4C)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4D-1MD,MPB-1MD(MP4D)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4E-1MD,MPB-1MD(MP4E)")
        'arraylist_vspg1000_mp.Add("MPB-1MD.MP4F-1MD,MPB-1MD(MP4F)")

        'arraylist_vspg1000_mp.Add("MPB-1FL.MP50-1FL,MPB-1FL(MP50)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP51-1FL,MPB-1FL(MP51)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP52-1FL,MPB-1FL(MP52)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP53-1FL,MPB-1FL(MP53)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP54-1FL,MPB-1FL(MP54)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP55-1FL,MPB-1FL(MP55)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP56-1FL,MPB-1FL(MP56)")
        'arraylist_vspg1000_mp.Add("MPB-1FL.MP57-1FL,MPB-1FL(MP57)")

        'arraylist_vspg1000_mp.Add("MPB-1FM.MP58-1FM,MPB-1FM(MP58)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP59-1FM,MPB-1FM(MP59)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5A-1FM,MPB-1FM(MP5A)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5B-1FM,MPB-1FM(MP5B)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5C-1FM,MPB-1FM(MP5C)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5D-1FM,MPB-1FM(MP5D)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5E-1FM,MPB-1FM(MP5E)")
        'arraylist_vspg1000_mp.Add("MPB-1FM.MP5F-1FM,MPB-1FM(MP5F)")

        'arraylist_vspg1000_mp.Add("MPB-2MC.MP60-2MC,MPB-2MC(MP60)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP61-2MC,MPB-2MC(MP61)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP62-2MC,MPB-2MC(MP62)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP63-2MC,MPB-2MC(MP63)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP64-2MC,MPB-2MC(MP64)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP65-2MC,MPB-2MC(MP65)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP66-2MC,MPB-2MC(MP66)")
        'arraylist_vspg1000_mp.Add("MPB-2MC.MP67-2MC,MPB-2MC(MP67)")

        'arraylist_vspg1000_mp.Add("MPB-2MD.MP68-2MD,MPB-2MD(MP68)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP69-2MD,MPB-2MD(MP69)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6A-2MD,MPB-2MD(MP6A)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6B-2MD,MPB-2MD(MP6B)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6C-2MD,MPB-2MD(MP6C)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6D-2MD,MPB-2MD(MP6D)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6E-2MD,MPB-2MD(MP6E)")
        'arraylist_vspg1000_mp.Add("MPB-2MD.MP6F-2MD,MPB-2MD(MP6F)")

        'arraylist_vspg1000_mp.Add("MPB-2PL.MP70-2PL,MPB-2PL(MP70)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP71-2PL,MPB-2PL(MP71)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP72-2PL,MPB-2PL(MP72)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP73-2PL,MPB-2PL(MP73)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP74-2PL,MPB-2PL(MP74)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP75-2PL,MPB-2PL(MP75)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP76-2PL,MPB-2PL(MP76)")
        'arraylist_vspg1000_mp.Add("MPB-2PL.MP77-2PL,MPB-2PL(MP77)")

        'arraylist_vspg1000_mp.Add("MPB-2PM.MP78-2PM,MPB-2PM(MP78)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP79-2PM,MPB-2PM(MP79)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7A-2PM,MPB-2PM(MP7A)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7B-2PM,MPB-2PM(MP7B)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7C-2PM,MPB-2PM(MP7C)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7D-2PM,MPB-2PM(MP7D)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7E-2PM,MPB-2PM(MP7E)")
        'arraylist_vspg1000_mp.Add("MPB-2PM.MP7F-2PM,MPB-2PM(MP7F)")

        'Open-Target, Open-Initiator, Open-External, MF-Target, MF-External, BackEnd, or System
        arraylist_vspg1000_mp.Add("BackEnd,BackEnd")
        arraylist_vspg1000_mp.Add("System,System")
        arraylist_vspg1000_mp.Add("Open-Target,Open-Target")
        arraylist_vspg1000_mp.Add("Open-Initiator,Open-Initiator")
        arraylist_vspg1000_mp.Add("Open-External,Open-External")
        arraylist_vspg1000_mp.Add("MF-Target,MF-Target")
        arraylist_vspg1000_mp.Add("MF-External,MF-External")

        'create mp conversion list
        'VSP 5000
        arraylist_vsp5000_mp.Clear()
        'mp010
        arraylist_vsp5000_mp.Add("MPU-010.MP010-00, MPU010-MP010(00)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-01, MPU010-MP010(01)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-02, MPU010-MP010(02)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-03, MPU010-MP010(03)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-04, MPU010-MP010(04)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-05, MPU010-MP010(05)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-06, MPU010-MP010(06)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-07, MPU010-MP010(07)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-08, MPU010-MP010(08)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-09, MPU010-MP010(09)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0A, MPU010-MP010(0A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0B, MPU010-MP010(0B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0C, MPU010-MP010(0C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0D, MPU010-MP010(0D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0E, MPU010-MP010(0E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-0F, MPU010-MP010(0F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-10, MPU010-MP010(10)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-11, MPU010-MP010(11)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-12, MPU010-MP010(12)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-13, MPU010-MP010(13)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-14, MPU010-MP010(14)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-15, MPU010-MP010(15)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-16, MPU010-MP010(16)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-17, MPU010-MP010(17)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-18, MPU010-MP010(18)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-19, MPU010-MP010(19)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1A, MPU010-MP010(1A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1B, MPU010-MP010(1B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1C, MPU010-MP010(1C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1D, MPU010-MP010(1D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1E, MPU010-MP010(1E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-1F, MPU010-MP010(1F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-20, MPU010-MP010(20)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-21, MPU010-MP010(21)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-22, MPU010-MP010(22)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-23, MPU010-MP010(23)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-24, MPU010-MP010(24)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-25, MPU010-MP010(25)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-26, MPU010-MP010(26)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-27, MPU010-MP010(27)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-28, MPU010-MP010(28)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-29, MPU010-MP010(29)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2A, MPU010-MP010(2A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2B, MPU010-MP010(2B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2C, MPU010-MP010(2C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2D, MPU010-MP010(2D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2E, MPU010-MP010(2E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-2F, MPU010-MP010(2F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-30, MPU010-MP010(30)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-31, MPU010-MP010(31)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-32, MPU010-MP010(32)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-33, MPU010-MP010(33)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-34, MPU010-MP010(34)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-35, MPU010-MP010(35)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-36, MPU010-MP010(36)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-37, MPU010-MP010(37)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-38, MPU010-MP010(38)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-39, MPU010-MP010(39)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3A, MPU010-MP010(3A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3B, MPU010-MP010(3B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3C, MPU010-MP010(3C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3D, MPU010-MP010(3D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3E, MPU010-MP010(3E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-3F, MPU010-MP010(3F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-40, MPU010-MP010(40)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-41, MPU010-MP010(41)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-42, MPU010-MP010(42)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-43, MPU010-MP010(43)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-44, MPU010-MP010(44)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-45, MPU010-MP010(45)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-46, MPU010-MP010(46)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-47, MPU010-MP010(47)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-48, MPU010-MP010(48)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-49, MPU010-MP010(49)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4A, MPU010-MP010(4A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4B, MPU010-MP010(4B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4C, MPU010-MP010(4C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4D, MPU010-MP010(4D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4E, MPU010-MP010(4E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-4F, MPU010-MP010(4F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-50, MPU010-MP010(50)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-51, MPU010-MP010(51)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-52, MPU010-MP010(52)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-53, MPU010-MP010(53)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-54, MPU010-MP010(54)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-55, MPU010-MP010(55)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-56, MPU010-MP010(56)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-57, MPU010-MP010(57)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-58, MPU010-MP010(58)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-59, MPU010-MP010(59)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5A, MPU010-MP010(5A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5B, MPU010-MP010(5B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5C, MPU010-MP010(5C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5D, MPU010-MP010(5D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5E, MPU010-MP010(5E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-5F, MPU010-MP010(5F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-60, MPU010-MP010(60)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-61, MPU010-MP010(61)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-62, MPU010-MP010(62)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-63, MPU010-MP010(63)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-64, MPU010-MP010(64)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-65, MPU010-MP010(65)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-66, MPU010-MP010(66)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-67, MPU010-MP010(67)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-68, MPU010-MP010(68)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-69, MPU010-MP010(69)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6A, MPU010-MP010(6A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6B, MPU010-MP010(6B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6C, MPU010-MP010(6C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6D, MPU010-MP010(6D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6E, MPU010-MP010(6E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-6F, MPU010-MP010(6F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-70, MPU010-MP010(70)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-71, MPU010-MP010(71)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-72, MPU010-MP010(72)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-73, MPU010-MP010(73)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-74, MPU010-MP010(74)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-75, MPU010-MP010(75)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-76, MPU010-MP010(76)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-77, MPU010-MP010(77)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-78, MPU010-MP010(78)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-79, MPU010-MP010(79)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7A, MPU010-MP010(7A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7B, MPU010-MP010(7B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7C, MPU010-MP010(7C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7D, MPU010-MP010(7D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7E, MPU010-MP010(7E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-7F, MPU010-MP010(7F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-80, MPU010-MP010(80)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-81, MPU010-MP010(81)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-82, MPU010-MP010(82)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-83, MPU010-MP010(83)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-84, MPU010-MP010(84)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-85, MPU010-MP010(85)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-86, MPU010-MP010(86)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-87, MPU010-MP010(87)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-88, MPU010-MP010(88)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-89, MPU010-MP010(89)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8A, MPU010-MP010(8A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8B, MPU010-MP010(8B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8C, MPU010-MP010(8C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8D, MPU010-MP010(8D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8E, MPU010-MP010(8E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-8F, MPU010-MP010(8F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-90, MPU010-MP010(90)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-91, MPU010-MP010(91)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-92, MPU010-MP010(92)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-93, MPU010-MP010(93)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-94, MPU010-MP010(94)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-95, MPU010-MP010(95)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-96, MPU010-MP010(96)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-97, MPU010-MP010(97)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-98, MPU010-MP010(98)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-99, MPU010-MP010(99)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9A, MPU010-MP010(9A)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9B, MPU010-MP010(9B)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9C, MPU010-MP010(9C)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9D, MPU010-MP010(9D)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9E, MPU010-MP010(9E)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-9F, MPU010-MP010(9F)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A0, MPU010-MP010(A0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A1, MPU010-MP010(A1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A2, MPU010-MP010(A2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A3, MPU010-MP010(A3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A4, MPU010-MP010(A4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A5, MPU010-MP010(A5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A6, MPU010-MP010(A6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A7, MPU010-MP010(A7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A8, MPU010-MP010(A8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-A9, MPU010-MP010(A9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AA, MPU010-MP010(AA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AB, MPU010-MP010(AB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AC, MPU010-MP010(AC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AD, MPU010-MP010(AD)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AE, MPU010-MP010(AE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-AF, MPU010-MP010(AF)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B0, MPU010-MP010(B0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B1, MPU010-MP010(B1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B2, MPU010-MP010(B2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B3, MPU010-MP010(B3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B4, MPU010-MP010(B4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B5, MPU010-MP010(B5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B6, MPU010-MP010(B6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B7, MPU010-MP010(B7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B8, MPU010-MP010(B8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-B9, MPU010-MP010(B9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BA, MPU010-MP010(BA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BB, MPU010-MP010(BB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BC, MPU010-MP010(BC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BD, MPU010-MP010(BD)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BE, MPU010-MP010(BE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-BF, MPU010-MP010(BF)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C0, MPU010-MP010(C0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C1, MPU010-MP010(C1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C2, MPU010-MP010(C2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C3, MPU010-MP010(C3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C4, MPU010-MP010(C4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C5, MPU010-MP010(C5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C6, MPU010-MP010(C6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C7, MPU010-MP010(C7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C8, MPU010-MP010(C8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-C9, MPU010-MP010(C9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CA, MPU010-MP010(CA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CB, MPU010-MP010(CB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CC, MPU010-MP010(CC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CD, MPU010-MP010(CD)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CE, MPU010-MP010(CE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-CF, MPU010-MP010(CF)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D0, MPU010-MP010(D0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D1, MPU010-MP010(D1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D2, MPU010-MP010(D2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D3, MPU010-MP010(D3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D4, MPU010-MP010(D4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D5, MPU010-MP010(D5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D6, MPU010-MP010(D6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D7, MPU010-MP010(D7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D8, MPU010-MP010(D8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-D9, MPU010-MP010(D9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DA, MPU010-MP010(DA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DB, MPU010-MP010(DB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DC, MPU010-MP010(DC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DD, MPU010-MP010(DD)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DE, MPU010-MP010(DE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-DF, MPU010-MP010(DF)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E0, MPU010-MP010(E0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E1, MPU010-MP010(E1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E2, MPU010-MP010(E2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E3, MPU010-MP010(E3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E4, MPU010-MP010(E4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E5, MPU010-MP010(E5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E6, MPU010-MP010(E6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E7, MPU010-MP010(E7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E8, MPU010-MP010(E8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-E9, MPU010-MP010(E9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-EA, MPU010-MP010(EA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-EB, MPU010-MP010(EB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-EC, MPU010-MP010(EC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-ED, MPU010-MP010(ED)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-EE, MPU010-MP010(EE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-EF, MPU010-MP010(EF)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F0, MPU010-MP010(F0)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F1, MPU010-MP010(F1)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F2, MPU010-MP010(F2)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F3, MPU010-MP010(F3)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F4, MPU010-MP010(F4)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F5, MPU010-MP010(F5)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F6, MPU010-MP010(F6)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F7, MPU010-MP010(F7)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F8, MPU010-MP010(F8)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-F9, MPU010-MP010(F9)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FA, MPU010-MP010(FA)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FB, MPU010-MP010(FB)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FC, MPU010-MP010(FC)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FD, MPU010-MP010(FD)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FE, MPU010-MP010(FE)")
        arraylist_vsp5000_mp.Add("MPU-010.MP010-FF, MPU010-MP010(FF)")
        'mp020
        arraylist_vsp5000_mp.Add("MPU-020.MP020-00, MPU020-MP020(00)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-01, MPU020-MP020(01)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-02, MPU020-MP020(02)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-03, MPU020-MP020(03)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-04, MPU020-MP020(04)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-05, MPU020-MP020(05)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-06, MPU020-MP020(06)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-07, MPU020-MP020(07)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-08, MPU020-MP020(08)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-09, MPU020-MP020(09)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0A, MPU020-MP020(0A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0B, MPU020-MP020(0B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0C, MPU020-MP020(0C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0D, MPU020-MP020(0D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0E, MPU020-MP020(0E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-0F, MPU020-MP020(0F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-10, MPU020-MP020(10)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-11, MPU020-MP020(11)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-12, MPU020-MP020(12)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-13, MPU020-MP020(13)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-14, MPU020-MP020(14)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-15, MPU020-MP020(15)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-16, MPU020-MP020(16)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-17, MPU020-MP020(17)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-18, MPU020-MP020(18)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-19, MPU020-MP020(19)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1A, MPU020-MP020(1A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1B, MPU020-MP020(1B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1C, MPU020-MP020(1C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1D, MPU020-MP020(1D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1E, MPU020-MP020(1E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-1F, MPU020-MP020(1F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-20, MPU020-MP020(20)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-21, MPU020-MP020(21)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-22, MPU020-MP020(22)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-23, MPU020-MP020(23)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-24, MPU020-MP020(24)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-25, MPU020-MP020(25)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-26, MPU020-MP020(26)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-27, MPU020-MP020(27)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-28, MPU020-MP020(28)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-29, MPU020-MP020(29)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2A, MPU020-MP020(2A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2B, MPU020-MP020(2B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2C, MPU020-MP020(2C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2D, MPU020-MP020(2D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2E, MPU020-MP020(2E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-2F, MPU020-MP020(2F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-30, MPU020-MP020(30)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-31, MPU020-MP020(31)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-32, MPU020-MP020(32)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-33, MPU020-MP020(33)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-34, MPU020-MP020(34)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-35, MPU020-MP020(35)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-36, MPU020-MP020(36)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-37, MPU020-MP020(37)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-38, MPU020-MP020(38)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-39, MPU020-MP020(39)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3A, MPU020-MP020(3A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3B, MPU020-MP020(3B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3C, MPU020-MP020(3C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3D, MPU020-MP020(3D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3E, MPU020-MP020(3E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-3F, MPU020-MP020(3F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-40, MPU020-MP020(40)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-41, MPU020-MP020(41)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-42, MPU020-MP020(42)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-43, MPU020-MP020(43)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-44, MPU020-MP020(44)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-45, MPU020-MP020(45)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-46, MPU020-MP020(46)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-47, MPU020-MP020(47)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-48, MPU020-MP020(48)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-49, MPU020-MP020(49)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4A, MPU020-MP020(4A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4B, MPU020-MP020(4B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4C, MPU020-MP020(4C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4D, MPU020-MP020(4D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4E, MPU020-MP020(4E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-4F, MPU020-MP020(4F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-50, MPU020-MP020(50)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-51, MPU020-MP020(51)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-52, MPU020-MP020(52)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-53, MPU020-MP020(53)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-54, MPU020-MP020(54)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-55, MPU020-MP020(55)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-56, MPU020-MP020(56)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-57, MPU020-MP020(57)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-58, MPU020-MP020(58)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-59, MPU020-MP020(59)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5A, MPU020-MP020(5A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5B, MPU020-MP020(5B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5C, MPU020-MP020(5C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5D, MPU020-MP020(5D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5E, MPU020-MP020(5E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-5F, MPU020-MP020(5F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-60, MPU020-MP020(60)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-61, MPU020-MP020(61)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-62, MPU020-MP020(62)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-63, MPU020-MP020(63)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-64, MPU020-MP020(64)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-65, MPU020-MP020(65)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-66, MPU020-MP020(66)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-67, MPU020-MP020(67)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-68, MPU020-MP020(68)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-69, MPU020-MP020(69)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6A, MPU020-MP020(6A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6B, MPU020-MP020(6B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6C, MPU020-MP020(6C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6D, MPU020-MP020(6D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6E, MPU020-MP020(6E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-6F, MPU020-MP020(6F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-70, MPU020-MP020(70)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-71, MPU020-MP020(71)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-72, MPU020-MP020(72)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-73, MPU020-MP020(73)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-74, MPU020-MP020(74)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-75, MPU020-MP020(75)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-76, MPU020-MP020(76)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-77, MPU020-MP020(77)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-78, MPU020-MP020(78)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-79, MPU020-MP020(79)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7A, MPU020-MP020(7A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7B, MPU020-MP020(7B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7C, MPU020-MP020(7C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7D, MPU020-MP020(7D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7E, MPU020-MP020(7E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-7F, MPU020-MP020(7F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-80, MPU020-MP020(80)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-81, MPU020-MP020(81)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-82, MPU020-MP020(82)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-83, MPU020-MP020(83)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-84, MPU020-MP020(84)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-85, MPU020-MP020(85)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-86, MPU020-MP020(86)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-87, MPU020-MP020(87)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-88, MPU020-MP020(88)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-89, MPU020-MP020(89)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8A, MPU020-MP020(8A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8B, MPU020-MP020(8B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8C, MPU020-MP020(8C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8D, MPU020-MP020(8D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8E, MPU020-MP020(8E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-8F, MPU020-MP020(8F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-90, MPU020-MP020(90)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-91, MPU020-MP020(91)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-92, MPU020-MP020(92)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-93, MPU020-MP020(93)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-94, MPU020-MP020(94)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-95, MPU020-MP020(95)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-96, MPU020-MP020(96)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-97, MPU020-MP020(97)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-98, MPU020-MP020(98)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-99, MPU020-MP020(99)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9A, MPU020-MP020(9A)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9B, MPU020-MP020(9B)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9C, MPU020-MP020(9C)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9D, MPU020-MP020(9D)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9E, MPU020-MP020(9E)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-9F, MPU020-MP020(9F)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A0, MPU020-MP020(A0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A1, MPU020-MP020(A1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A2, MPU020-MP020(A2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A3, MPU020-MP020(A3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A4, MPU020-MP020(A4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A5, MPU020-MP020(A5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A6, MPU020-MP020(A6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A7, MPU020-MP020(A7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A8, MPU020-MP020(A8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-A9, MPU020-MP020(A9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AA, MPU020-MP020(AA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AB, MPU020-MP020(AB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AC, MPU020-MP020(AC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AD, MPU020-MP020(AD)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AE, MPU020-MP020(AE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-AF, MPU020-MP020(AF)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B0, MPU020-MP020(B0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B1, MPU020-MP020(B1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B2, MPU020-MP020(B2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B3, MPU020-MP020(B3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B4, MPU020-MP020(B4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B5, MPU020-MP020(B5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B6, MPU020-MP020(B6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B7, MPU020-MP020(B7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B8, MPU020-MP020(B8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-B9, MPU020-MP020(B9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BA, MPU020-MP020(BA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BB, MPU020-MP020(BB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BC, MPU020-MP020(BC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BD, MPU020-MP020(BD)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BE, MPU020-MP020(BE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-BF, MPU020-MP020(BF)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C0, MPU020-MP020(C0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C1, MPU020-MP020(C1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C2, MPU020-MP020(C2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C3, MPU020-MP020(C3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C4, MPU020-MP020(C4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C5, MPU020-MP020(C5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C6, MPU020-MP020(C6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C7, MPU020-MP020(C7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C8, MPU020-MP020(C8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-C9, MPU020-MP020(C9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CA, MPU020-MP020(CA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CB, MPU020-MP020(CB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CC, MPU020-MP020(CC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CD, MPU020-MP020(CD)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CE, MPU020-MP020(CE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-CF, MPU020-MP020(CF)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D0, MPU020-MP020(D0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D1, MPU020-MP020(D1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D2, MPU020-MP020(D2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D3, MPU020-MP020(D3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D4, MPU020-MP020(D4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D5, MPU020-MP020(D5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D6, MPU020-MP020(D6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D7, MPU020-MP020(D7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D8, MPU020-MP020(D8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-D9, MPU020-MP020(D9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DA, MPU020-MP020(DA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DB, MPU020-MP020(DB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DC, MPU020-MP020(DC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DD, MPU020-MP020(DD)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DE, MPU020-MP020(DE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-DF, MPU020-MP020(DF)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E0, MPU020-MP020(E0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E1, MPU020-MP020(E1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E2, MPU020-MP020(E2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E3, MPU020-MP020(E3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E4, MPU020-MP020(E4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E5, MPU020-MP020(E5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E6, MPU020-MP020(E6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E7, MPU020-MP020(E7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E8, MPU020-MP020(E8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-E9, MPU020-MP020(E9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-EA, MPU020-MP020(EA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-EB, MPU020-MP020(EB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-EC, MPU020-MP020(EC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-ED, MPU020-MP020(ED)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-EE, MPU020-MP020(EE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-EF, MPU020-MP020(EF)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F0, MPU020-MP020(F0)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F1, MPU020-MP020(F1)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F2, MPU020-MP020(F2)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F3, MPU020-MP020(F3)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F4, MPU020-MP020(F4)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F5, MPU020-MP020(F5)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F6, MPU020-MP020(F6)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F7, MPU020-MP020(F7)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F8, MPU020-MP020(F8)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-F9, MPU020-MP020(F9)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FA, MPU020-MP020(FA)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FB, MPU020-MP020(FB)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FC, MPU020-MP020(FC)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FD, MPU020-MP020(FD)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FE, MPU020-MP020(FE)")
        arraylist_vsp5000_mp.Add("MPU-020.MP020-FF, MPU020-MP020(FF)")
        'mp110
        arraylist_vsp5000_mp.Add("MPU-110.MP110-00, MPU110-MP110(00)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-01, MPU110-MP110(01)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-02, MPU110-MP110(02)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-03, MPU110-MP110(03)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-04, MPU110-MP110(04)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-05, MPU110-MP110(05)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-06, MPU110-MP110(06)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-07, MPU110-MP110(07)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-08, MPU110-MP110(08)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-09, MPU110-MP110(09)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0A, MPU110-MP110(0A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0B, MPU110-MP110(0B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0C, MPU110-MP110(0C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0D, MPU110-MP110(0D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0E, MPU110-MP110(0E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-0F, MPU110-MP110(0F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-10, MPU110-MP110(10)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-11, MPU110-MP110(11)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-12, MPU110-MP110(12)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-13, MPU110-MP110(13)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-14, MPU110-MP110(14)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-15, MPU110-MP110(15)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-16, MPU110-MP110(16)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-17, MPU110-MP110(17)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-18, MPU110-MP110(18)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-19, MPU110-MP110(19)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1A, MPU110-MP110(1A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1B, MPU110-MP110(1B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1C, MPU110-MP110(1C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1D, MPU110-MP110(1D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1E, MPU110-MP110(1E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-1F, MPU110-MP110(1F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-20, MPU110-MP110(20)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-21, MPU110-MP110(21)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-22, MPU110-MP110(22)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-23, MPU110-MP110(23)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-24, MPU110-MP110(24)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-25, MPU110-MP110(25)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-26, MPU110-MP110(26)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-27, MPU110-MP110(27)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-28, MPU110-MP110(28)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-29, MPU110-MP110(29)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2A, MPU110-MP110(2A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2B, MPU110-MP110(2B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2C, MPU110-MP110(2C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2D, MPU110-MP110(2D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2E, MPU110-MP110(2E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-2F, MPU110-MP110(2F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-30, MPU110-MP110(30)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-31, MPU110-MP110(31)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-32, MPU110-MP110(32)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-33, MPU110-MP110(33)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-34, MPU110-MP110(34)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-35, MPU110-MP110(35)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-36, MPU110-MP110(36)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-37, MPU110-MP110(37)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-38, MPU110-MP110(38)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-39, MPU110-MP110(39)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3A, MPU110-MP110(3A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3B, MPU110-MP110(3B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3C, MPU110-MP110(3C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3D, MPU110-MP110(3D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3E, MPU110-MP110(3E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-3F, MPU110-MP110(3F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-40, MPU110-MP110(40)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-41, MPU110-MP110(41)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-42, MPU110-MP110(42)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-43, MPU110-MP110(43)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-44, MPU110-MP110(44)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-45, MPU110-MP110(45)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-46, MPU110-MP110(46)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-47, MPU110-MP110(47)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-48, MPU110-MP110(48)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-49, MPU110-MP110(49)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4A, MPU110-MP110(4A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4B, MPU110-MP110(4B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4C, MPU110-MP110(4C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4D, MPU110-MP110(4D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4E, MPU110-MP110(4E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-4F, MPU110-MP110(4F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-50, MPU110-MP110(50)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-51, MPU110-MP110(51)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-52, MPU110-MP110(52)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-53, MPU110-MP110(53)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-54, MPU110-MP110(54)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-55, MPU110-MP110(55)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-56, MPU110-MP110(56)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-57, MPU110-MP110(57)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-58, MPU110-MP110(58)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-59, MPU110-MP110(59)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5A, MPU110-MP110(5A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5B, MPU110-MP110(5B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5C, MPU110-MP110(5C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5D, MPU110-MP110(5D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5E, MPU110-MP110(5E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-5F, MPU110-MP110(5F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-60, MPU110-MP110(60)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-61, MPU110-MP110(61)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-62, MPU110-MP110(62)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-63, MPU110-MP110(63)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-64, MPU110-MP110(64)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-65, MPU110-MP110(65)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-66, MPU110-MP110(66)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-67, MPU110-MP110(67)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-68, MPU110-MP110(68)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-69, MPU110-MP110(69)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6A, MPU110-MP110(6A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6B, MPU110-MP110(6B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6C, MPU110-MP110(6C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6D, MPU110-MP110(6D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6E, MPU110-MP110(6E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-6F, MPU110-MP110(6F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-70, MPU110-MP110(70)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-71, MPU110-MP110(71)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-72, MPU110-MP110(72)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-73, MPU110-MP110(73)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-74, MPU110-MP110(74)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-75, MPU110-MP110(75)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-76, MPU110-MP110(76)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-77, MPU110-MP110(77)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-78, MPU110-MP110(78)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-79, MPU110-MP110(79)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7A, MPU110-MP110(7A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7B, MPU110-MP110(7B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7C, MPU110-MP110(7C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7D, MPU110-MP110(7D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7E, MPU110-MP110(7E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-7F, MPU110-MP110(7F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-80, MPU110-MP110(80)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-81, MPU110-MP110(81)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-82, MPU110-MP110(82)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-83, MPU110-MP110(83)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-84, MPU110-MP110(84)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-85, MPU110-MP110(85)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-86, MPU110-MP110(86)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-87, MPU110-MP110(87)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-88, MPU110-MP110(88)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-89, MPU110-MP110(89)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8A, MPU110-MP110(8A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8B, MPU110-MP110(8B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8C, MPU110-MP110(8C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8D, MPU110-MP110(8D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8E, MPU110-MP110(8E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-8F, MPU110-MP110(8F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-90, MPU110-MP110(90)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-91, MPU110-MP110(91)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-92, MPU110-MP110(92)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-93, MPU110-MP110(93)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-94, MPU110-MP110(94)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-95, MPU110-MP110(95)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-96, MPU110-MP110(96)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-97, MPU110-MP110(97)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-98, MPU110-MP110(98)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-99, MPU110-MP110(99)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9A, MPU110-MP110(9A)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9B, MPU110-MP110(9B)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9C, MPU110-MP110(9C)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9D, MPU110-MP110(9D)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9E, MPU110-MP110(9E)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-9F, MPU110-MP110(9F)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A0, MPU110-MP110(A0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A1, MPU110-MP110(A1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A2, MPU110-MP110(A2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A3, MPU110-MP110(A3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A4, MPU110-MP110(A4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A5, MPU110-MP110(A5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A6, MPU110-MP110(A6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A7, MPU110-MP110(A7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A8, MPU110-MP110(A8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-A9, MPU110-MP110(A9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AA, MPU110-MP110(AA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AB, MPU110-MP110(AB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AC, MPU110-MP110(AC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AD, MPU110-MP110(AD)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AE, MPU110-MP110(AE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-AF, MPU110-MP110(AF)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B0, MPU110-MP110(B0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B1, MPU110-MP110(B1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B2, MPU110-MP110(B2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B3, MPU110-MP110(B3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B4, MPU110-MP110(B4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B5, MPU110-MP110(B5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B6, MPU110-MP110(B6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B7, MPU110-MP110(B7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B8, MPU110-MP110(B8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-B9, MPU110-MP110(B9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BA, MPU110-MP110(BA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BB, MPU110-MP110(BB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BC, MPU110-MP110(BC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BD, MPU110-MP110(BD)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BE, MPU110-MP110(BE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-BF, MPU110-MP110(BF)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C0, MPU110-MP110(C0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C1, MPU110-MP110(C1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C2, MPU110-MP110(C2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C3, MPU110-MP110(C3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C4, MPU110-MP110(C4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C5, MPU110-MP110(C5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C6, MPU110-MP110(C6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C7, MPU110-MP110(C7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C8, MPU110-MP110(C8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-C9, MPU110-MP110(C9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CA, MPU110-MP110(CA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CB, MPU110-MP110(CB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CC, MPU110-MP110(CC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CD, MPU110-MP110(CD)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CE, MPU110-MP110(CE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-CF, MPU110-MP110(CF)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D0, MPU110-MP110(D0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D1, MPU110-MP110(D1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D2, MPU110-MP110(D2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D3, MPU110-MP110(D3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D4, MPU110-MP110(D4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D5, MPU110-MP110(D5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D6, MPU110-MP110(D6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D7, MPU110-MP110(D7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D8, MPU110-MP110(D8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-D9, MPU110-MP110(D9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DA, MPU110-MP110(DA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DB, MPU110-MP110(DB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DC, MPU110-MP110(DC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DD, MPU110-MP110(DD)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DE, MPU110-MP110(DE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-DF, MPU110-MP110(DF)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E0, MPU110-MP110(E0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E1, MPU110-MP110(E1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E2, MPU110-MP110(E2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E3, MPU110-MP110(E3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E4, MPU110-MP110(E4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E5, MPU110-MP110(E5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E6, MPU110-MP110(E6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E7, MPU110-MP110(E7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E8, MPU110-MP110(E8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-E9, MPU110-MP110(E9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-EA, MPU110-MP110(EA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-EB, MPU110-MP110(EB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-EC, MPU110-MP110(EC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-ED, MPU110-MP110(ED)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-EE, MPU110-MP110(EE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-EF, MPU110-MP110(EF)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F0, MPU110-MP110(F0)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F1, MPU110-MP110(F1)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F2, MPU110-MP110(F2)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F3, MPU110-MP110(F3)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F4, MPU110-MP110(F4)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F5, MPU110-MP110(F5)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F6, MPU110-MP110(F6)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F7, MPU110-MP110(F7)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F8, MPU110-MP110(F8)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-F9, MPU110-MP110(F9)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FA, MPU110-MP110(FA)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FB, MPU110-MP110(FB)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FC, MPU110-MP110(FC)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FD, MPU110-MP110(FD)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FE, MPU110-MP110(FE)")
        arraylist_vsp5000_mp.Add("MPU-110.MP110-FF, MPU110-MP110(FF)")
        'mp120
        arraylist_vsp5000_mp.Add("MPU-120.MP120-00, MPU120-MP120(00)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-01, MPU120-MP120(01)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-02, MPU120-MP120(02)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-03, MPU120-MP120(03)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-04, MPU120-MP120(04)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-05, MPU120-MP120(05)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-06, MPU120-MP120(06)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-07, MPU120-MP120(07)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-08, MPU120-MP120(08)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-09, MPU120-MP120(09)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0A, MPU120-MP120(0A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0B, MPU120-MP120(0B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0C, MPU120-MP120(0C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0D, MPU120-MP120(0D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0E, MPU120-MP120(0E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-0F, MPU120-MP120(0F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-10, MPU120-MP120(10)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-11, MPU120-MP120(11)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-12, MPU120-MP120(12)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-13, MPU120-MP120(13)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-14, MPU120-MP120(14)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-15, MPU120-MP120(15)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-16, MPU120-MP120(16)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-17, MPU120-MP120(17)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-18, MPU120-MP120(18)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-19, MPU120-MP120(19)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1A, MPU120-MP120(1A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1B, MPU120-MP120(1B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1C, MPU120-MP120(1C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1D, MPU120-MP120(1D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1E, MPU120-MP120(1E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-1F, MPU120-MP120(1F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-20, MPU120-MP120(20)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-21, MPU120-MP120(21)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-22, MPU120-MP120(22)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-23, MPU120-MP120(23)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-24, MPU120-MP120(24)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-25, MPU120-MP120(25)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-26, MPU120-MP120(26)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-27, MPU120-MP120(27)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-28, MPU120-MP120(28)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-29, MPU120-MP120(29)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2A, MPU120-MP120(2A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2B, MPU120-MP120(2B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2C, MPU120-MP120(2C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2D, MPU120-MP120(2D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2E, MPU120-MP120(2E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-2F, MPU120-MP120(2F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-30, MPU120-MP120(30)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-31, MPU120-MP120(31)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-32, MPU120-MP120(32)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-33, MPU120-MP120(33)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-34, MPU120-MP120(34)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-35, MPU120-MP120(35)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-36, MPU120-MP120(36)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-37, MPU120-MP120(37)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-38, MPU120-MP120(38)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-39, MPU120-MP120(39)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3A, MPU120-MP120(3A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3B, MPU120-MP120(3B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3C, MPU120-MP120(3C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3D, MPU120-MP120(3D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3E, MPU120-MP120(3E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-3F, MPU120-MP120(3F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-40, MPU120-MP120(40)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-41, MPU120-MP120(41)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-42, MPU120-MP120(42)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-43, MPU120-MP120(43)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-44, MPU120-MP120(44)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-45, MPU120-MP120(45)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-46, MPU120-MP120(46)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-47, MPU120-MP120(47)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-48, MPU120-MP120(48)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-49, MPU120-MP120(49)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4A, MPU120-MP120(4A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4B, MPU120-MP120(4B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4C, MPU120-MP120(4C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4D, MPU120-MP120(4D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4E, MPU120-MP120(4E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-4F, MPU120-MP120(4F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-50, MPU120-MP120(50)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-51, MPU120-MP120(51)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-52, MPU120-MP120(52)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-53, MPU120-MP120(53)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-54, MPU120-MP120(54)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-55, MPU120-MP120(55)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-56, MPU120-MP120(56)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-57, MPU120-MP120(57)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-58, MPU120-MP120(58)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-59, MPU120-MP120(59)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5A, MPU120-MP120(5A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5B, MPU120-MP120(5B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5C, MPU120-MP120(5C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5D, MPU120-MP120(5D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5E, MPU120-MP120(5E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-5F, MPU120-MP120(5F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-60, MPU120-MP120(60)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-61, MPU120-MP120(61)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-62, MPU120-MP120(62)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-63, MPU120-MP120(63)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-64, MPU120-MP120(64)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-65, MPU120-MP120(65)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-66, MPU120-MP120(66)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-67, MPU120-MP120(67)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-68, MPU120-MP120(68)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-69, MPU120-MP120(69)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6A, MPU120-MP120(6A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6B, MPU120-MP120(6B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6C, MPU120-MP120(6C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6D, MPU120-MP120(6D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6E, MPU120-MP120(6E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-6F, MPU120-MP120(6F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-70, MPU120-MP120(70)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-71, MPU120-MP120(71)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-72, MPU120-MP120(72)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-73, MPU120-MP120(73)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-74, MPU120-MP120(74)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-75, MPU120-MP120(75)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-76, MPU120-MP120(76)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-77, MPU120-MP120(77)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-78, MPU120-MP120(78)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-79, MPU120-MP120(79)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7A, MPU120-MP120(7A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7B, MPU120-MP120(7B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7C, MPU120-MP120(7C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7D, MPU120-MP120(7D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7E, MPU120-MP120(7E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-7F, MPU120-MP120(7F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-80, MPU120-MP120(80)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-81, MPU120-MP120(81)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-82, MPU120-MP120(82)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-83, MPU120-MP120(83)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-84, MPU120-MP120(84)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-85, MPU120-MP120(85)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-86, MPU120-MP120(86)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-87, MPU120-MP120(87)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-88, MPU120-MP120(88)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-89, MPU120-MP120(89)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8A, MPU120-MP120(8A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8B, MPU120-MP120(8B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8C, MPU120-MP120(8C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8D, MPU120-MP120(8D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8E, MPU120-MP120(8E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-8F, MPU120-MP120(8F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-90, MPU120-MP120(90)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-91, MPU120-MP120(91)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-92, MPU120-MP120(92)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-93, MPU120-MP120(93)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-94, MPU120-MP120(94)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-95, MPU120-MP120(95)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-96, MPU120-MP120(96)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-97, MPU120-MP120(97)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-98, MPU120-MP120(98)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-99, MPU120-MP120(99)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9A, MPU120-MP120(9A)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9B, MPU120-MP120(9B)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9C, MPU120-MP120(9C)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9D, MPU120-MP120(9D)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9E, MPU120-MP120(9E)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-9F, MPU120-MP120(9F)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A0, MPU120-MP120(A0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A1, MPU120-MP120(A1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A2, MPU120-MP120(A2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A3, MPU120-MP120(A3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A4, MPU120-MP120(A4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A5, MPU120-MP120(A5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A6, MPU120-MP120(A6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A7, MPU120-MP120(A7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A8, MPU120-MP120(A8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-A9, MPU120-MP120(A9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AA, MPU120-MP120(AA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AB, MPU120-MP120(AB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AC, MPU120-MP120(AC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AD, MPU120-MP120(AD)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AE, MPU120-MP120(AE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-AF, MPU120-MP120(AF)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B0, MPU120-MP120(B0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B1, MPU120-MP120(B1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B2, MPU120-MP120(B2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B3, MPU120-MP120(B3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B4, MPU120-MP120(B4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B5, MPU120-MP120(B5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B6, MPU120-MP120(B6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B7, MPU120-MP120(B7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B8, MPU120-MP120(B8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-B9, MPU120-MP120(B9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BA, MPU120-MP120(BA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BB, MPU120-MP120(BB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BC, MPU120-MP120(BC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BD, MPU120-MP120(BD)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BE, MPU120-MP120(BE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-BF, MPU120-MP120(BF)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C0, MPU120-MP120(C0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C1, MPU120-MP120(C1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C2, MPU120-MP120(C2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C3, MPU120-MP120(C3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C4, MPU120-MP120(C4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C5, MPU120-MP120(C5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C6, MPU120-MP120(C6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C7, MPU120-MP120(C7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C8, MPU120-MP120(C8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-C9, MPU120-MP120(C9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CA, MPU120-MP120(CA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CB, MPU120-MP120(CB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CC, MPU120-MP120(CC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CD, MPU120-MP120(CD)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CE, MPU120-MP120(CE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-CF, MPU120-MP120(CF)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D0, MPU120-MP120(D0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D1, MPU120-MP120(D1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D2, MPU120-MP120(D2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D3, MPU120-MP120(D3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D4, MPU120-MP120(D4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D5, MPU120-MP120(D5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D6, MPU120-MP120(D6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D7, MPU120-MP120(D7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D8, MPU120-MP120(D8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-D9, MPU120-MP120(D9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DA, MPU120-MP120(DA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DB, MPU120-MP120(DB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DC, MPU120-MP120(DC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DD, MPU120-MP120(DD)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DE, MPU120-MP120(DE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-DF, MPU120-MP120(DF)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E0, MPU120-MP120(E0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E1, MPU120-MP120(E1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E2, MPU120-MP120(E2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E3, MPU120-MP120(E3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E4, MPU120-MP120(E4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E5, MPU120-MP120(E5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E6, MPU120-MP120(E6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E7, MPU120-MP120(E7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E8, MPU120-MP120(E8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-E9, MPU120-MP120(E9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-EA, MPU120-MP120(EA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-EB, MPU120-MP120(EB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-EC, MPU120-MP120(EC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-ED, MPU120-MP120(ED)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-EE, MPU120-MP120(EE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-EF, MPU120-MP120(EF)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F0, MPU120-MP120(F0)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F1, MPU120-MP120(F1)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F2, MPU120-MP120(F2)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F3, MPU120-MP120(F3)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F4, MPU120-MP120(F4)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F5, MPU120-MP120(F5)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F6, MPU120-MP120(F6)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F7, MPU120-MP120(F7)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F8, MPU120-MP120(F8)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-F9, MPU120-MP120(F9)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FA, MPU120-MP120(FA)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FB, MPU120-MP120(FB)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FC, MPU120-MP120(FC)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FD, MPU120-MP120(FD)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FE, MPU120-MP120(FE)")
        arraylist_vsp5000_mp.Add("MPU-120.MP120-FF, MPU120-MP120(FF)")
        'mp210
        arraylist_vsp5000_mp.Add("MPU-210.MP210-00, MPU210-MP210(00)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-01, MPU210-MP210(01)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-02, MPU210-MP210(02)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-03, MPU210-MP210(03)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-04, MPU210-MP210(04)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-05, MPU210-MP210(05)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-06, MPU210-MP210(06)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-07, MPU210-MP210(07)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-08, MPU210-MP210(08)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-09, MPU210-MP210(09)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0A, MPU210-MP210(0A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0B, MPU210-MP210(0B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0C, MPU210-MP210(0C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0D, MPU210-MP210(0D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0E, MPU210-MP210(0E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-0F, MPU210-MP210(0F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-10, MPU210-MP210(10)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-11, MPU210-MP210(11)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-12, MPU210-MP210(12)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-13, MPU210-MP210(13)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-14, MPU210-MP210(14)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-15, MPU210-MP210(15)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-16, MPU210-MP210(16)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-17, MPU210-MP210(17)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-18, MPU210-MP210(18)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-19, MPU210-MP210(19)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1A, MPU210-MP210(1A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1B, MPU210-MP210(1B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1C, MPU210-MP210(1C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1D, MPU210-MP210(1D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1E, MPU210-MP210(1E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-1F, MPU210-MP210(1F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-20, MPU210-MP210(20)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-21, MPU210-MP210(21)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-22, MPU210-MP210(22)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-23, MPU210-MP210(23)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-24, MPU210-MP210(24)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-25, MPU210-MP210(25)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-26, MPU210-MP210(26)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-27, MPU210-MP210(27)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-28, MPU210-MP210(28)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-29, MPU210-MP210(29)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2A, MPU210-MP210(2A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2B, MPU210-MP210(2B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2C, MPU210-MP210(2C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2D, MPU210-MP210(2D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2E, MPU210-MP210(2E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-2F, MPU210-MP210(2F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-30, MPU210-MP210(30)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-31, MPU210-MP210(31)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-32, MPU210-MP210(32)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-33, MPU210-MP210(33)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-34, MPU210-MP210(34)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-35, MPU210-MP210(35)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-36, MPU210-MP210(36)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-37, MPU210-MP210(37)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-38, MPU210-MP210(38)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-39, MPU210-MP210(39)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3A, MPU210-MP210(3A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3B, MPU210-MP210(3B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3C, MPU210-MP210(3C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3D, MPU210-MP210(3D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3E, MPU210-MP210(3E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-3F, MPU210-MP210(3F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-40, MPU210-MP210(40)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-41, MPU210-MP210(41)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-42, MPU210-MP210(42)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-43, MPU210-MP210(43)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-44, MPU210-MP210(44)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-45, MPU210-MP210(45)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-46, MPU210-MP210(46)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-47, MPU210-MP210(47)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-48, MPU210-MP210(48)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-49, MPU210-MP210(49)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4A, MPU210-MP210(4A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4B, MPU210-MP210(4B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4C, MPU210-MP210(4C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4D, MPU210-MP210(4D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4E, MPU210-MP210(4E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-4F, MPU210-MP210(4F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-50, MPU210-MP210(50)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-51, MPU210-MP210(51)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-52, MPU210-MP210(52)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-53, MPU210-MP210(53)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-54, MPU210-MP210(54)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-55, MPU210-MP210(55)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-56, MPU210-MP210(56)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-57, MPU210-MP210(57)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-58, MPU210-MP210(58)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-59, MPU210-MP210(59)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5A, MPU210-MP210(5A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5B, MPU210-MP210(5B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5C, MPU210-MP210(5C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5D, MPU210-MP210(5D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5E, MPU210-MP210(5E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-5F, MPU210-MP210(5F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-60, MPU210-MP210(60)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-61, MPU210-MP210(61)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-62, MPU210-MP210(62)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-63, MPU210-MP210(63)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-64, MPU210-MP210(64)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-65, MPU210-MP210(65)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-66, MPU210-MP210(66)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-67, MPU210-MP210(67)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-68, MPU210-MP210(68)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-69, MPU210-MP210(69)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6A, MPU210-MP210(6A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6B, MPU210-MP210(6B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6C, MPU210-MP210(6C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6D, MPU210-MP210(6D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6E, MPU210-MP210(6E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-6F, MPU210-MP210(6F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-70, MPU210-MP210(70)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-71, MPU210-MP210(71)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-72, MPU210-MP210(72)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-73, MPU210-MP210(73)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-74, MPU210-MP210(74)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-75, MPU210-MP210(75)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-76, MPU210-MP210(76)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-77, MPU210-MP210(77)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-78, MPU210-MP210(78)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-79, MPU210-MP210(79)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7A, MPU210-MP210(7A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7B, MPU210-MP210(7B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7C, MPU210-MP210(7C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7D, MPU210-MP210(7D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7E, MPU210-MP210(7E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-7F, MPU210-MP210(7F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-80, MPU210-MP210(80)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-81, MPU210-MP210(81)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-82, MPU210-MP210(82)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-83, MPU210-MP210(83)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-84, MPU210-MP210(84)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-85, MPU210-MP210(85)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-86, MPU210-MP210(86)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-87, MPU210-MP210(87)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-88, MPU210-MP210(88)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-89, MPU210-MP210(89)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8A, MPU210-MP210(8A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8B, MPU210-MP210(8B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8C, MPU210-MP210(8C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8D, MPU210-MP210(8D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8E, MPU210-MP210(8E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-8F, MPU210-MP210(8F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-90, MPU210-MP210(90)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-91, MPU210-MP210(91)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-92, MPU210-MP210(92)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-93, MPU210-MP210(93)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-94, MPU210-MP210(94)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-95, MPU210-MP210(95)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-96, MPU210-MP210(96)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-97, MPU210-MP210(97)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-98, MPU210-MP210(98)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-99, MPU210-MP210(99)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9A, MPU210-MP210(9A)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9B, MPU210-MP210(9B)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9C, MPU210-MP210(9C)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9D, MPU210-MP210(9D)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9E, MPU210-MP210(9E)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-9F, MPU210-MP210(9F)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A0, MPU210-MP210(A0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A1, MPU210-MP210(A1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A2, MPU210-MP210(A2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A3, MPU210-MP210(A3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A4, MPU210-MP210(A4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A5, MPU210-MP210(A5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A6, MPU210-MP210(A6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A7, MPU210-MP210(A7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A8, MPU210-MP210(A8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-A9, MPU210-MP210(A9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AA, MPU210-MP210(AA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AB, MPU210-MP210(AB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AC, MPU210-MP210(AC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AD, MPU210-MP210(AD)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AE, MPU210-MP210(AE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-AF, MPU210-MP210(AF)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B0, MPU210-MP210(B0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B1, MPU210-MP210(B1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B2, MPU210-MP210(B2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B3, MPU210-MP210(B3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B4, MPU210-MP210(B4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B5, MPU210-MP210(B5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B6, MPU210-MP210(B6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B7, MPU210-MP210(B7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B8, MPU210-MP210(B8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-B9, MPU210-MP210(B9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BA, MPU210-MP210(BA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BB, MPU210-MP210(BB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BC, MPU210-MP210(BC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BD, MPU210-MP210(BD)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BE, MPU210-MP210(BE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-BF, MPU210-MP210(BF)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C0, MPU210-MP210(C0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C1, MPU210-MP210(C1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C2, MPU210-MP210(C2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C3, MPU210-MP210(C3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C4, MPU210-MP210(C4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C5, MPU210-MP210(C5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C6, MPU210-MP210(C6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C7, MPU210-MP210(C7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C8, MPU210-MP210(C8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-C9, MPU210-MP210(C9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CA, MPU210-MP210(CA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CB, MPU210-MP210(CB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CC, MPU210-MP210(CC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CD, MPU210-MP210(CD)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CE, MPU210-MP210(CE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-CF, MPU210-MP210(CF)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D0, MPU210-MP210(D0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D1, MPU210-MP210(D1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D2, MPU210-MP210(D2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D3, MPU210-MP210(D3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D4, MPU210-MP210(D4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D5, MPU210-MP210(D5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D6, MPU210-MP210(D6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D7, MPU210-MP210(D7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D8, MPU210-MP210(D8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-D9, MPU210-MP210(D9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DA, MPU210-MP210(DA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DB, MPU210-MP210(DB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DC, MPU210-MP210(DC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DD, MPU210-MP210(DD)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DE, MPU210-MP210(DE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-DF, MPU210-MP210(DF)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E0, MPU210-MP210(E0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E1, MPU210-MP210(E1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E2, MPU210-MP210(E2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E3, MPU210-MP210(E3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E4, MPU210-MP210(E4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E5, MPU210-MP210(E5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E6, MPU210-MP210(E6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E7, MPU210-MP210(E7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E8, MPU210-MP210(E8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-E9, MPU210-MP210(E9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-EA, MPU210-MP210(EA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-EB, MPU210-MP210(EB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-EC, MPU210-MP210(EC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-ED, MPU210-MP210(ED)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-EE, MPU210-MP210(EE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-EF, MPU210-MP210(EF)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F0, MPU210-MP210(F0)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F1, MPU210-MP210(F1)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F2, MPU210-MP210(F2)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F3, MPU210-MP210(F3)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F4, MPU210-MP210(F4)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F5, MPU210-MP210(F5)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F6, MPU210-MP210(F6)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F7, MPU210-MP210(F7)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F8, MPU210-MP210(F8)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-F9, MPU210-MP210(F9)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FA, MPU210-MP210(FA)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FB, MPU210-MP210(FB)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FC, MPU210-MP210(FC)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FD, MPU210-MP210(FD)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FE, MPU210-MP210(FE)")
        arraylist_vsp5000_mp.Add("MPU-210.MP210-FF, MPU210-MP210(FF)")
        'mp220
        arraylist_vsp5000_mp.Add("MPU-220.MP220-00, MPU220-MP220(00)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-01, MPU220-MP220(01)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-02, MPU220-MP220(02)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-03, MPU220-MP220(03)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-04, MPU220-MP220(04)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-05, MPU220-MP220(05)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-06, MPU220-MP220(06)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-07, MPU220-MP220(07)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-08, MPU220-MP220(08)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-09, MPU220-MP220(09)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0A, MPU220-MP220(0A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0B, MPU220-MP220(0B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0C, MPU220-MP220(0C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0D, MPU220-MP220(0D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0E, MPU220-MP220(0E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-0F, MPU220-MP220(0F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-10, MPU220-MP220(10)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-11, MPU220-MP220(11)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-12, MPU220-MP220(12)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-13, MPU220-MP220(13)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-14, MPU220-MP220(14)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-15, MPU220-MP220(15)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-16, MPU220-MP220(16)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-17, MPU220-MP220(17)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-18, MPU220-MP220(18)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-19, MPU220-MP220(19)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1A, MPU220-MP220(1A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1B, MPU220-MP220(1B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1C, MPU220-MP220(1C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1D, MPU220-MP220(1D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1E, MPU220-MP220(1E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-1F, MPU220-MP220(1F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-20, MPU220-MP220(20)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-21, MPU220-MP220(21)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-22, MPU220-MP220(22)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-23, MPU220-MP220(23)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-24, MPU220-MP220(24)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-25, MPU220-MP220(25)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-26, MPU220-MP220(26)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-27, MPU220-MP220(27)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-28, MPU220-MP220(28)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-29, MPU220-MP220(29)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2A, MPU220-MP220(2A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2B, MPU220-MP220(2B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2C, MPU220-MP220(2C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2D, MPU220-MP220(2D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2E, MPU220-MP220(2E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-2F, MPU220-MP220(2F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-30, MPU220-MP220(30)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-31, MPU220-MP220(31)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-32, MPU220-MP220(32)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-33, MPU220-MP220(33)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-34, MPU220-MP220(34)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-35, MPU220-MP220(35)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-36, MPU220-MP220(36)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-37, MPU220-MP220(37)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-38, MPU220-MP220(38)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-39, MPU220-MP220(39)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3A, MPU220-MP220(3A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3B, MPU220-MP220(3B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3C, MPU220-MP220(3C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3D, MPU220-MP220(3D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3E, MPU220-MP220(3E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-3F, MPU220-MP220(3F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-40, MPU220-MP220(40)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-41, MPU220-MP220(41)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-42, MPU220-MP220(42)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-43, MPU220-MP220(43)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-44, MPU220-MP220(44)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-45, MPU220-MP220(45)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-46, MPU220-MP220(46)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-47, MPU220-MP220(47)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-48, MPU220-MP220(48)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-49, MPU220-MP220(49)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4A, MPU220-MP220(4A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4B, MPU220-MP220(4B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4C, MPU220-MP220(4C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4D, MPU220-MP220(4D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4E, MPU220-MP220(4E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-4F, MPU220-MP220(4F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-50, MPU220-MP220(50)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-51, MPU220-MP220(51)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-52, MPU220-MP220(52)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-53, MPU220-MP220(53)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-54, MPU220-MP220(54)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-55, MPU220-MP220(55)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-56, MPU220-MP220(56)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-57, MPU220-MP220(57)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-58, MPU220-MP220(58)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-59, MPU220-MP220(59)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5A, MPU220-MP220(5A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5B, MPU220-MP220(5B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5C, MPU220-MP220(5C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5D, MPU220-MP220(5D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5E, MPU220-MP220(5E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-5F, MPU220-MP220(5F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-60, MPU220-MP220(60)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-61, MPU220-MP220(61)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-62, MPU220-MP220(62)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-63, MPU220-MP220(63)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-64, MPU220-MP220(64)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-65, MPU220-MP220(65)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-66, MPU220-MP220(66)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-67, MPU220-MP220(67)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-68, MPU220-MP220(68)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-69, MPU220-MP220(69)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6A, MPU220-MP220(6A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6B, MPU220-MP220(6B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6C, MPU220-MP220(6C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6D, MPU220-MP220(6D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6E, MPU220-MP220(6E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-6F, MPU220-MP220(6F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-70, MPU220-MP220(70)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-71, MPU220-MP220(71)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-72, MPU220-MP220(72)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-73, MPU220-MP220(73)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-74, MPU220-MP220(74)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-75, MPU220-MP220(75)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-76, MPU220-MP220(76)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-77, MPU220-MP220(77)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-78, MPU220-MP220(78)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-79, MPU220-MP220(79)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7A, MPU220-MP220(7A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7B, MPU220-MP220(7B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7C, MPU220-MP220(7C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7D, MPU220-MP220(7D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7E, MPU220-MP220(7E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-7F, MPU220-MP220(7F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-80, MPU220-MP220(80)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-81, MPU220-MP220(81)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-82, MPU220-MP220(82)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-83, MPU220-MP220(83)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-84, MPU220-MP220(84)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-85, MPU220-MP220(85)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-86, MPU220-MP220(86)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-87, MPU220-MP220(87)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-88, MPU220-MP220(88)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-89, MPU220-MP220(89)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8A, MPU220-MP220(8A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8B, MPU220-MP220(8B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8C, MPU220-MP220(8C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8D, MPU220-MP220(8D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8E, MPU220-MP220(8E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-8F, MPU220-MP220(8F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-90, MPU220-MP220(90)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-91, MPU220-MP220(91)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-92, MPU220-MP220(92)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-93, MPU220-MP220(93)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-94, MPU220-MP220(94)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-95, MPU220-MP220(95)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-96, MPU220-MP220(96)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-97, MPU220-MP220(97)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-98, MPU220-MP220(98)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-99, MPU220-MP220(99)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9A, MPU220-MP220(9A)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9B, MPU220-MP220(9B)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9C, MPU220-MP220(9C)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9D, MPU220-MP220(9D)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9E, MPU220-MP220(9E)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-9F, MPU220-MP220(9F)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A0, MPU220-MP220(A0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A1, MPU220-MP220(A1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A2, MPU220-MP220(A2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A3, MPU220-MP220(A3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A4, MPU220-MP220(A4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A5, MPU220-MP220(A5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A6, MPU220-MP220(A6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A7, MPU220-MP220(A7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A8, MPU220-MP220(A8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-A9, MPU220-MP220(A9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AA, MPU220-MP220(AA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AB, MPU220-MP220(AB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AC, MPU220-MP220(AC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AD, MPU220-MP220(AD)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AE, MPU220-MP220(AE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-AF, MPU220-MP220(AF)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B0, MPU220-MP220(B0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B1, MPU220-MP220(B1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B2, MPU220-MP220(B2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B3, MPU220-MP220(B3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B4, MPU220-MP220(B4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B5, MPU220-MP220(B5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B6, MPU220-MP220(B6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B7, MPU220-MP220(B7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B8, MPU220-MP220(B8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-B9, MPU220-MP220(B9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BA, MPU220-MP220(BA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BB, MPU220-MP220(BB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BC, MPU220-MP220(BC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BD, MPU220-MP220(BD)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BE, MPU220-MP220(BE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-BF, MPU220-MP220(BF)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C0, MPU220-MP220(C0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C1, MPU220-MP220(C1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C2, MPU220-MP220(C2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C3, MPU220-MP220(C3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C4, MPU220-MP220(C4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C5, MPU220-MP220(C5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C6, MPU220-MP220(C6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C7, MPU220-MP220(C7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C8, MPU220-MP220(C8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-C9, MPU220-MP220(C9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CA, MPU220-MP220(CA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CB, MPU220-MP220(CB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CC, MPU220-MP220(CC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CD, MPU220-MP220(CD)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CE, MPU220-MP220(CE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-CF, MPU220-MP220(CF)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D0, MPU220-MP220(D0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D1, MPU220-MP220(D1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D2, MPU220-MP220(D2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D3, MPU220-MP220(D3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D4, MPU220-MP220(D4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D5, MPU220-MP220(D5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D6, MPU220-MP220(D6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D7, MPU220-MP220(D7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D8, MPU220-MP220(D8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-D9, MPU220-MP220(D9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DA, MPU220-MP220(DA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DB, MPU220-MP220(DB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DC, MPU220-MP220(DC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DD, MPU220-MP220(DD)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DE, MPU220-MP220(DE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-DF, MPU220-MP220(DF)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E0, MPU220-MP220(E0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E1, MPU220-MP220(E1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E2, MPU220-MP220(E2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E3, MPU220-MP220(E3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E4, MPU220-MP220(E4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E5, MPU220-MP220(E5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E6, MPU220-MP220(E6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E7, MPU220-MP220(E7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E8, MPU220-MP220(E8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-E9, MPU220-MP220(E9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-EA, MPU220-MP220(EA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-EB, MPU220-MP220(EB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-EC, MPU220-MP220(EC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-ED, MPU220-MP220(ED)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-EE, MPU220-MP220(EE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-EF, MPU220-MP220(EF)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F0, MPU220-MP220(F0)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F1, MPU220-MP220(F1)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F2, MPU220-MP220(F2)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F3, MPU220-MP220(F3)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F4, MPU220-MP220(F4)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F5, MPU220-MP220(F5)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F6, MPU220-MP220(F6)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F7, MPU220-MP220(F7)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F8, MPU220-MP220(F8)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-F9, MPU220-MP220(F9)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FA, MPU220-MP220(FA)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FB, MPU220-MP220(FB)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FC, MPU220-MP220(FC)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FD, MPU220-MP220(FD)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FE, MPU220-MP220(FE)")
        arraylist_vsp5000_mp.Add("MPU-220.MP220-FF, MPU220-MP220(FF)")
        'mp310
        arraylist_vsp5000_mp.Add("MPU-310.MP310-00, MPU310-MP310(00)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-01, MPU310-MP310(01)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-02, MPU310-MP310(02)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-03, MPU310-MP310(03)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-04, MPU310-MP310(04)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-05, MPU310-MP310(05)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-06, MPU310-MP310(06)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-07, MPU310-MP310(07)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-08, MPU310-MP310(08)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-09, MPU310-MP310(09)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0A, MPU310-MP310(0A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0B, MPU310-MP310(0B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0C, MPU310-MP310(0C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0D, MPU310-MP310(0D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0E, MPU310-MP310(0E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-0F, MPU310-MP310(0F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-10, MPU310-MP310(10)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-11, MPU310-MP310(11)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-12, MPU310-MP310(12)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-13, MPU310-MP310(13)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-14, MPU310-MP310(14)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-15, MPU310-MP310(15)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-16, MPU310-MP310(16)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-17, MPU310-MP310(17)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-18, MPU310-MP310(18)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-19, MPU310-MP310(19)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1A, MPU310-MP310(1A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1B, MPU310-MP310(1B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1C, MPU310-MP310(1C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1D, MPU310-MP310(1D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1E, MPU310-MP310(1E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-1F, MPU310-MP310(1F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-20, MPU310-MP310(20)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-21, MPU310-MP310(21)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-22, MPU310-MP310(22)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-23, MPU310-MP310(23)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-24, MPU310-MP310(24)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-25, MPU310-MP310(25)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-26, MPU310-MP310(26)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-27, MPU310-MP310(27)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-28, MPU310-MP310(28)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-29, MPU310-MP310(29)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2A, MPU310-MP310(2A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2B, MPU310-MP310(2B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2C, MPU310-MP310(2C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2D, MPU310-MP310(2D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2E, MPU310-MP310(2E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-2F, MPU310-MP310(2F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-30, MPU310-MP310(30)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-31, MPU310-MP310(31)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-32, MPU310-MP310(32)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-33, MPU310-MP310(33)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-34, MPU310-MP310(34)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-35, MPU310-MP310(35)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-36, MPU310-MP310(36)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-37, MPU310-MP310(37)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-38, MPU310-MP310(38)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-39, MPU310-MP310(39)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3A, MPU310-MP310(3A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3B, MPU310-MP310(3B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3C, MPU310-MP310(3C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3D, MPU310-MP310(3D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3E, MPU310-MP310(3E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-3F, MPU310-MP310(3F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-40, MPU310-MP310(40)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-41, MPU310-MP310(41)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-42, MPU310-MP310(42)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-43, MPU310-MP310(43)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-44, MPU310-MP310(44)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-45, MPU310-MP310(45)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-46, MPU310-MP310(46)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-47, MPU310-MP310(47)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-48, MPU310-MP310(48)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-49, MPU310-MP310(49)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4A, MPU310-MP310(4A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4B, MPU310-MP310(4B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4C, MPU310-MP310(4C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4D, MPU310-MP310(4D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4E, MPU310-MP310(4E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-4F, MPU310-MP310(4F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-50, MPU310-MP310(50)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-51, MPU310-MP310(51)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-52, MPU310-MP310(52)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-53, MPU310-MP310(53)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-54, MPU310-MP310(54)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-55, MPU310-MP310(55)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-56, MPU310-MP310(56)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-57, MPU310-MP310(57)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-58, MPU310-MP310(58)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-59, MPU310-MP310(59)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5A, MPU310-MP310(5A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5B, MPU310-MP310(5B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5C, MPU310-MP310(5C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5D, MPU310-MP310(5D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5E, MPU310-MP310(5E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-5F, MPU310-MP310(5F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-60, MPU310-MP310(60)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-61, MPU310-MP310(61)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-62, MPU310-MP310(62)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-63, MPU310-MP310(63)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-64, MPU310-MP310(64)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-65, MPU310-MP310(65)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-66, MPU310-MP310(66)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-67, MPU310-MP310(67)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-68, MPU310-MP310(68)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-69, MPU310-MP310(69)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6A, MPU310-MP310(6A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6B, MPU310-MP310(6B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6C, MPU310-MP310(6C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6D, MPU310-MP310(6D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6E, MPU310-MP310(6E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-6F, MPU310-MP310(6F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-70, MPU310-MP310(70)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-71, MPU310-MP310(71)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-72, MPU310-MP310(72)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-73, MPU310-MP310(73)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-74, MPU310-MP310(74)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-75, MPU310-MP310(75)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-76, MPU310-MP310(76)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-77, MPU310-MP310(77)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-78, MPU310-MP310(78)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-79, MPU310-MP310(79)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7A, MPU310-MP310(7A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7B, MPU310-MP310(7B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7C, MPU310-MP310(7C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7D, MPU310-MP310(7D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7E, MPU310-MP310(7E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-7F, MPU310-MP310(7F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-80, MPU310-MP310(80)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-81, MPU310-MP310(81)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-82, MPU310-MP310(82)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-83, MPU310-MP310(83)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-84, MPU310-MP310(84)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-85, MPU310-MP310(85)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-86, MPU310-MP310(86)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-87, MPU310-MP310(87)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-88, MPU310-MP310(88)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-89, MPU310-MP310(89)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8A, MPU310-MP310(8A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8B, MPU310-MP310(8B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8C, MPU310-MP310(8C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8D, MPU310-MP310(8D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8E, MPU310-MP310(8E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-8F, MPU310-MP310(8F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-90, MPU310-MP310(90)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-91, MPU310-MP310(91)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-92, MPU310-MP310(92)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-93, MPU310-MP310(93)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-94, MPU310-MP310(94)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-95, MPU310-MP310(95)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-96, MPU310-MP310(96)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-97, MPU310-MP310(97)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-98, MPU310-MP310(98)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-99, MPU310-MP310(99)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9A, MPU310-MP310(9A)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9B, MPU310-MP310(9B)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9C, MPU310-MP310(9C)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9D, MPU310-MP310(9D)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9E, MPU310-MP310(9E)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-9F, MPU310-MP310(9F)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A0, MPU310-MP310(A0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A1, MPU310-MP310(A1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A2, MPU310-MP310(A2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A3, MPU310-MP310(A3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A4, MPU310-MP310(A4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A5, MPU310-MP310(A5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A6, MPU310-MP310(A6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A7, MPU310-MP310(A7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A8, MPU310-MP310(A8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-A9, MPU310-MP310(A9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AA, MPU310-MP310(AA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AB, MPU310-MP310(AB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AC, MPU310-MP310(AC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AD, MPU310-MP310(AD)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AE, MPU310-MP310(AE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-AF, MPU310-MP310(AF)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B0, MPU310-MP310(B0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B1, MPU310-MP310(B1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B2, MPU310-MP310(B2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B3, MPU310-MP310(B3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B4, MPU310-MP310(B4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B5, MPU310-MP310(B5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B6, MPU310-MP310(B6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B7, MPU310-MP310(B7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B8, MPU310-MP310(B8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-B9, MPU310-MP310(B9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BA, MPU310-MP310(BA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BB, MPU310-MP310(BB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BC, MPU310-MP310(BC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BD, MPU310-MP310(BD)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BE, MPU310-MP310(BE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-BF, MPU310-MP310(BF)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C0, MPU310-MP310(C0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C1, MPU310-MP310(C1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C2, MPU310-MP310(C2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C3, MPU310-MP310(C3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C4, MPU310-MP310(C4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C5, MPU310-MP310(C5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C6, MPU310-MP310(C6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C7, MPU310-MP310(C7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C8, MPU310-MP310(C8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-C9, MPU310-MP310(C9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CA, MPU310-MP310(CA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CB, MPU310-MP310(CB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CC, MPU310-MP310(CC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CD, MPU310-MP310(CD)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CE, MPU310-MP310(CE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-CF, MPU310-MP310(CF)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D0, MPU310-MP310(D0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D1, MPU310-MP310(D1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D2, MPU310-MP310(D2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D3, MPU310-MP310(D3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D4, MPU310-MP310(D4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D5, MPU310-MP310(D5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D6, MPU310-MP310(D6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D7, MPU310-MP310(D7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D8, MPU310-MP310(D8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-D9, MPU310-MP310(D9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DA, MPU310-MP310(DA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DB, MPU310-MP310(DB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DC, MPU310-MP310(DC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DD, MPU310-MP310(DD)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DE, MPU310-MP310(DE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-DF, MPU310-MP310(DF)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E0, MPU310-MP310(E0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E1, MPU310-MP310(E1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E2, MPU310-MP310(E2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E3, MPU310-MP310(E3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E4, MPU310-MP310(E4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E5, MPU310-MP310(E5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E6, MPU310-MP310(E6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E7, MPU310-MP310(E7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E8, MPU310-MP310(E8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-E9, MPU310-MP310(E9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-EA, MPU310-MP310(EA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-EB, MPU310-MP310(EB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-EC, MPU310-MP310(EC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-ED, MPU310-MP310(ED)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-EE, MPU310-MP310(EE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-EF, MPU310-MP310(EF)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F0, MPU310-MP310(F0)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F1, MPU310-MP310(F1)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F2, MPU310-MP310(F2)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F3, MPU310-MP310(F3)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F4, MPU310-MP310(F4)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F5, MPU310-MP310(F5)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F6, MPU310-MP310(F6)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F7, MPU310-MP310(F7)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F8, MPU310-MP310(F8)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-F9, MPU310-MP310(F9)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FA, MPU310-MP310(FA)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FB, MPU310-MP310(FB)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FC, MPU310-MP310(FC)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FD, MPU310-MP310(FD)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FE, MPU310-MP310(FE)")
        arraylist_vsp5000_mp.Add("MPU-310.MP310-FF, MPU310-MP310(FF)")
        'mp320
        arraylist_vsp5000_mp.Add("MPU-320.MP320-00, MPU320-MP320(00)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-01, MPU320-MP320(01)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-02, MPU320-MP320(02)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-03, MPU320-MP320(03)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-04, MPU320-MP320(04)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-05, MPU320-MP320(05)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-06, MPU320-MP320(06)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-07, MPU320-MP320(07)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-08, MPU320-MP320(08)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-09, MPU320-MP320(09)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0A, MPU320-MP320(0A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0B, MPU320-MP320(0B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0C, MPU320-MP320(0C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0D, MPU320-MP320(0D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0E, MPU320-MP320(0E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-0F, MPU320-MP320(0F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-10, MPU320-MP320(10)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-11, MPU320-MP320(11)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-12, MPU320-MP320(12)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-13, MPU320-MP320(13)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-14, MPU320-MP320(14)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-15, MPU320-MP320(15)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-16, MPU320-MP320(16)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-17, MPU320-MP320(17)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-18, MPU320-MP320(18)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-19, MPU320-MP320(19)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1A, MPU320-MP320(1A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1B, MPU320-MP320(1B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1C, MPU320-MP320(1C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1D, MPU320-MP320(1D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1E, MPU320-MP320(1E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-1F, MPU320-MP320(1F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-20, MPU320-MP320(20)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-21, MPU320-MP320(21)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-22, MPU320-MP320(22)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-23, MPU320-MP320(23)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-24, MPU320-MP320(24)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-25, MPU320-MP320(25)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-26, MPU320-MP320(26)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-27, MPU320-MP320(27)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-28, MPU320-MP320(28)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-29, MPU320-MP320(29)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2A, MPU320-MP320(2A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2B, MPU320-MP320(2B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2C, MPU320-MP320(2C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2D, MPU320-MP320(2D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2E, MPU320-MP320(2E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-2F, MPU320-MP320(2F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-30, MPU320-MP320(30)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-31, MPU320-MP320(31)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-32, MPU320-MP320(32)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-33, MPU320-MP320(33)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-34, MPU320-MP320(34)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-35, MPU320-MP320(35)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-36, MPU320-MP320(36)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-37, MPU320-MP320(37)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-38, MPU320-MP320(38)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-39, MPU320-MP320(39)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3A, MPU320-MP320(3A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3B, MPU320-MP320(3B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3C, MPU320-MP320(3C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3D, MPU320-MP320(3D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3E, MPU320-MP320(3E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-3F, MPU320-MP320(3F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-40, MPU320-MP320(40)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-41, MPU320-MP320(41)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-42, MPU320-MP320(42)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-43, MPU320-MP320(43)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-44, MPU320-MP320(44)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-45, MPU320-MP320(45)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-46, MPU320-MP320(46)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-47, MPU320-MP320(47)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-48, MPU320-MP320(48)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-49, MPU320-MP320(49)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4A, MPU320-MP320(4A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4B, MPU320-MP320(4B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4C, MPU320-MP320(4C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4D, MPU320-MP320(4D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4E, MPU320-MP320(4E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-4F, MPU320-MP320(4F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-50, MPU320-MP320(50)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-51, MPU320-MP320(51)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-52, MPU320-MP320(52)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-53, MPU320-MP320(53)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-54, MPU320-MP320(54)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-55, MPU320-MP320(55)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-56, MPU320-MP320(56)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-57, MPU320-MP320(57)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-58, MPU320-MP320(58)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-59, MPU320-MP320(59)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5A, MPU320-MP320(5A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5B, MPU320-MP320(5B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5C, MPU320-MP320(5C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5D, MPU320-MP320(5D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5E, MPU320-MP320(5E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-5F, MPU320-MP320(5F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-60, MPU320-MP320(60)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-61, MPU320-MP320(61)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-62, MPU320-MP320(62)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-63, MPU320-MP320(63)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-64, MPU320-MP320(64)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-65, MPU320-MP320(65)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-66, MPU320-MP320(66)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-67, MPU320-MP320(67)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-68, MPU320-MP320(68)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-69, MPU320-MP320(69)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6A, MPU320-MP320(6A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6B, MPU320-MP320(6B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6C, MPU320-MP320(6C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6D, MPU320-MP320(6D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6E, MPU320-MP320(6E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-6F, MPU320-MP320(6F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-70, MPU320-MP320(70)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-71, MPU320-MP320(71)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-72, MPU320-MP320(72)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-73, MPU320-MP320(73)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-74, MPU320-MP320(74)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-75, MPU320-MP320(75)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-76, MPU320-MP320(76)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-77, MPU320-MP320(77)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-78, MPU320-MP320(78)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-79, MPU320-MP320(79)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7A, MPU320-MP320(7A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7B, MPU320-MP320(7B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7C, MPU320-MP320(7C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7D, MPU320-MP320(7D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7E, MPU320-MP320(7E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-7F, MPU320-MP320(7F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-80, MPU320-MP320(80)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-81, MPU320-MP320(81)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-82, MPU320-MP320(82)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-83, MPU320-MP320(83)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-84, MPU320-MP320(84)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-85, MPU320-MP320(85)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-86, MPU320-MP320(86)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-87, MPU320-MP320(87)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-88, MPU320-MP320(88)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-89, MPU320-MP320(89)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8A, MPU320-MP320(8A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8B, MPU320-MP320(8B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8C, MPU320-MP320(8C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8D, MPU320-MP320(8D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8E, MPU320-MP320(8E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-8F, MPU320-MP320(8F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-90, MPU320-MP320(90)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-91, MPU320-MP320(91)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-92, MPU320-MP320(92)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-93, MPU320-MP320(93)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-94, MPU320-MP320(94)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-95, MPU320-MP320(95)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-96, MPU320-MP320(96)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-97, MPU320-MP320(97)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-98, MPU320-MP320(98)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-99, MPU320-MP320(99)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9A, MPU320-MP320(9A)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9B, MPU320-MP320(9B)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9C, MPU320-MP320(9C)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9D, MPU320-MP320(9D)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9E, MPU320-MP320(9E)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-9F, MPU320-MP320(9F)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A0, MPU320-MP320(A0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A1, MPU320-MP320(A1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A2, MPU320-MP320(A2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A3, MPU320-MP320(A3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A4, MPU320-MP320(A4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A5, MPU320-MP320(A5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A6, MPU320-MP320(A6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A7, MPU320-MP320(A7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A8, MPU320-MP320(A8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-A9, MPU320-MP320(A9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AA, MPU320-MP320(AA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AB, MPU320-MP320(AB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AC, MPU320-MP320(AC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AD, MPU320-MP320(AD)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AE, MPU320-MP320(AE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-AF, MPU320-MP320(AF)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B0, MPU320-MP320(B0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B1, MPU320-MP320(B1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B2, MPU320-MP320(B2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B3, MPU320-MP320(B3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B4, MPU320-MP320(B4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B5, MPU320-MP320(B5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B6, MPU320-MP320(B6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B7, MPU320-MP320(B7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B8, MPU320-MP320(B8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-B9, MPU320-MP320(B9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BA, MPU320-MP320(BA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BB, MPU320-MP320(BB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BC, MPU320-MP320(BC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BD, MPU320-MP320(BD)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BE, MPU320-MP320(BE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-BF, MPU320-MP320(BF)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C0, MPU320-MP320(C0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C1, MPU320-MP320(C1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C2, MPU320-MP320(C2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C3, MPU320-MP320(C3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C4, MPU320-MP320(C4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C5, MPU320-MP320(C5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C6, MPU320-MP320(C6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C7, MPU320-MP320(C7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C8, MPU320-MP320(C8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-C9, MPU320-MP320(C9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CA, MPU320-MP320(CA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CB, MPU320-MP320(CB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CC, MPU320-MP320(CC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CD, MPU320-MP320(CD)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CE, MPU320-MP320(CE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-CF, MPU320-MP320(CF)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D0, MPU320-MP320(D0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D1, MPU320-MP320(D1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D2, MPU320-MP320(D2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D3, MPU320-MP320(D3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D4, MPU320-MP320(D4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D5, MPU320-MP320(D5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D6, MPU320-MP320(D6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D7, MPU320-MP320(D7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D8, MPU320-MP320(D8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-D9, MPU320-MP320(D9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DA, MPU320-MP320(DA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DB, MPU320-MP320(DB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DC, MPU320-MP320(DC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DD, MPU320-MP320(DD)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DE, MPU320-MP320(DE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-DF, MPU320-MP320(DF)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E0, MPU320-MP320(E0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E1, MPU320-MP320(E1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E2, MPU320-MP320(E2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E3, MPU320-MP320(E3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E4, MPU320-MP320(E4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E5, MPU320-MP320(E5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E6, MPU320-MP320(E6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E7, MPU320-MP320(E7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E8, MPU320-MP320(E8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-E9, MPU320-MP320(E9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-EA, MPU320-MP320(EA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-EB, MPU320-MP320(EB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-EC, MPU320-MP320(EC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-ED, MPU320-MP320(ED)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-EE, MPU320-MP320(EE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-EF, MPU320-MP320(EF)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F0, MPU320-MP320(F0)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F1, MPU320-MP320(F1)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F2, MPU320-MP320(F2)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F3, MPU320-MP320(F3)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F4, MPU320-MP320(F4)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F5, MPU320-MP320(F5)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F6, MPU320-MP320(F6)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F7, MPU320-MP320(F7)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F8, MPU320-MP320(F8)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-F9, MPU320-MP320(F9)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FA, MPU320-MP320(FA)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FB, MPU320-MP320(FB)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FC, MPU320-MP320(FC)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FD, MPU320-MP320(FD)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FE, MPU320-MP320(FE)")
        arraylist_vsp5000_mp.Add("MPU-320.MP320-FF, MPU320-MP320(FF)")
        'mp410
        arraylist_vsp5000_mp.Add("MPU-410.MP410-00, MPU410-MP410(00)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-01, MPU410-MP410(01)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-02, MPU410-MP410(02)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-03, MPU410-MP410(03)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-04, MPU410-MP410(04)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-05, MPU410-MP410(05)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-06, MPU410-MP410(06)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-07, MPU410-MP410(07)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-08, MPU410-MP410(08)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-09, MPU410-MP410(09)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0A, MPU410-MP410(0A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0B, MPU410-MP410(0B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0C, MPU410-MP410(0C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0D, MPU410-MP410(0D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0E, MPU410-MP410(0E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-0F, MPU410-MP410(0F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-10, MPU410-MP410(10)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-11, MPU410-MP410(11)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-12, MPU410-MP410(12)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-13, MPU410-MP410(13)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-14, MPU410-MP410(14)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-15, MPU410-MP410(15)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-16, MPU410-MP410(16)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-17, MPU410-MP410(17)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-18, MPU410-MP410(18)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-19, MPU410-MP410(19)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1A, MPU410-MP410(1A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1B, MPU410-MP410(1B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1C, MPU410-MP410(1C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1D, MPU410-MP410(1D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1E, MPU410-MP410(1E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-1F, MPU410-MP410(1F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-20, MPU410-MP410(20)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-21, MPU410-MP410(21)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-22, MPU410-MP410(22)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-23, MPU410-MP410(23)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-24, MPU410-MP410(24)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-25, MPU410-MP410(25)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-26, MPU410-MP410(26)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-27, MPU410-MP410(27)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-28, MPU410-MP410(28)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-29, MPU410-MP410(29)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2A, MPU410-MP410(2A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2B, MPU410-MP410(2B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2C, MPU410-MP410(2C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2D, MPU410-MP410(2D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2E, MPU410-MP410(2E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-2F, MPU410-MP410(2F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-30, MPU410-MP410(30)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-31, MPU410-MP410(31)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-32, MPU410-MP410(32)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-33, MPU410-MP410(33)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-34, MPU410-MP410(34)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-35, MPU410-MP410(35)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-36, MPU410-MP410(36)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-37, MPU410-MP410(37)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-38, MPU410-MP410(38)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-39, MPU410-MP410(39)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3A, MPU410-MP410(3A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3B, MPU410-MP410(3B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3C, MPU410-MP410(3C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3D, MPU410-MP410(3D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3E, MPU410-MP410(3E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-3F, MPU410-MP410(3F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-40, MPU410-MP410(40)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-41, MPU410-MP410(41)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-42, MPU410-MP410(42)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-43, MPU410-MP410(43)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-44, MPU410-MP410(44)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-45, MPU410-MP410(45)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-46, MPU410-MP410(46)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-47, MPU410-MP410(47)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-48, MPU410-MP410(48)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-49, MPU410-MP410(49)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4A, MPU410-MP410(4A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4B, MPU410-MP410(4B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4C, MPU410-MP410(4C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4D, MPU410-MP410(4D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4E, MPU410-MP410(4E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-4F, MPU410-MP410(4F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-50, MPU410-MP410(50)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-51, MPU410-MP410(51)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-52, MPU410-MP410(52)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-53, MPU410-MP410(53)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-54, MPU410-MP410(54)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-55, MPU410-MP410(55)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-56, MPU410-MP410(56)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-57, MPU410-MP410(57)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-58, MPU410-MP410(58)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-59, MPU410-MP410(59)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5A, MPU410-MP410(5A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5B, MPU410-MP410(5B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5C, MPU410-MP410(5C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5D, MPU410-MP410(5D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5E, MPU410-MP410(5E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-5F, MPU410-MP410(5F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-60, MPU410-MP410(60)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-61, MPU410-MP410(61)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-62, MPU410-MP410(62)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-63, MPU410-MP410(63)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-64, MPU410-MP410(64)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-65, MPU410-MP410(65)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-66, MPU410-MP410(66)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-67, MPU410-MP410(67)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-68, MPU410-MP410(68)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-69, MPU410-MP410(69)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6A, MPU410-MP410(6A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6B, MPU410-MP410(6B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6C, MPU410-MP410(6C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6D, MPU410-MP410(6D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6E, MPU410-MP410(6E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-6F, MPU410-MP410(6F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-70, MPU410-MP410(70)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-71, MPU410-MP410(71)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-72, MPU410-MP410(72)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-73, MPU410-MP410(73)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-74, MPU410-MP410(74)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-75, MPU410-MP410(75)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-76, MPU410-MP410(76)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-77, MPU410-MP410(77)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-78, MPU410-MP410(78)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-79, MPU410-MP410(79)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7A, MPU410-MP410(7A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7B, MPU410-MP410(7B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7C, MPU410-MP410(7C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7D, MPU410-MP410(7D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7E, MPU410-MP410(7E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-7F, MPU410-MP410(7F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-80, MPU410-MP410(80)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-81, MPU410-MP410(81)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-82, MPU410-MP410(82)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-83, MPU410-MP410(83)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-84, MPU410-MP410(84)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-85, MPU410-MP410(85)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-86, MPU410-MP410(86)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-87, MPU410-MP410(87)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-88, MPU410-MP410(88)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-89, MPU410-MP410(89)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8A, MPU410-MP410(8A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8B, MPU410-MP410(8B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8C, MPU410-MP410(8C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8D, MPU410-MP410(8D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8E, MPU410-MP410(8E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-8F, MPU410-MP410(8F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-90, MPU410-MP410(90)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-91, MPU410-MP410(91)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-92, MPU410-MP410(92)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-93, MPU410-MP410(93)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-94, MPU410-MP410(94)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-95, MPU410-MP410(95)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-96, MPU410-MP410(96)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-97, MPU410-MP410(97)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-98, MPU410-MP410(98)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-99, MPU410-MP410(99)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9A, MPU410-MP410(9A)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9B, MPU410-MP410(9B)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9C, MPU410-MP410(9C)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9D, MPU410-MP410(9D)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9E, MPU410-MP410(9E)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-9F, MPU410-MP410(9F)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A0, MPU410-MP410(A0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A1, MPU410-MP410(A1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A2, MPU410-MP410(A2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A3, MPU410-MP410(A3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A4, MPU410-MP410(A4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A5, MPU410-MP410(A5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A6, MPU410-MP410(A6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A7, MPU410-MP410(A7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A8, MPU410-MP410(A8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-A9, MPU410-MP410(A9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AA, MPU410-MP410(AA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AB, MPU410-MP410(AB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AC, MPU410-MP410(AC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AD, MPU410-MP410(AD)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AE, MPU410-MP410(AE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-AF, MPU410-MP410(AF)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B0, MPU410-MP410(B0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B1, MPU410-MP410(B1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B2, MPU410-MP410(B2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B3, MPU410-MP410(B3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B4, MPU410-MP410(B4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B5, MPU410-MP410(B5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B6, MPU410-MP410(B6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B7, MPU410-MP410(B7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B8, MPU410-MP410(B8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-B9, MPU410-MP410(B9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BA, MPU410-MP410(BA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BB, MPU410-MP410(BB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BC, MPU410-MP410(BC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BD, MPU410-MP410(BD)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BE, MPU410-MP410(BE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-BF, MPU410-MP410(BF)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C0, MPU410-MP410(C0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C1, MPU410-MP410(C1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C2, MPU410-MP410(C2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C3, MPU410-MP410(C3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C4, MPU410-MP410(C4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C5, MPU410-MP410(C5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C6, MPU410-MP410(C6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C7, MPU410-MP410(C7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C8, MPU410-MP410(C8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-C9, MPU410-MP410(C9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CA, MPU410-MP410(CA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CB, MPU410-MP410(CB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CC, MPU410-MP410(CC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CD, MPU410-MP410(CD)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CE, MPU410-MP410(CE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-CF, MPU410-MP410(CF)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D0, MPU410-MP410(D0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D1, MPU410-MP410(D1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D2, MPU410-MP410(D2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D3, MPU410-MP410(D3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D4, MPU410-MP410(D4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D5, MPU410-MP410(D5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D6, MPU410-MP410(D6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D7, MPU410-MP410(D7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D8, MPU410-MP410(D8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-D9, MPU410-MP410(D9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DA, MPU410-MP410(DA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DB, MPU410-MP410(DB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DC, MPU410-MP410(DC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DD, MPU410-MP410(DD)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DE, MPU410-MP410(DE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-DF, MPU410-MP410(DF)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E0, MPU410-MP410(E0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E1, MPU410-MP410(E1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E2, MPU410-MP410(E2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E3, MPU410-MP410(E3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E4, MPU410-MP410(E4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E5, MPU410-MP410(E5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E6, MPU410-MP410(E6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E7, MPU410-MP410(E7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E8, MPU410-MP410(E8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-E9, MPU410-MP410(E9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-EA, MPU410-MP410(EA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-EB, MPU410-MP410(EB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-EC, MPU410-MP410(EC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-ED, MPU410-MP410(ED)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-EE, MPU410-MP410(EE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-EF, MPU410-MP410(EF)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F0, MPU410-MP410(F0)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F1, MPU410-MP410(F1)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F2, MPU410-MP410(F2)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F3, MPU410-MP410(F3)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F4, MPU410-MP410(F4)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F5, MPU410-MP410(F5)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F6, MPU410-MP410(F6)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F7, MPU410-MP410(F7)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F8, MPU410-MP410(F8)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-F9, MPU410-MP410(F9)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FA, MPU410-MP410(FA)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FB, MPU410-MP410(FB)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FC, MPU410-MP410(FC)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FD, MPU410-MP410(FD)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FE, MPU410-MP410(FE)")
        arraylist_vsp5000_mp.Add("MPU-410.MP410-FF, MPU410-MP410(FF)")
        'mp420
        arraylist_vsp5000_mp.Add("MPU-420.MP420-00, MPU420-MP420(00)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-01, MPU420-MP420(01)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-02, MPU420-MP420(02)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-03, MPU420-MP420(03)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-04, MPU420-MP420(04)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-05, MPU420-MP420(05)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-06, MPU420-MP420(06)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-07, MPU420-MP420(07)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-08, MPU420-MP420(08)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-09, MPU420-MP420(09)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0A, MPU420-MP420(0A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0B, MPU420-MP420(0B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0C, MPU420-MP420(0C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0D, MPU420-MP420(0D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0E, MPU420-MP420(0E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-0F, MPU420-MP420(0F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-10, MPU420-MP420(10)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-11, MPU420-MP420(11)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-12, MPU420-MP420(12)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-13, MPU420-MP420(13)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-14, MPU420-MP420(14)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-15, MPU420-MP420(15)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-16, MPU420-MP420(16)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-17, MPU420-MP420(17)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-18, MPU420-MP420(18)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-19, MPU420-MP420(19)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1A, MPU420-MP420(1A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1B, MPU420-MP420(1B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1C, MPU420-MP420(1C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1D, MPU420-MP420(1D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1E, MPU420-MP420(1E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-1F, MPU420-MP420(1F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-20, MPU420-MP420(20)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-21, MPU420-MP420(21)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-22, MPU420-MP420(22)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-23, MPU420-MP420(23)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-24, MPU420-MP420(24)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-25, MPU420-MP420(25)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-26, MPU420-MP420(26)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-27, MPU420-MP420(27)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-28, MPU420-MP420(28)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-29, MPU420-MP420(29)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2A, MPU420-MP420(2A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2B, MPU420-MP420(2B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2C, MPU420-MP420(2C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2D, MPU420-MP420(2D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2E, MPU420-MP420(2E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-2F, MPU420-MP420(2F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-30, MPU420-MP420(30)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-31, MPU420-MP420(31)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-32, MPU420-MP420(32)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-33, MPU420-MP420(33)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-34, MPU420-MP420(34)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-35, MPU420-MP420(35)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-36, MPU420-MP420(36)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-37, MPU420-MP420(37)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-38, MPU420-MP420(38)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-39, MPU420-MP420(39)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3A, MPU420-MP420(3A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3B, MPU420-MP420(3B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3C, MPU420-MP420(3C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3D, MPU420-MP420(3D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3E, MPU420-MP420(3E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-3F, MPU420-MP420(3F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-40, MPU420-MP420(40)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-41, MPU420-MP420(41)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-42, MPU420-MP420(42)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-43, MPU420-MP420(43)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-44, MPU420-MP420(44)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-45, MPU420-MP420(45)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-46, MPU420-MP420(46)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-47, MPU420-MP420(47)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-48, MPU420-MP420(48)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-49, MPU420-MP420(49)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4A, MPU420-MP420(4A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4B, MPU420-MP420(4B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4C, MPU420-MP420(4C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4D, MPU420-MP420(4D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4E, MPU420-MP420(4E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-4F, MPU420-MP420(4F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-50, MPU420-MP420(50)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-51, MPU420-MP420(51)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-52, MPU420-MP420(52)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-53, MPU420-MP420(53)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-54, MPU420-MP420(54)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-55, MPU420-MP420(55)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-56, MPU420-MP420(56)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-57, MPU420-MP420(57)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-58, MPU420-MP420(58)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-59, MPU420-MP420(59)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5A, MPU420-MP420(5A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5B, MPU420-MP420(5B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5C, MPU420-MP420(5C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5D, MPU420-MP420(5D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5E, MPU420-MP420(5E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-5F, MPU420-MP420(5F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-60, MPU420-MP420(60)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-61, MPU420-MP420(61)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-62, MPU420-MP420(62)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-63, MPU420-MP420(63)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-64, MPU420-MP420(64)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-65, MPU420-MP420(65)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-66, MPU420-MP420(66)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-67, MPU420-MP420(67)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-68, MPU420-MP420(68)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-69, MPU420-MP420(69)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6A, MPU420-MP420(6A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6B, MPU420-MP420(6B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6C, MPU420-MP420(6C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6D, MPU420-MP420(6D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6E, MPU420-MP420(6E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-6F, MPU420-MP420(6F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-70, MPU420-MP420(70)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-71, MPU420-MP420(71)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-72, MPU420-MP420(72)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-73, MPU420-MP420(73)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-74, MPU420-MP420(74)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-75, MPU420-MP420(75)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-76, MPU420-MP420(76)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-77, MPU420-MP420(77)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-78, MPU420-MP420(78)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-79, MPU420-MP420(79)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7A, MPU420-MP420(7A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7B, MPU420-MP420(7B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7C, MPU420-MP420(7C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7D, MPU420-MP420(7D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7E, MPU420-MP420(7E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-7F, MPU420-MP420(7F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-80, MPU420-MP420(80)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-81, MPU420-MP420(81)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-82, MPU420-MP420(82)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-83, MPU420-MP420(83)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-84, MPU420-MP420(84)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-85, MPU420-MP420(85)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-86, MPU420-MP420(86)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-87, MPU420-MP420(87)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-88, MPU420-MP420(88)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-89, MPU420-MP420(89)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8A, MPU420-MP420(8A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8B, MPU420-MP420(8B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8C, MPU420-MP420(8C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8D, MPU420-MP420(8D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8E, MPU420-MP420(8E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-8F, MPU420-MP420(8F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-90, MPU420-MP420(90)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-91, MPU420-MP420(91)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-92, MPU420-MP420(92)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-93, MPU420-MP420(93)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-94, MPU420-MP420(94)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-95, MPU420-MP420(95)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-96, MPU420-MP420(96)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-97, MPU420-MP420(97)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-98, MPU420-MP420(98)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-99, MPU420-MP420(99)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9A, MPU420-MP420(9A)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9B, MPU420-MP420(9B)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9C, MPU420-MP420(9C)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9D, MPU420-MP420(9D)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9E, MPU420-MP420(9E)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-9F, MPU420-MP420(9F)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A0, MPU420-MP420(A0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A1, MPU420-MP420(A1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A2, MPU420-MP420(A2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A3, MPU420-MP420(A3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A4, MPU420-MP420(A4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A5, MPU420-MP420(A5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A6, MPU420-MP420(A6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A7, MPU420-MP420(A7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A8, MPU420-MP420(A8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-A9, MPU420-MP420(A9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AA, MPU420-MP420(AA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AB, MPU420-MP420(AB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AC, MPU420-MP420(AC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AD, MPU420-MP420(AD)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AE, MPU420-MP420(AE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-AF, MPU420-MP420(AF)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B0, MPU420-MP420(B0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B1, MPU420-MP420(B1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B2, MPU420-MP420(B2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B3, MPU420-MP420(B3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B4, MPU420-MP420(B4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B5, MPU420-MP420(B5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B6, MPU420-MP420(B6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B7, MPU420-MP420(B7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B8, MPU420-MP420(B8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-B9, MPU420-MP420(B9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BA, MPU420-MP420(BA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BB, MPU420-MP420(BB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BC, MPU420-MP420(BC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BD, MPU420-MP420(BD)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BE, MPU420-MP420(BE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-BF, MPU420-MP420(BF)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C0, MPU420-MP420(C0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C1, MPU420-MP420(C1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C2, MPU420-MP420(C2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C3, MPU420-MP420(C3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C4, MPU420-MP420(C4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C5, MPU420-MP420(C5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C6, MPU420-MP420(C6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C7, MPU420-MP420(C7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C8, MPU420-MP420(C8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-C9, MPU420-MP420(C9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CA, MPU420-MP420(CA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CB, MPU420-MP420(CB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CC, MPU420-MP420(CC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CD, MPU420-MP420(CD)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CE, MPU420-MP420(CE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-CF, MPU420-MP420(CF)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D0, MPU420-MP420(D0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D1, MPU420-MP420(D1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D2, MPU420-MP420(D2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D3, MPU420-MP420(D3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D4, MPU420-MP420(D4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D5, MPU420-MP420(D5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D6, MPU420-MP420(D6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D7, MPU420-MP420(D7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D8, MPU420-MP420(D8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-D9, MPU420-MP420(D9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DA, MPU420-MP420(DA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DB, MPU420-MP420(DB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DC, MPU420-MP420(DC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DD, MPU420-MP420(DD)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DE, MPU420-MP420(DE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-DF, MPU420-MP420(DF)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E0, MPU420-MP420(E0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E1, MPU420-MP420(E1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E2, MPU420-MP420(E2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E3, MPU420-MP420(E3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E4, MPU420-MP420(E4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E5, MPU420-MP420(E5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E6, MPU420-MP420(E6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E7, MPU420-MP420(E7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E8, MPU420-MP420(E8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-E9, MPU420-MP420(E9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-EA, MPU420-MP420(EA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-EB, MPU420-MP420(EB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-EC, MPU420-MP420(EC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-ED, MPU420-MP420(ED)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-EE, MPU420-MP420(EE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-EF, MPU420-MP420(EF)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F0, MPU420-MP420(F0)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F1, MPU420-MP420(F1)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F2, MPU420-MP420(F2)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F3, MPU420-MP420(F3)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F4, MPU420-MP420(F4)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F5, MPU420-MP420(F5)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F6, MPU420-MP420(F6)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F7, MPU420-MP420(F7)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F8, MPU420-MP420(F8)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-F9, MPU420-MP420(F9)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FA, MPU420-MP420(FA)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FB, MPU420-MP420(FB)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FC, MPU420-MP420(FC)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FD, MPU420-MP420(FD)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FE, MPU420-MP420(FE)")
        arraylist_vsp5000_mp.Add("MPU-420.MP420-FF, MPU420-MP420(FF)")
        'mp510
        arraylist_vsp5000_mp.Add("MPU-510.MP510-00, MPU510-MP510(00)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-01, MPU510-MP510(01)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-02, MPU510-MP510(02)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-03, MPU510-MP510(03)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-04, MPU510-MP510(04)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-05, MPU510-MP510(05)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-06, MPU510-MP510(06)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-07, MPU510-MP510(07)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-08, MPU510-MP510(08)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-09, MPU510-MP510(09)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0A, MPU510-MP510(0A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0B, MPU510-MP510(0B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0C, MPU510-MP510(0C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0D, MPU510-MP510(0D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0E, MPU510-MP510(0E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-0F, MPU510-MP510(0F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-10, MPU510-MP510(10)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-11, MPU510-MP510(11)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-12, MPU510-MP510(12)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-13, MPU510-MP510(13)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-14, MPU510-MP510(14)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-15, MPU510-MP510(15)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-16, MPU510-MP510(16)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-17, MPU510-MP510(17)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-18, MPU510-MP510(18)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-19, MPU510-MP510(19)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1A, MPU510-MP510(1A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1B, MPU510-MP510(1B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1C, MPU510-MP510(1C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1D, MPU510-MP510(1D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1E, MPU510-MP510(1E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-1F, MPU510-MP510(1F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-20, MPU510-MP510(20)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-21, MPU510-MP510(21)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-22, MPU510-MP510(22)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-23, MPU510-MP510(23)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-24, MPU510-MP510(24)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-25, MPU510-MP510(25)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-26, MPU510-MP510(26)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-27, MPU510-MP510(27)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-28, MPU510-MP510(28)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-29, MPU510-MP510(29)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2A, MPU510-MP510(2A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2B, MPU510-MP510(2B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2C, MPU510-MP510(2C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2D, MPU510-MP510(2D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2E, MPU510-MP510(2E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-2F, MPU510-MP510(2F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-30, MPU510-MP510(30)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-31, MPU510-MP510(31)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-32, MPU510-MP510(32)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-33, MPU510-MP510(33)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-34, MPU510-MP510(34)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-35, MPU510-MP510(35)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-36, MPU510-MP510(36)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-37, MPU510-MP510(37)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-38, MPU510-MP510(38)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-39, MPU510-MP510(39)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3A, MPU510-MP510(3A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3B, MPU510-MP510(3B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3C, MPU510-MP510(3C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3D, MPU510-MP510(3D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3E, MPU510-MP510(3E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-3F, MPU510-MP510(3F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-40, MPU510-MP510(40)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-41, MPU510-MP510(41)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-42, MPU510-MP510(42)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-43, MPU510-MP510(43)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-44, MPU510-MP510(44)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-45, MPU510-MP510(45)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-46, MPU510-MP510(46)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-47, MPU510-MP510(47)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-48, MPU510-MP510(48)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-49, MPU510-MP510(49)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4A, MPU510-MP510(4A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4B, MPU510-MP510(4B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4C, MPU510-MP510(4C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4D, MPU510-MP510(4D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4E, MPU510-MP510(4E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-4F, MPU510-MP510(4F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-50, MPU510-MP510(50)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-51, MPU510-MP510(51)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-52, MPU510-MP510(52)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-53, MPU510-MP510(53)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-54, MPU510-MP510(54)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-55, MPU510-MP510(55)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-56, MPU510-MP510(56)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-57, MPU510-MP510(57)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-58, MPU510-MP510(58)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-59, MPU510-MP510(59)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5A, MPU510-MP510(5A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5B, MPU510-MP510(5B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5C, MPU510-MP510(5C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5D, MPU510-MP510(5D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5E, MPU510-MP510(5E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-5F, MPU510-MP510(5F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-60, MPU510-MP510(60)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-61, MPU510-MP510(61)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-62, MPU510-MP510(62)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-63, MPU510-MP510(63)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-64, MPU510-MP510(64)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-65, MPU510-MP510(65)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-66, MPU510-MP510(66)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-67, MPU510-MP510(67)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-68, MPU510-MP510(68)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-69, MPU510-MP510(69)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6A, MPU510-MP510(6A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6B, MPU510-MP510(6B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6C, MPU510-MP510(6C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6D, MPU510-MP510(6D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6E, MPU510-MP510(6E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-6F, MPU510-MP510(6F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-70, MPU510-MP510(70)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-71, MPU510-MP510(71)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-72, MPU510-MP510(72)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-73, MPU510-MP510(73)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-74, MPU510-MP510(74)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-75, MPU510-MP510(75)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-76, MPU510-MP510(76)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-77, MPU510-MP510(77)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-78, MPU510-MP510(78)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-79, MPU510-MP510(79)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7A, MPU510-MP510(7A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7B, MPU510-MP510(7B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7C, MPU510-MP510(7C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7D, MPU510-MP510(7D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7E, MPU510-MP510(7E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-7F, MPU510-MP510(7F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-80, MPU510-MP510(80)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-81, MPU510-MP510(81)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-82, MPU510-MP510(82)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-83, MPU510-MP510(83)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-84, MPU510-MP510(84)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-85, MPU510-MP510(85)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-86, MPU510-MP510(86)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-87, MPU510-MP510(87)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-88, MPU510-MP510(88)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-89, MPU510-MP510(89)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8A, MPU510-MP510(8A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8B, MPU510-MP510(8B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8C, MPU510-MP510(8C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8D, MPU510-MP510(8D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8E, MPU510-MP510(8E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-8F, MPU510-MP510(8F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-90, MPU510-MP510(90)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-91, MPU510-MP510(91)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-92, MPU510-MP510(92)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-93, MPU510-MP510(93)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-94, MPU510-MP510(94)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-95, MPU510-MP510(95)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-96, MPU510-MP510(96)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-97, MPU510-MP510(97)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-98, MPU510-MP510(98)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-99, MPU510-MP510(99)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9A, MPU510-MP510(9A)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9B, MPU510-MP510(9B)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9C, MPU510-MP510(9C)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9D, MPU510-MP510(9D)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9E, MPU510-MP510(9E)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-9F, MPU510-MP510(9F)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A0, MPU510-MP510(A0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A1, MPU510-MP510(A1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A2, MPU510-MP510(A2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A3, MPU510-MP510(A3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A4, MPU510-MP510(A4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A5, MPU510-MP510(A5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A6, MPU510-MP510(A6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A7, MPU510-MP510(A7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A8, MPU510-MP510(A8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-A9, MPU510-MP510(A9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AA, MPU510-MP510(AA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AB, MPU510-MP510(AB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AC, MPU510-MP510(AC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AD, MPU510-MP510(AD)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AE, MPU510-MP510(AE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-AF, MPU510-MP510(AF)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B0, MPU510-MP510(B0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B1, MPU510-MP510(B1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B2, MPU510-MP510(B2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B3, MPU510-MP510(B3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B4, MPU510-MP510(B4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B5, MPU510-MP510(B5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B6, MPU510-MP510(B6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B7, MPU510-MP510(B7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B8, MPU510-MP510(B8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-B9, MPU510-MP510(B9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BA, MPU510-MP510(BA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BB, MPU510-MP510(BB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BC, MPU510-MP510(BC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BD, MPU510-MP510(BD)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BE, MPU510-MP510(BE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-BF, MPU510-MP510(BF)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C0, MPU510-MP510(C0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C1, MPU510-MP510(C1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C2, MPU510-MP510(C2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C3, MPU510-MP510(C3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C4, MPU510-MP510(C4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C5, MPU510-MP510(C5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C6, MPU510-MP510(C6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C7, MPU510-MP510(C7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C8, MPU510-MP510(C8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-C9, MPU510-MP510(C9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CA, MPU510-MP510(CA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CB, MPU510-MP510(CB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CC, MPU510-MP510(CC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CD, MPU510-MP510(CD)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CE, MPU510-MP510(CE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-CF, MPU510-MP510(CF)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D0, MPU510-MP510(D0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D1, MPU510-MP510(D1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D2, MPU510-MP510(D2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D3, MPU510-MP510(D3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D4, MPU510-MP510(D4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D5, MPU510-MP510(D5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D6, MPU510-MP510(D6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D7, MPU510-MP510(D7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D8, MPU510-MP510(D8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-D9, MPU510-MP510(D9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DA, MPU510-MP510(DA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DB, MPU510-MP510(DB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DC, MPU510-MP510(DC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DD, MPU510-MP510(DD)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DE, MPU510-MP510(DE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-DF, MPU510-MP510(DF)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E0, MPU510-MP510(E0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E1, MPU510-MP510(E1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E2, MPU510-MP510(E2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E3, MPU510-MP510(E3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E4, MPU510-MP510(E4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E5, MPU510-MP510(E5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E6, MPU510-MP510(E6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E7, MPU510-MP510(E7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E8, MPU510-MP510(E8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-E9, MPU510-MP510(E9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-EA, MPU510-MP510(EA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-EB, MPU510-MP510(EB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-EC, MPU510-MP510(EC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-ED, MPU510-MP510(ED)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-EE, MPU510-MP510(EE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-EF, MPU510-MP510(EF)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F0, MPU510-MP510(F0)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F1, MPU510-MP510(F1)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F2, MPU510-MP510(F2)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F3, MPU510-MP510(F3)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F4, MPU510-MP510(F4)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F5, MPU510-MP510(F5)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F6, MPU510-MP510(F6)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F7, MPU510-MP510(F7)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F8, MPU510-MP510(F8)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-F9, MPU510-MP510(F9)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FA, MPU510-MP510(FA)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FB, MPU510-MP510(FB)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FC, MPU510-MP510(FC)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FD, MPU510-MP510(FD)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FE, MPU510-MP510(FE)")
        arraylist_vsp5000_mp.Add("MPU-510.MP510-FF, MPU510-MP510(FF)")
        'mp520
        arraylist_vsp5000_mp.Add("MPU-520.MP520-00, MPU520-MP520(00)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-01, MPU520-MP520(01)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-02, MPU520-MP520(02)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-03, MPU520-MP520(03)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-04, MPU520-MP520(04)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-05, MPU520-MP520(05)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-06, MPU520-MP520(06)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-07, MPU520-MP520(07)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-08, MPU520-MP520(08)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-09, MPU520-MP520(09)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0A, MPU520-MP520(0A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0B, MPU520-MP520(0B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0C, MPU520-MP520(0C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0D, MPU520-MP520(0D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0E, MPU520-MP520(0E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-0F, MPU520-MP520(0F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-10, MPU520-MP520(10)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-11, MPU520-MP520(11)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-12, MPU520-MP520(12)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-13, MPU520-MP520(13)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-14, MPU520-MP520(14)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-15, MPU520-MP520(15)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-16, MPU520-MP520(16)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-17, MPU520-MP520(17)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-18, MPU520-MP520(18)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-19, MPU520-MP520(19)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1A, MPU520-MP520(1A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1B, MPU520-MP520(1B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1C, MPU520-MP520(1C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1D, MPU520-MP520(1D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1E, MPU520-MP520(1E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-1F, MPU520-MP520(1F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-20, MPU520-MP520(20)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-21, MPU520-MP520(21)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-22, MPU520-MP520(22)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-23, MPU520-MP520(23)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-24, MPU520-MP520(24)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-25, MPU520-MP520(25)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-26, MPU520-MP520(26)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-27, MPU520-MP520(27)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-28, MPU520-MP520(28)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-29, MPU520-MP520(29)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2A, MPU520-MP520(2A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2B, MPU520-MP520(2B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2C, MPU520-MP520(2C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2D, MPU520-MP520(2D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2E, MPU520-MP520(2E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-2F, MPU520-MP520(2F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-30, MPU520-MP520(30)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-31, MPU520-MP520(31)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-32, MPU520-MP520(32)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-33, MPU520-MP520(33)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-34, MPU520-MP520(34)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-35, MPU520-MP520(35)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-36, MPU520-MP520(36)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-37, MPU520-MP520(37)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-38, MPU520-MP520(38)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-39, MPU520-MP520(39)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3A, MPU520-MP520(3A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3B, MPU520-MP520(3B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3C, MPU520-MP520(3C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3D, MPU520-MP520(3D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3E, MPU520-MP520(3E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-3F, MPU520-MP520(3F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-40, MPU520-MP520(40)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-41, MPU520-MP520(41)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-42, MPU520-MP520(42)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-43, MPU520-MP520(43)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-44, MPU520-MP520(44)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-45, MPU520-MP520(45)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-46, MPU520-MP520(46)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-47, MPU520-MP520(47)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-48, MPU520-MP520(48)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-49, MPU520-MP520(49)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4A, MPU520-MP520(4A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4B, MPU520-MP520(4B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4C, MPU520-MP520(4C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4D, MPU520-MP520(4D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4E, MPU520-MP520(4E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-4F, MPU520-MP520(4F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-50, MPU520-MP520(50)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-51, MPU520-MP520(51)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-52, MPU520-MP520(52)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-53, MPU520-MP520(53)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-54, MPU520-MP520(54)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-55, MPU520-MP520(55)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-56, MPU520-MP520(56)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-57, MPU520-MP520(57)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-58, MPU520-MP520(58)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-59, MPU520-MP520(59)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5A, MPU520-MP520(5A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5B, MPU520-MP520(5B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5C, MPU520-MP520(5C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5D, MPU520-MP520(5D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5E, MPU520-MP520(5E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-5F, MPU520-MP520(5F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-60, MPU520-MP520(60)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-61, MPU520-MP520(61)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-62, MPU520-MP520(62)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-63, MPU520-MP520(63)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-64, MPU520-MP520(64)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-65, MPU520-MP520(65)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-66, MPU520-MP520(66)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-67, MPU520-MP520(67)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-68, MPU520-MP520(68)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-69, MPU520-MP520(69)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6A, MPU520-MP520(6A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6B, MPU520-MP520(6B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6C, MPU520-MP520(6C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6D, MPU520-MP520(6D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6E, MPU520-MP520(6E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-6F, MPU520-MP520(6F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-70, MPU520-MP520(70)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-71, MPU520-MP520(71)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-72, MPU520-MP520(72)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-73, MPU520-MP520(73)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-74, MPU520-MP520(74)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-75, MPU520-MP520(75)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-76, MPU520-MP520(76)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-77, MPU520-MP520(77)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-78, MPU520-MP520(78)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-79, MPU520-MP520(79)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7A, MPU520-MP520(7A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7B, MPU520-MP520(7B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7C, MPU520-MP520(7C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7D, MPU520-MP520(7D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7E, MPU520-MP520(7E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-7F, MPU520-MP520(7F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-80, MPU520-MP520(80)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-81, MPU520-MP520(81)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-82, MPU520-MP520(82)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-83, MPU520-MP520(83)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-84, MPU520-MP520(84)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-85, MPU520-MP520(85)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-86, MPU520-MP520(86)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-87, MPU520-MP520(87)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-88, MPU520-MP520(88)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-89, MPU520-MP520(89)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8A, MPU520-MP520(8A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8B, MPU520-MP520(8B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8C, MPU520-MP520(8C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8D, MPU520-MP520(8D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8E, MPU520-MP520(8E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-8F, MPU520-MP520(8F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-90, MPU520-MP520(90)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-91, MPU520-MP520(91)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-92, MPU520-MP520(92)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-93, MPU520-MP520(93)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-94, MPU520-MP520(94)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-95, MPU520-MP520(95)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-96, MPU520-MP520(96)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-97, MPU520-MP520(97)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-98, MPU520-MP520(98)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-99, MPU520-MP520(99)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9A, MPU520-MP520(9A)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9B, MPU520-MP520(9B)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9C, MPU520-MP520(9C)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9D, MPU520-MP520(9D)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9E, MPU520-MP520(9E)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-9F, MPU520-MP520(9F)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A0, MPU520-MP520(A0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A1, MPU520-MP520(A1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A2, MPU520-MP520(A2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A3, MPU520-MP520(A3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A4, MPU520-MP520(A4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A5, MPU520-MP520(A5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A6, MPU520-MP520(A6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A7, MPU520-MP520(A7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A8, MPU520-MP520(A8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-A9, MPU520-MP520(A9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AA, MPU520-MP520(AA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AB, MPU520-MP520(AB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AC, MPU520-MP520(AC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AD, MPU520-MP520(AD)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AE, MPU520-MP520(AE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-AF, MPU520-MP520(AF)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B0, MPU520-MP520(B0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B1, MPU520-MP520(B1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B2, MPU520-MP520(B2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B3, MPU520-MP520(B3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B4, MPU520-MP520(B4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B5, MPU520-MP520(B5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B6, MPU520-MP520(B6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B7, MPU520-MP520(B7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B8, MPU520-MP520(B8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-B9, MPU520-MP520(B9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BA, MPU520-MP520(BA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BB, MPU520-MP520(BB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BC, MPU520-MP520(BC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BD, MPU520-MP520(BD)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BE, MPU520-MP520(BE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-BF, MPU520-MP520(BF)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C0, MPU520-MP520(C0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C1, MPU520-MP520(C1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C2, MPU520-MP520(C2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C3, MPU520-MP520(C3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C4, MPU520-MP520(C4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C5, MPU520-MP520(C5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C6, MPU520-MP520(C6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C7, MPU520-MP520(C7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C8, MPU520-MP520(C8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-C9, MPU520-MP520(C9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CA, MPU520-MP520(CA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CB, MPU520-MP520(CB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CC, MPU520-MP520(CC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CD, MPU520-MP520(CD)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CE, MPU520-MP520(CE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-CF, MPU520-MP520(CF)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D0, MPU520-MP520(D0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D1, MPU520-MP520(D1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D2, MPU520-MP520(D2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D3, MPU520-MP520(D3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D4, MPU520-MP520(D4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D5, MPU520-MP520(D5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D6, MPU520-MP520(D6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D7, MPU520-MP520(D7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D8, MPU520-MP520(D8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-D9, MPU520-MP520(D9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DA, MPU520-MP520(DA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DB, MPU520-MP520(DB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DC, MPU520-MP520(DC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DD, MPU520-MP520(DD)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DE, MPU520-MP520(DE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-DF, MPU520-MP520(DF)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E0, MPU520-MP520(E0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E1, MPU520-MP520(E1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E2, MPU520-MP520(E2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E3, MPU520-MP520(E3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E4, MPU520-MP520(E4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E5, MPU520-MP520(E5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E6, MPU520-MP520(E6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E7, MPU520-MP520(E7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E8, MPU520-MP520(E8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-E9, MPU520-MP520(E9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-EA, MPU520-MP520(EA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-EB, MPU520-MP520(EB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-EC, MPU520-MP520(EC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-ED, MPU520-MP520(ED)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-EE, MPU520-MP520(EE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-EF, MPU520-MP520(EF)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F0, MPU520-MP520(F0)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F1, MPU520-MP520(F1)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F2, MPU520-MP520(F2)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F3, MPU520-MP520(F3)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F4, MPU520-MP520(F4)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F5, MPU520-MP520(F5)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F6, MPU520-MP520(F6)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F7, MPU520-MP520(F7)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F8, MPU520-MP520(F8)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-F9, MPU520-MP520(F9)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FA, MPU520-MP520(FA)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FB, MPU520-MP520(FB)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FC, MPU520-MP520(FC)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FD, MPU520-MP520(FD)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FE, MPU520-MP520(FE)")
        arraylist_vsp5000_mp.Add("MPU-520.MP520-FF, MPU520-MP520(FF)")
        'Open-Target, Open-Initiator, Open-External, MF-Target, MF-External, BackEnd, or System
        arraylist_vsp5000_mp.Add("BackEnd,BackEnd")
        arraylist_vsp5000_mp.Add("System,System")
        arraylist_vsp5000_mp.Add("Open-Target,Open-Target")
        arraylist_vsp5000_mp.Add("Open-Initiator,Open-Initiator")
        arraylist_vsp5000_mp.Add("Open-External,Open-External")

        'create filename conversion list
        'df filename arraylist
        'arraylist_df_filename_port.Clear()
        'arraylist_df_filename_port.Add("IO Rate(IOPS).csv,IO Rate(IOPS)")
        'arraylist_df_filename_port.Add("Trans. Rate(MB_S).csv,Transfer Rate(MB/s)")
        'arraylist_df_filename_port.Add("Write Trans. Size(MB).csv,Write Transfer Size(MB)")
        'arraylist_df_filename.Add("MPU-10.MP10-03,MPU-10(MP03)")
        'arraylist_df_filename.Add("MPU-11.MP11-00,MPU-11(MP00)")
        'arraylist_df_filename.Add("MPU-11.MP11-01,MPU-11(MP01)")
        'arraylist_df_filename.Add("MPU-11.MP11-02,MPU-11(MP02)")
        'arraylist_df_filename.Add("MPU-11.MP11-03,MPU-11(MP03)")
        'arraylist_df_filename.Add("MPU-20.MP20-00,MPU-20(MP00)")
        'arraylist_df_filename.Add("MPU-20.MP20-01,MPU-20(MP01)")
        'arraylist_df_filename.Add("MPU-20.MP20-02,MPU-20(MP02)")
        'arraylist_df_filename.Add("MPU-20.MP20-03,MPU-20(MP03)")
        'arraylist_df_filename.Add("MPU-21.MP21-00,MPU-21(MP00)")
        'arraylist_df_filename.Add("MPU-21.MP21-01,MPU-21(MP01)")
        'arraylist_df_filename.Add("MPU-21.MP21-02,MPU-21(MP02)")
        'arraylist_df_filename.Add("MPU-21.MP21-03,MPU-21(MP03)")

        'tests

        'test call for a function
        'standard
        'Dim test = array_raid_performance_data_put_in_array("D:\temp\VSP_export_hur_problem_sn86146\VSP_export_HUR\UnZippedFiles\" & str_export_foldername_mp & "\" & "PHY_Short_MP.csv", "MPB-1MA.MP00-1MA,MPB-1MA.MP01-1MA", "", CDate("2012.08.28 09:50:00"), CDate("2012.08.28 10:00:00"), 0, 100)

        'add_lu_hsd
        'Dim test = array_raid_performance_data_put_in_array("D:\temp\VSP_export_hur_problem_sn86146\VSP_export_HUR\UnZippedFiles\" & str_export_foldername_lu & "\" & "LU_IOPS.csv", "CL7-C.02(x3012sql01clu19_2).0001,CL7-C.02(x3012sql01clu19_2).0002,CL7-C.05(mittelgrat_1).0000,CL1-F.05(stand_2).0001,CL1-F.05(stand_2).0002", "add_lu_hsd", CDate("2012.08.28 09:50:00"), CDate("2012.08.28 10:00:00"), 0, 100)

        'str_sum_up_take_filename_as_name
        'Dim test = array_raid_performance_data_put_in_array("D:\temp\VSP_export_hur_problem_sn86146\VSP_export_HUR\UnZippedFiles\" & str_export_foldername_lu & "\" & "LU_IOPS.csv", "CL7-C.02(x3012sql01clu19_2).0001,CL7-C.02(x3012sql01clu19_2).0002", str_sum_up_take_filename_as_name, CDate("2012.08.28 09:50:00"), CDate("2012.08.28 10:00:00"), 0, 100)

        'df_sum_up
        'Dim test = array_raid_performance_data_put_in_array("D:\temp\AMS2500_87050780_export_1440\UnZippedFiles\LU\IO Rate(IOPS).csv", "CTL0-LU1610,CTL1-LU1610", "df_sum_up", CDate("2012.03.21 13:48:00"), CDate("2012.03.21 13:50:00"), 0, 100)

        'Dim files() As String = Nothing
        'ReDim files(0)
        'files(0) = "D:\temp\VSP_export_hur_problem_sn86146\UnZippedFiles\Port_dat\Port_IOPS.csv"
        'files(1) = "D:\temp\VSP_export_hur_problem_sn86146\UnZippedFiles\Port_dat\Port_KBPS.csv"
        'Dim elements() As String = Nothing
        'ReDim elements(1)
        'elements(0) = "CL7-C,CL3-D,CL4-E"
        'elements(1) = "CL7-C,CL3-D,CL4-E"

        'Dim test = array_raid_performance_data_put_in_array_of_several_files(files, elements, "", "", CDate("2012.12.18 14:50:00"), CDate("2012.12.18 15:00:00"))

        'topx 1 block
        'Dim files() As String = Nothing
        'ReDim files(0)
        'files(0) = "D:\temp\VSP_export_hur_problem_sn86146\UnZippedFiles\Port_dat\Port_IOPS.csv"
        'Dim test = array_raid_performance_data_put_in_dictionary_topx(files(0), CDate("2012.12.18 14:35:00"), CDate("2012.12.18 14:40:00"), 10, "max", str_port)
        'files(0) = ""

        'topx several block
        'Dim files() As String = Nothing
        'ReDim files(0)
        'files(0) = "D:\temp\VSP_export_hur_problem_sn86146\VSP_export_HUR\UnZippedFiles\" & str_export_foldername_lu & "\" & "LU_IOPS.csv"
        'Dim test = array_raid_performance_data_put_in_dictionary_topx(files(0), CDate("2012.08.28 09:50:00"), CDate("2012.08.28 10:00:00"), 20, "max", str_lu)
        'files(0) = ""

        'horcm folder
        'Dim files() As String = Nothing
        'ReDim files(0)
        'files(0) = "D:\temp\VSP_53476_2014-03-12_1659-2014-03-13_0459\horcmdir53476\53476_raidcom_get_ldevlist_def.txt"

    End Sub

#Region " Buttons"

    Private Sub Button_select_performance_data_folder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_select_performance_data_folder.Click

        'delete old charts
        Call delete_tabpages_and_carts()

        ' First create a FolderBrowserDialog object
        Dim FolderBrowserDialog1 As New FolderBrowserDialog

        ' Then use the following code to create the Dialog window
        ' Change the .SelectedPath property to the default location
        With (FolderBrowserDialog1)
            ' Desktop is the root folder in the dialog.
            '.RootFolder = Environment.SpecialFolder.Desktop
            ' Select the C:\Windows directory on entry.

            'select last path
            .SelectedPath = path_performance_export_data

            ' Prompt the user with a custom message.
            .Description = "Select the directory with the 'Performance Export Data'"
            .ShowNewFolderButton = False

            If .ShowDialog = DialogResult.OK Then

                'reset performance data 
                str_performance_data_available = Nothing
                str_raidcom_full_path = Nothing
                str_raidcom_data_available = Nothing

                ' save the path in the variable "path_performance_export_data" the selected folder if the user clicked on the OK button.
                path_performance_export_data = .SelectedPath

                'set variables if the data is available
                Call check_performance_data_zip_files()

                If IsNothing(str_performance_data_available) Then

                    Call Button_select_performance_data_folder_Click("Select Performance Folder", EventArgs.Empty)
                Else

                    'populate the treeview
                    Call treeview_populate(path_performance_export_data)

                End If
            End If
        End With



    End Sub

    'done
    Private Sub Button_exit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_exit.Click

        If Me.ToolStripMenuItem_save_configuration.Checked Then
            'write configuration to xml
            Call write_configuration()
        End If

        Me.Close()

    End Sub

    'done
    Private Sub Form_Performance_Analyse_Tool_Main_Load_Closing(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing

        If Me.ToolStripMenuItem_save_configuration.Checked Then
            'write configuration to xml
            Call write_configuration()
        End If

    End Sub

#End Region

#Region "Chart / Treeview level Gathering Data Procedures"

    Private Sub delete_tabpages_and_carts()

        Do Until TabControl_chart1.TabCount <= 0
            TabControl_chart1.Controls(0).Dispose()
        Loop

        TabControl_chart1.TabPages.Clear()
        TabControl_chart1.Update()

    End Sub

    'chart engine
    Private Sub array_create_chart(ByVal chart_title As String, ByVal nodename_full_path As String, ByVal str_treeview_level As String, ByVal int_y_axis_max_value As Integer, ByVal dbl_unit_factor As Double, ByVal str_y_axis_title As String, ByVal str_tabtitle As String, ByVal str_performance_data_array As Array, ByVal what_chart_type As String, ByVal what_to_do As String, ByVal int_how_many_descriptor_lines As Integer, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date)
        'path_and_filename -> c:\program files\test.csv

        'what_to_look_for -> this string used to filter the elements that will be used (instring filter. example "1-1" takes the values for the descriptor "1-1"
        ' "1-1,1-2" takes the values for both descriptors "1-1" and "1-2"

        'if the series only contains zeros it is not shown in the graph
        'true -> all values are zero -> do not show the graph
        'false -> not all values are zero -> show the graph
        'Dim all_values_are_zero As Boolean = Nothing

        'calculate the average of the series
        Dim dbl_average_value As Double = Nothing
        Dim int_average_value_counter As Integer = Nothing

        'calculate the max of the series
        Dim dbl_max_value As Double = Nothing

        'for temporary calculations
        Dim dbl_temp_value As Double = Nothing
        Dim dbl_temp_value_calculate As Double = Nothing

        'if the files do not exist
        If UBound(str_performance_data_array, 2) = 0 Then
            If CStr(str_performance_data_array.GetValue(0)) = "-1" Then
                Exit Sub
            End If
        End If

        'tab index
        Dim int_tabindex As Integer = Nothing

        'chart variables
        Dim NewTab As TabPage = Nothing
        Dim NewChart As Chart = Nothing

        'Progress bar
        Label_progress_chart.Text = "Creating chart"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = 0
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()

        'set tab index number
        int_tabindex = TabControl_chart1.TabCount

        '*********************************************************
        'tabcontrol properties

        'tabs are shown in multiple lines if needed
        Me.TabControl_chart1.Multiline = True

        'set tabindex
        TabIndex = int_tabindex
        'create new tab
        NewTab = New TabPage
        Me.TabControl_chart1.Controls.Add(NewTab)
        Me.TabControl_chart1.TabPages.Item(int_tabindex).Name = "tab" & CStr(int_tabindex)
        'set the tab text
        Me.TabControl_chart1.TabPages.Item(int_tabindex).Text = str_tabtitle

        '*********************************************************
        'chart properties

        'create new chart
        NewChart = New Chart
        NewTab.Controls.Add(NewChart)
        'chart size and position
        NewChart.Location = New System.Drawing.Point(0, 0)
        NewChart.Size = New System.Drawing.Size(CType(TabControl_chart1.Size, Point))
        NewChart.Anchor = AnchorStyles.Left Or AnchorStyles.Right Or AnchorStyles.Top Or AnchorStyles.Bottom
        NewChart.Visible = True

        ' format the chart back
        NewChart.BackColor = Color.Gray
        NewChart.BackSecondaryColor = Color.WhiteSmoke
        NewChart.BackGradientStyle = GradientStyle.DiagonalRight
        NewChart.BorderlineDashStyle = ChartDashStyle.Solid
        NewChart.BorderSkin.SkinStyle = BorderSkinStyle.Emboss
        NewChart.BorderlineColor = Color.Gray
        ' format the chart area
        NewChart.ChartAreas.Add("ChartArea1")
        NewChart.ChartAreas("ChartArea1").BackColor = Color.White

        ' Set automatic zooming
        NewChart.ChartAreas("ChartArea1").AxisX.ScaleView.Zoomable = True
        NewChart.ChartAreas("ChartArea1").AxisY.ScaleView.Zoomable = True
        ' Enable range selection and zooming end user interface
        NewChart.ChartAreas("ChartArea1").CursorX.IsUserEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorX.IsUserSelectionEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorY.IsUserEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorY.IsUserSelectionEnabled = True

        ' Disable X axis margin
        NewChart.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False

        ' Enable X and Y axis labels automatic fitting
        NewChart.ChartAreas("ChartArea1").AxisX.IsLabelAutoFit = True
        NewChart.ChartAreas("ChartArea1").AxisY.IsLabelAutoFit = True

        ' Set X and Y axis automatic fitting style
        NewChart.ChartAreas("ChartArea1").AxisX.LabelAutoFitStyle =
        LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.IncreaseFont Or LabelAutoFitStyles.WordWrap
        NewChart.ChartAreas("ChartArea1").AxisY.LabelAutoFitStyle =
        LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.IncreaseFont Or LabelAutoFitStyles.WordWrap

        'how the x and y axis values show up in intervals
        'NewChart.ChartAreas("ChartArea1").AxisX.Interval = 50
        NewChart.ChartAreas("ChartArea1").AxisX.MajorGrid.LineColor = Color.LightGray
        'chart_output.ChartAreas("ChartArea1").AxisX.IntervalType = DateTimeIntervalType.Hours
        'NewChart.ChartAreas("ChartArea1").AxisY.Interval = 5
        NewChart.ChartAreas("ChartArea1").AxisY.MajorGrid.LineColor = Color.LightGray

        ' Set  axis title
        NewChart.ChartAreas("ChartArea1").AxisX.Title = "Time [min]"
        NewChart.ChartAreas("ChartArea1").AxisY.Title = str_y_axis_title
        ' Set Title font
        NewChart.ChartAreas("ChartArea1").AxisX.TitleFont = New Font("verdana", 10)
        NewChart.ChartAreas("ChartArea1").AxisY.TitleFont = New Font("verdana", 10)
        ' Set Title color
        NewChart.ChartAreas("ChartArea1").AxisX.TitleForeColor = Color.Black
        NewChart.ChartAreas("ChartArea1").AxisY.TitleForeColor = Color.Black

        If Not int_y_axis_max_value = 0 Then
            NewChart.ChartAreas("ChartArea1").AxisY.Maximum = int_y_axis_max_value
        End If

        'chartname
        NewChart.Name = "chart" & CStr(int_tabindex)
        'right mouse click context menu
        NewChart.ContextMenuStrip = ContextMenuStrip_chart

        ' add handler to catch the mosemove afterwards to make the chart interactive (see sub  )
        AddHandler NewChart.MouseMove, AddressOf Chart_MouseMove
        AddHandler NewChart.MouseDown, AddressOf delete_series_MouseDown

        ' Show as 3D
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Enable3D = True
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.IsClustered = True
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Rotation = 30
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Inclination = 30

        ' Set Legend's visual attributes
        NewChart.Legends.Add("Legend1")
        NewChart.Legends("Legend1").BackColor = Color.White
        NewChart.Legends("Legend1").BackSecondaryColor = Color.Transparent
        NewChart.Legends("Legend1").BackGradientStyle = GradientStyle.None
        NewChart.Legends("Legend1").BorderColor = Color.Gray
        NewChart.Legends("Legend1").BorderWidth = 2
        NewChart.Legends("Legend1").BorderDashStyle = ChartDashStyle.Solid
        NewChart.Legends("Legend1").ShadowOffset = 2
        NewChart.Legends("Legend1").LegendItemOrder = LegendItemOrder.ReversedSeriesOrder
        NewChart.Legends("Legend1").Font = New Font("verdana", 6)

        '******************************************
        'create the series

        'main title
        NewChart.Titles.Add(chart_title & " " & Strings.Replace(Convert.ToString(str_performance_data_array.GetValue(1, 1)), str_serial_number_pattern, str_serial_number_replace_pattern))
        NewChart.Titles(0).Font = New Font("verdana", 16)

        'subtitle
        NewChart.Titles.Add("From : " & date_datetimepicker_start_value & " to " & date_datetimepicker_end_value & " (" & Convert.ToString(str_performance_data_array.GetValue(4, 1)) & "min)")
        NewChart.Titles(1).Font = New Font("verdana", 10)

        'counter: which series number is it?
        'Dim int_series_number As Integer = 1
        'Dim int_series_counter As Integer = 0
        Dim series As Series = Nothing

        Select Case what_to_do

            Case "ratio" 'read/write ratio

                series = New Series

                series.ChartArea = "ChartArea1"

                ' Show transparent color
                'to do
                'colors of different series have to be different

                'series.Color = Color.DarkCyan

                series.BorderWidth = 1

                'series legend name
                If InStr(str_y_axis_title, "read/write ratio") <> 0 Then 'read/write ratio
                    series.Name = str_tabtitle
                End If

                Select Case csv_extract(what_chart_type, 1, CChar(";"))
                    Case "fastline" 'linegraph
                        series.ChartType = SeriesChartType.FastLine

                    Case "stackedarea" 'stacked graph
                        series.ChartType = SeriesChartType.StackedArea

                    Case Else
                        'this is the default if nothing else set
                        series.ChartType = SeriesChartType.FastLine

                End Select

                'set the average value to zero
                dbl_average_value = 0
                dbl_max_value = 0
                int_average_value_counter = 0

                For int_row_counter As Integer = int_how_many_descriptor_lines + 1 To UBound(str_performance_data_array, 1) Step 1

                    dbl_temp_value = (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor)

                    'check if the value to divide is bigger than 0
                    If dbl_temp_value > 0 Then
                        'normal average calculation

                        dbl_temp_value_calculate = 100 / ((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) + (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor)) * (CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor)

                        'series point
                        series.Points.AddXY(CStr(str_performance_data_array.GetValue(int_row_counter, 0)), dbl_temp_value_calculate)

                        'average value
                        dbl_average_value = dbl_average_value + dbl_temp_value_calculate
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If dbl_temp_value_calculate > dbl_max_value Then
                            dbl_max_value = dbl_temp_value_calculate
                        End If
                    Else
                        'division by 0 average calculation
                        '-> i define that the blocksize is 0 if the iops value is zero

                        'series point
                        series.Points.AddXY(CStr(str_performance_data_array.GetValue(int_row_counter, 0)), 0)
                        'average value
                        'dbl_average_value = dbl_average_value + CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor))
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If 0 > dbl_max_value Then
                            dbl_max_value = 0
                        End If
                    End If

                    dbl_temp_value_calculate = Nothing
                Next

                ' average values and max values
                If dbl_average_value > 0 Or dbl_max_value > 0 Then
                    If dbl_average_value > 0 Then
                        If dbl_max_value > 0 Then
                            series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & ", Max. " & Math.Round(dbl_max_value, 2) & "]"
                        Else
                            series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & "]"
                        End If
                    Else
                        If dbl_max_value > 0 Then
                            series.Name = series.Name & " [Max. " & Math.Round(dbl_max_value, 2) & "]"
                        End If
                    End If
                    dbl_average_value = Nothing
                    dbl_max_value = Nothing
                    int_average_value_counter = Nothing
                End If

                'if there are minus values in the series
                If Not CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, 1)) Is Nothing Then
                    series.Name = series.Name & " [Errors: " & CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, 1)) & "]"
                End If

                'Add the series to the chart_output control.
                NewChart.Series.Add(series)

                'update the chart after each series
                'NewChart.Update()
                series = Nothing


            Case "div" 'blocksize

                series = New Series

                series.ChartArea = "ChartArea1"

                ' Show transparent color
                'to do
                'colors of different series have to be different

                'series.Color = Color.DarkCyan

                series.BorderWidth = 1

                'series legend name
                If InStr(str_y_axis_title, "blocksize") <> 0 Then 'blocksize
                    series.Name = str_tabtitle
                End If

                Select Case csv_extract(what_chart_type, 1, CChar(";"))
                    Case "fastline" 'linegraph
                        series.ChartType = SeriesChartType.FastLine

                    Case "stackedarea" 'stacked graph
                        series.ChartType = SeriesChartType.StackedArea

                    Case Else
                        'this is the default if nothing else set
                        series.ChartType = SeriesChartType.FastLine

                End Select

                'set the average value to zero
                dbl_average_value = 0
                dbl_max_value = 0
                int_average_value_counter = 0

                For int_row_counter As Integer = int_how_many_descriptor_lines + 1 To UBound(str_performance_data_array, 1) Step 1

                    dbl_temp_value = (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor)

                    'check if the value to divide is bigger than 0
                    If dbl_temp_value > 0 Then
                        'normal average calculation

                        'series point
                        series.Points.AddXY(CStr(str_performance_data_array.GetValue(int_row_counter, 0)), CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor)))
                        'average value
                        dbl_average_value = dbl_average_value + CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor))
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor)) > dbl_max_value Then
                            dbl_max_value = CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor))
                        End If
                    Else
                        'division by 0 average calculation
                        '-> i define that the blocksize is 0 if the iops value is zero

                        'series point
                        series.Points.AddXY(CStr(str_performance_data_array.GetValue(int_row_counter, 0)), 0)
                        'average value
                        'dbl_average_value = dbl_average_value + CDbl((CDbl(str_performance_data_array.GetValue(int_row_counter, 1)) * dbl_unit_factor) / (CDbl(str_performance_data_array.GetValue(int_row_counter, 2)) * dbl_unit_factor))
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If 0 > dbl_max_value Then
                            dbl_max_value = 0
                        End If
                    End If
                Next

                ' average values and max values
                If dbl_average_value > 0 Or dbl_max_value > 0 Then
                    If dbl_average_value > 0 Then
                        If dbl_max_value > 0 Then
                            series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & ", Max. " & Math.Round(dbl_max_value, 2) & "]"
                        Else
                            series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & "]"
                        End If
                    Else
                        If dbl_max_value > 0 Then
                            series.Name = series.Name & " [Max. " & Math.Round(dbl_max_value, 2) & "]"
                        End If
                    End If
                    dbl_average_value = Nothing
                    dbl_max_value = Nothing
                    int_average_value_counter = Nothing
                End If

                'if there are minus values in the series
                If ToolStripMenuItem_hide_error_numbers.Checked = False Then
                    If Not CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, 1)) Is Nothing Then
                        series.Name = series.Name & " [Errors: " & CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, 1)) & "]"
                    End If
                End If


                'Add the series to the chart_output control.
                NewChart.Series.Add(series)

                'update the chart after each series
                'NewChart.Update()
                series = Nothing

            Case Else ' if "" (empty)

                For i = 1 To UBound(str_performance_data_array, 2) Step 1

                    series = New Series

                    series.ChartArea = "ChartArea1"

                    ' Show transparent color
                    'to do
                    'colors of different series have to be different

                    'series.Color = Color.DarkCyan

                    series.BorderWidth = 1
                    series.IsVisibleInLegend = True

                    'Progress bar
                    Label_progress_chart.Update()
                    ProgressBar_chart.Value = CInt(Math.Abs(100 / (UBound(str_performance_data_array, 2)) * (i)))
                    ProgressBar_chart.Update()

                    '-----------------------
                    'series legend name
                    If InStr(nodename_full_path, str_backend) <> 0 Then 'backend
                        series.Name = Strings.Left(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), 7) & " <-> " & Strings.Right(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), 7)

                    ElseIf InStr(nodename_full_path, str_processor) <> 0 Then 'processor

                        Select Case str_storage_system
                            Case str_storage_type_raid800
                                If str_treeview_level = "2" Then
                                    'treeview level 2
                                    series.Name = CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i))
                                Else
                                    'other treeview level
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_vspg1000_mp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))
                                End If
                            Case str_storage_type_raid700
                                If str_treeview_level = "2" Then
                                    'treeview level 2
                                    series.Name = CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i))
                                Else
                                    'other treeview level
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_vsp_mp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))
                                End If

                            Case str_storage_type_vsp5000
                                series.Name = str_get_name_out_of_an_arraylist(arraylist_vsp5000_mp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))

                            Case str_storage_type_raid750, str_storage_type_hm800, str_storage_type_vsp5000
                                series.Name = str_get_name_out_of_an_arraylist(arraylist_husvm_mp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))

                            Case str_storage_type_raid600
                                'is it a usp-v or a usp-vm
                                If InStr(Strings.Right(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), 3), "-") > 0 Then
                                    'usp-vm
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))
                                Else
                                    'usp-v
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), CChar(","))
                                End If
                            Case str_storage_type_df800
                                series.Name = CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i))
                        End Select

                    ElseIf InStr(nodename_full_path, str_lu) <> 0 And InStr(str_tabtitle, "Disk2Cache Transfer Ops") <> 0 Then 'disk 2 cache operations
                        'lu level 3 D2C series name change to a more understandable name
                        If InStr(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), "D2CS") <> 0 Then
                            series.Name = Strings.Replace(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), "D2CS", "Disk2Cache Sequential")
                        Else
                            series.Name = Strings.Replace(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), "D2CR", "Disk2Cache Random")
                        End If
                    ElseIf InStr(nodename_full_path, str_truecopy) <> 0 Then

                        'are we in the remote copy transfers
                        If InStr(nodename_full_path, str_truecopy_chart_name_remotetransfer) <> 0 Then
                            'get rid of the kb unit "(KB/s)" in the series name
                            series.Name = Strings.Replace(CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i)), "(KB/s)", "")

                        Else
                            'standard naming
                            series.Name = CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i))

                        End If


                    Else
                        series.Name = CStr(str_performance_data_array.GetValue(int_how_many_descriptor_lines, i))
                    End If
                    '-----------------------

                    Select Case csv_extract(what_chart_type, i, CChar(";"))
                        Case "fastline" 'linegraph
                            series.ChartType = SeriesChartType.FastLine

                        Case "stackedarea" 'stacked graph
                            series.ChartType = SeriesChartType.StackedArea

                        Case Else
                            'this is the default if nothing else set
                            series.ChartType = SeriesChartType.FastLine

                    End Select

                    'filter
                    'NewChart.DataManipulator.FilterTopN(500, series)

                    'set the average value to zero
                    dbl_average_value = 0
                    dbl_max_value = 0
                    int_average_value_counter = 0

                    Dim str_previous_date As String = ""

                    For int_row_counter As Integer = int_how_many_descriptor_lines + 1 To UBound(str_performance_data_array, 1) Step 1

                        'fill in the missing date series points
                        If Not str_previous_date = "" Then

                            Dim list_missing_date_elements As New List(Of String)
                            list_missing_date_elements = list_create_missing_date_elements(str_previous_date, CStr(str_performance_data_array.GetValue(int_row_counter, 0)), CStr(str_performance_data_array.GetValue(4, i)))

                            If Not list_missing_date_elements.Count = 0 Then
                                For Each str_date_element As String In list_missing_date_elements
                                    series.Points.AddXY(str_date_element, CDbl(0))
                                Next
                            End If

                            'clean up
                            list_missing_date_elements = Nothing

                        End If

                        'series point
                        series.Points.AddXY(CStr(str_performance_data_array.GetValue(int_row_counter, 0)), CDbl(CDbl(str_performance_data_array.GetValue(int_row_counter, i))) * dbl_unit_factor)

                        'average value
                        dbl_average_value = dbl_average_value + CDbl(CDbl(str_performance_data_array.GetValue(int_row_counter, i)) * dbl_unit_factor)
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If CDbl(CDbl(str_performance_data_array.GetValue(int_row_counter, i)) * dbl_unit_factor) > dbl_max_value Then
                            dbl_max_value = CDbl(CDbl(str_performance_data_array.GetValue(int_row_counter, i)) * dbl_unit_factor)
                        End If

                        str_previous_date = CStr(str_performance_data_array.GetValue(int_row_counter, 0))
                    Next
                    str_previous_date = Nothing

                    ' average values and max values
                    If dbl_average_value > 0 Or dbl_max_value > 0 Then
                        If dbl_average_value > 0 Then
                            If dbl_max_value > 0 Then
                                series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & ", Max. " & Math.Round(dbl_max_value, 2) & "]"
                            Else
                                series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & "]"
                            End If
                        Else
                            If dbl_max_value > 0 Then
                                series.Name = series.Name & " [Max. " & Math.Round(dbl_max_value, 2) & "]"
                            End If
                        End If
                        dbl_average_value = Nothing
                        dbl_max_value = Nothing
                        int_average_value_counter = Nothing
                    End If

                    'if there are minus values in the series
                    If ToolStripMenuItem_hide_error_numbers.Checked = False Then
                        If Not CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, i)) Is Nothing Then
                            series.Name = series.Name & " [Errors: " & CStr(str_performance_data_array.GetValue(int_array_descritor_line_count - 2, i)) & "]"
                        End If
                    End If
                    'Add the series to the chart_output control.
                    NewChart.Series.Add(series)

                    'update the chart after each series
                    'NewChart.Update()
                    series = Nothing

                Next

        End Select



        '    'add stacked green/amber areas
        '    Dim series_1 As New Series
        '    'green
        '    If CheckBox_scalability.Checked = True Then
        '        series_1.ChartArea = "ChartArea1"
        '        'series legend name
        '        series_1.Name = "Green"
        '        ' Disable legend item for the first series
        '        series_1.IsVisibleInLegend = False
        '        'Change to a are graph
        '        series_1.ChartType = SeriesChartType.StackedArea
        '        ' Show transparent color
        '        series_1.Color = Color.FromArgb(80, Color.Green)
        '        'thikness of line
        '        series_1.BorderWidth = 1
        '        For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1
        '            series_1.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), NumericUpDown_green.Value)
        '        Next
        '        'Add the series to the chart_output control.
        '        NewChart.Series.Add(series_1)
        '        series_1 = Nothing

        '        'amber
        '        series_1 = New Series
        '        series_1.ChartArea = "ChartArea1"
        '        'series legend name
        '        series_1.Name = "Amber"
        '        ' Disable legend item for the first series
        '        series_1.IsVisibleInLegend = False
        '        'Change to a are graph
        '        series_1.ChartType = SeriesChartType.StackedArea
        '        ' Show transparent color
        '        series_1.Color = Color.FromArgb(80, Color.Orange)
        '        'thikness of line
        '        series_1.BorderWidth = 1
        '        For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1
        '            series_1.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), NumericUpDown_amber.Value - NumericUpDown_green.Value)
        '        Next
        '        'Add the series to the chart_output control.
        '        NewChart.Series.Add(series_1)
        '        series_1 = Nothing
        '    End If

        'Progress bar
        Label_progress_chart.Visible = False
        Label_progress_chart.Update()
        ProgressBar_chart.Visible = False
        ProgressBar_chart.Update()

        NewChart.Update()

        'series_1 = Nothing
        NewChart = Nothing
        NewTab = Nothing
        str_performance_data_array = Nothing

        'otherwise if you loose focus on the application it does not show any progress and it seems to hang
        Application.DoEvents()

        'reset the negative values that are found in the selected series
        str_negative_values_in_series_values = Nothing

    End Sub
    Private Sub create_chart(ByVal chart_title As String, ByVal nodename_full_path As String, ByVal int_y_axis_max_value As Integer, ByVal dbl_unit_factor As Double, ByVal str_y_axis_title As String, ByVal str_tabtitle As String, ByVal str_performance_data_array As String(), ByVal what_chart_type As String, ByVal what_to_do As String)
        'path_and_filename -> c:\program files\test.csv

        'what_to_look_for -> this string used to filter the elements that will be used (instring filter. example "1-1" takes the values for the descriptor "1-1"
        ' "1-1,1-2" takes the values for both descriptors "1-1" and "1-2"

        'if the series only contains zeros it is not shown in the graph
        'true -> all values are zero -> do not show the graph
        'false -> not all values are zero -> show the graph
        'Dim all_values_are_zero As Boolean = Nothing

        'calculate the average of the series
        Dim dbl_average_value As Double = Nothing
        Dim int_average_value_counter As Integer = Nothing

        'calculate the max of the series
        Dim dbl_max_value As Double = Nothing

        'if the files do not exist
        If str_performance_data_array(0) = "-1" Then
            Exit Sub
        End If

        'tab index
        Dim int_tabindex As Integer = Nothing

        'chart variables
        Dim NewTab As TabPage = Nothing
        Dim NewChart As Chart = Nothing

        'Progress bar
        Label_progress_chart.Text = "Creating chart"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = 0
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()

        'set tab index number
        int_tabindex = TabControl_chart1.TabCount

        '*********************************************************
        'tabcontrol properties

        'tabs are shown in multiple lines if needed
        Me.TabControl_chart1.Multiline = True

        'set tabindex
        TabIndex = int_tabindex
        'create new tab
        NewTab = New TabPage
        Me.TabControl_chart1.Controls.Add(NewTab)
        Me.TabControl_chart1.TabPages.Item(int_tabindex).Name = "tab" & CStr(int_tabindex)
        'set the tab text
        Me.TabControl_chart1.TabPages.Item(int_tabindex).Text = str_tabtitle

        '*********************************************************
        'chart properties

        'create new chart
        NewChart = New Chart
        NewTab.Controls.Add(NewChart)
        'chart size and position
        NewChart.Location = New System.Drawing.Point(0, 0)
        NewChart.Size = New System.Drawing.Size(CType(TabControl_chart1.Size, Point))
        NewChart.Anchor = AnchorStyles.Left Or AnchorStyles.Right Or AnchorStyles.Top Or AnchorStyles.Bottom
        NewChart.Visible = True

        ' format the chart back
        NewChart.BackColor = Color.Gray
        NewChart.BackSecondaryColor = Color.WhiteSmoke
        NewChart.BackGradientStyle = GradientStyle.DiagonalRight
        NewChart.BorderlineDashStyle = ChartDashStyle.Solid
        NewChart.BorderSkin.SkinStyle = BorderSkinStyle.Emboss
        NewChart.BorderlineColor = Color.Gray
        ' format the chart area
        NewChart.ChartAreas.Add("ChartArea1")
        NewChart.ChartAreas("ChartArea1").BackColor = Color.White

        ' Set automatic zooming
        NewChart.ChartAreas("ChartArea1").AxisX.ScaleView.Zoomable = True
        NewChart.ChartAreas("ChartArea1").AxisY.ScaleView.Zoomable = True
        ' Enable range selection and zooming end user interface
        NewChart.ChartAreas("ChartArea1").CursorX.IsUserEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorX.IsUserSelectionEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorY.IsUserEnabled = True
        NewChart.ChartAreas("ChartArea1").CursorY.IsUserSelectionEnabled = True

        ' Disable X axis margin
        NewChart.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False

        ' Enable X and Y axis labels automatic fitting
        NewChart.ChartAreas("ChartArea1").AxisX.IsLabelAutoFit = True
        NewChart.ChartAreas("ChartArea1").AxisY.IsLabelAutoFit = True

        ' Set X and Y axis automatic fitting style
        NewChart.ChartAreas("ChartArea1").AxisX.LabelAutoFitStyle =
        LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.IncreaseFont Or LabelAutoFitStyles.WordWrap
        NewChart.ChartAreas("ChartArea1").AxisY.LabelAutoFitStyle =
        LabelAutoFitStyles.DecreaseFont Or LabelAutoFitStyles.IncreaseFont Or LabelAutoFitStyles.WordWrap

        'how the x and y axis values show up in intervals
        'NewChart.ChartAreas("ChartArea1").AxisX.Interval = 50
        NewChart.ChartAreas("ChartArea1").AxisX.MajorGrid.LineColor = Color.LightGray
        'chart_output.ChartAreas("ChartArea1").AxisX.IntervalType = DateTimeIntervalType.Hours
        'NewChart.ChartAreas("ChartArea1").AxisY.Interval = 5
        NewChart.ChartAreas("ChartArea1").AxisY.MajorGrid.LineColor = Color.LightGray

        ' Set  axis title
        NewChart.ChartAreas("ChartArea1").AxisX.Title = "Time [min]"
        NewChart.ChartAreas("ChartArea1").AxisY.Title = str_y_axis_title
        ' Set Title font
        NewChart.ChartAreas("ChartArea1").AxisX.TitleFont = New Font("verdana", 10)
        NewChart.ChartAreas("ChartArea1").AxisY.TitleFont = New Font("verdana", 10)
        ' Set Title color
        NewChart.ChartAreas("ChartArea1").AxisX.TitleForeColor = Color.Black
        NewChart.ChartAreas("ChartArea1").AxisY.TitleForeColor = Color.Black

        'chartname
        NewChart.Name = "chart" & CStr(int_tabindex)
        'right mouse click context menu
        NewChart.ContextMenuStrip = ContextMenuStrip_chart

        ' add handler to catch the mosemove afterwards to make the chart interactive (see sub  )
        AddHandler NewChart.MouseMove, AddressOf Chart_MouseMove
        AddHandler NewChart.MouseDown, AddressOf delete_series_MouseDown

        ' Show as 3D
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Enable3D = True
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.IsClustered = True
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Rotation = 30
        'chart_output.ChartAreas("ChartArea1").Area3DStyle.Inclination = 30

        ' Set Legend's visual attributes
        NewChart.Legends.Add("Legend1")
        NewChart.Legends("Legend1").BackColor = Color.White
        NewChart.Legends("Legend1").BackSecondaryColor = Color.Transparent
        NewChart.Legends("Legend1").BackGradientStyle = GradientStyle.None
        NewChart.Legends("Legend1").BorderColor = Color.Gray
        NewChart.Legends("Legend1").BorderWidth = 2
        NewChart.Legends("Legend1").BorderDashStyle = ChartDashStyle.Solid
        NewChart.Legends("Legend1").ShadowOffset = 2
        NewChart.Legends("Legend1").LegendItemOrder = LegendItemOrder.ReversedSeriesOrder

        '******************************************
        'create the series

        'main title
        NewChart.Titles.Add(chart_title & " SN: " & csv_extract(str_performance_data_array(0), 1, CChar(",")))
        NewChart.Titles(0).Font = New Font("verdana", 16)

        'subtitle
        NewChart.Titles.Add(csv_extract(str_performance_data_array(0), 2, CChar(",")))
        NewChart.Titles(1).Font = New Font("verdana", 10)

        'subsubtitle
        'If Not str_negative_values_in_series_values = Nothing Then
        NewChart.Titles.Add(str_negative_values_in_series_start & str_negative_values_in_series_values & str_negative_values_in_series_end)
        NewChart.Titles(2).Font = New Font("verdana", 8)
        'End If


        'counter: which series number is it?
        Dim int_series_number As Integer = 1
        Dim int_series_counter As Integer = 0
        Dim series As Series = Nothing

        Select Case what_to_do

            Case "div" 'blocksize

                series = New Series
                int_series_counter = int_series_counter + 1

                series.ChartArea = "ChartArea1"

                ' Show transparent color
                'to do
                'colors of different series have to be different

                'series.Color = Color.DarkCyan

                series.BorderWidth = 1

                'series legend name
                If InStr(str_y_axis_title, "block size") <> 0 Then 'blocksize
                    series.Name = str_y_axis_title
                Else
                    'take the first name
                    series.Name = csv_extract(str_performance_data_array(1), 2, CChar(","))
                End If

                Select Case csv_extract(what_chart_type, int_series_number, CChar(";"))
                    Case "fastline" 'linegraph
                        series.ChartType = SeriesChartType.FastLine

                    Case "stackedarea" 'stacked graph
                        series.ChartType = SeriesChartType.StackedArea

                    Case Else
                        'this is the default if nothing else set
                        series.ChartType = SeriesChartType.FastLine

                End Select

                'filter
                'NewChart.DataManipulator.FilterTopN(500, series)

                Dim dbl_calculation_value As Double = 0

                For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1

                    dbl_calculation_value = CDbl(csv_extract(str_performance_data_array(int_row_counter), 2, CChar(",")))

                    'calculate
                    For i = 3 To csv_length(str_performance_data_array(1), CChar(",")) Step 1
                        'Progress bar
                        Label_progress_chart.Update()
                        ProgressBar_chart.Value = CInt(Math.Abs(100 / (csv_length(str_performance_data_array(1), CChar(",")) - 1) * (i - 1)))
                        ProgressBar_chart.Update()

                        If csv_extract(str_performance_data_array(int_row_counter), i, CChar(",")) = "0" Then
                            dbl_calculation_value = 0
                        Else
                            dbl_calculation_value = CDbl(csv_extract(str_performance_data_array(int_row_counter), i, CChar(","))) / dbl_calculation_value
                        End If

                    Next

                    series.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), dbl_calculation_value * dbl_unit_factor)
                Next

                'Add the series to the chart_output control.
                NewChart.Series.Add(series)

                'update the chart after each series
                'NewChart.Update()
                series = Nothing
                int_series_number = Nothing
                int_series_counter = Nothing

            Case str_what_to_do_lu_response
                Dim series_total As Series = Nothing
                Dim series_read As Series = Nothing
                Dim series_write As Series = Nothing


                series_total = New Series
                series_read = New Series
                series_write = New Series

                series_total.ChartArea = "ChartArea1"
                series_read.ChartArea = "ChartArea1"
                series_write.ChartArea = "ChartArea1"

                series_total.BorderWidth = 1
                series_read.BorderWidth = 1
                series_write.BorderWidth = 1

                'series legend name
                series_total.Name = "Total Response Time"
                series_read.Name = "Read Response Time"
                series_write.Name = "Write Response Time"

                series_total.ChartType = SeriesChartType.FastLine
                series_read.ChartType = SeriesChartType.FastLine
                series_write.ChartType = SeriesChartType.FastLine

                Dim dbl_total_count As Double = Nothing
                Dim dbl_total_count_read As Double = Nothing
                Dim dbl_total_count_write As Double = Nothing
                Dim dbl_write_job_count As Double = Nothing
                Dim dbl_write_hit_count As Double = Nothing
                Dim dbl_write_miss_count As Double = Nothing
                Dim dbl_read_job_count As Double = Nothing
                Dim dbl_read_hit_count As Double = Nothing
                Dim dbl_read_miss_count As Double = Nothing
                Dim dbl_write_job_response As Double = Nothing
                Dim dbl_write_hit_response As Double = Nothing
                Dim dbl_write_miss_response As Double = Nothing
                Dim dbl_read_job_response As Double = Nothing
                Dim dbl_read_hit_response As Double = Nothing
                Dim dbl_read_miss_response As Double = Nothing

                For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1

                    '1"time, 
                    '2LU0003 Write CMD Job Count,3LU0003 Write CMD Job Time(microsec.),
                    '4LU0003 Write CMD Hit Count,5LU0003 Write CMD Hit Time(microsec.),
                    '6LU0003 Write CMD Miss Count,7LU0003 Write CMD Miss Time(microsec.),
                    '8LU0003 Read CMD Job Count,9LU0003 Read CMD Job Time(microsec.),'
                    '10LU0003 Read CMD Hit Count,11LU0003 Read CMD Hit Time(microsec.),'
                    '12LU0003 Read CMD Miss Count,13LU0003 Read CMD Miss Time(microsec.)"
                    dbl_write_job_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 2, CChar(",")))
                    dbl_write_hit_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 4, CChar(",")))
                    dbl_write_miss_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 6, CChar(",")))
                    dbl_read_job_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 8, CChar(",")))
                    dbl_read_hit_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 10, CChar(",")))
                    dbl_read_miss_count = CDbl(csv_extract(str_performance_data_array(int_row_counter), 12, CChar(",")))

                    dbl_write_job_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 3, CChar(",")))
                    dbl_write_hit_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 5, CChar(",")))
                    dbl_write_miss_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 7, CChar(",")))
                    dbl_read_job_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 9, CChar(",")))
                    dbl_read_hit_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 11, CChar(",")))
                    dbl_read_miss_response = CDbl(csv_extract(str_performance_data_array(int_row_counter), 13, CChar(",")))

                    dbl_total_count_read = CDbl(csv_extract(str_performance_data_array(int_row_counter), 8, CChar(","))) + CDbl(csv_extract(str_performance_data_array(int_row_counter), 10, CChar(","))) + CDbl(csv_extract(str_performance_data_array(int_row_counter), 12, CChar(",")))
                    dbl_total_count_write = CDbl(csv_extract(str_performance_data_array(int_row_counter), 2, CChar(","))) + CDbl(csv_extract(str_performance_data_array(int_row_counter), 4, CChar(","))) + CDbl(csv_extract(str_performance_data_array(int_row_counter), 6, CChar(",")))
                    dbl_total_count = dbl_total_count_read + dbl_total_count_write

                    If dbl_total_count = 0 Then
                        'io count is zero -> response is zero
                        series_total.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), 0)
                        series_read.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), 0)
                        series_write.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), 0)

                    Else
                        'counter is not zero
                        series_total.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), (1 / dbl_total_count * ((dbl_write_job_count * dbl_write_job_response) + (dbl_write_miss_count * dbl_write_miss_response) + (dbl_write_hit_count * dbl_write_hit_response) + (dbl_read_job_count * dbl_read_job_response) + (dbl_read_miss_count * dbl_read_miss_response) + (dbl_read_hit_count * dbl_read_hit_response))) * dbl_unit_factor)
                    End If

                    'write response
                    If dbl_total_count_write = 0 Then
                        'counter is 0
                        series_write.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), 0)
                    Else
                        'counter is not zero
                        series_write.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), (1 / dbl_total_count_write * ((dbl_write_job_count * dbl_write_job_response) + (dbl_write_miss_count * dbl_write_miss_response) + (dbl_write_hit_count * dbl_write_hit_response))) * dbl_unit_factor)
                    End If

                    'read response
                    If dbl_total_count_read = 0 Then
                        'counter is 0
                        series_read.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), 0)
                    Else
                        'counter is not zero
                        series_read.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), (1 / dbl_total_count_read * ((dbl_read_job_count * dbl_read_job_response) + (dbl_read_miss_count * dbl_read_miss_response) + (dbl_read_hit_count * dbl_read_hit_response))) * dbl_unit_factor)
                    End If

                    dbl_write_job_count = Nothing
                    dbl_write_hit_count = Nothing
                    dbl_write_miss_count = Nothing
                    dbl_read_job_count = Nothing
                    dbl_read_hit_count = Nothing
                    dbl_read_miss_count = Nothing
                    dbl_write_job_response = Nothing
                    dbl_write_hit_response = Nothing
                    dbl_write_miss_response = Nothing
                    dbl_read_job_response = Nothing
                    dbl_read_hit_response = Nothing
                    dbl_read_miss_response = Nothing

                Next

                'Add the series to the chart_output control.
                NewChart.Series.Add(series_total)
                NewChart.Series.Add(series_write)
                NewChart.Series.Add(series_read)

                'update the chart after each series
                'NewChart.Update()
                series_total = Nothing
                series_write = Nothing
                series_read = Nothing


            Case Else ' if "" (empty)

                For i = 2 To csv_length(str_performance_data_array(1), CChar(",")) Step 1

                    series = New Series

                    series.ChartArea = "ChartArea1"

                    ' Show transparent color
                    'to do
                    'colors of different series have to be different

                    'series.Color = Color.DarkCyan

                    series.BorderWidth = 1

                    'Progress bar
                    Label_progress_chart.Update()
                    ProgressBar_chart.Value = CInt(Math.Abs(100 / (csv_length(str_performance_data_array(1), CChar(",")) - 1) * (i - 1)))
                    ProgressBar_chart.Update()

                    'series legend name
                    If InStr(nodename_full_path, str_backend) <> 0 Then 'backend
                        series.Name = Strings.Left(csv_extract(str_performance_data_array(1), i, CChar(",")), 7) & " <-> " & Strings.Right(csv_extract(str_performance_data_array(1), i, CChar(",")), 7)

                    ElseIf InStr(nodename_full_path, "blocksize") <> 0 Then 'processor
                        series.Name = nodename_full_path

                    ElseIf InStr(nodename_full_path, str_processor) <> 0 Then 'processor

                        Select Case str_storage_system
                            Case str_storage_type_raid700
                                series.Name = str_get_name_out_of_an_arraylist(arraylist_vsp_mp, csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(","))
                            Case str_storage_type_raid750
                                series.Name = str_get_name_out_of_an_arraylist(arraylist_husvm_mp, csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(","))
                            Case str_storage_type_raid600
                                'is it a usp-v or a usp-vm
                                If InStr(Strings.Right(csv_extract(str_performance_data_array(1), i, CChar(",")), 3), "-") > 0 Then
                                    'usp-vm
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(","))
                                Else
                                    'usp-v
                                    series.Name = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(","))
                                End If

                            Case str_storage_type_df800
                                series.Name = csv_extract(str_performance_data_array(1), i, CChar(","))
                        End Select

                    ElseIf InStr(nodename_full_path, str_lu) <> 0 And InStr(str_tabtitle, "Disk2Cache Transfer Ops") <> 0 Then
                        'lu level 3 D2C series name change to a more understandable name
                        If InStr(csv_extract(str_performance_data_array(1), i, CChar(",")), "D2CS") <> 0 Then
                            series.Name = Strings.Replace(csv_extract(str_performance_data_array(1), i, CChar(",")), "D2CS", "Disk2Cache Sequential")
                        Else
                            series.Name = Strings.Replace(csv_extract(str_performance_data_array(1), i, CChar(",")), "D2CR", "Disk2Cache Random")
                        End If
                    Else
                        series.Name = csv_extract(str_performance_data_array(1), i, CChar(","))
                    End If

                    Select Case csv_extract(what_chart_type, i - 1, CChar(";"))
                        Case "fastline" 'linegraph
                            series.ChartType = SeriesChartType.FastLine

                        Case "stackedarea" 'stacked graph
                            series.ChartType = SeriesChartType.StackedArea

                        Case Else
                            'this is the default if nothing else set
                            series.ChartType = SeriesChartType.FastLine

                    End Select

                    'filter
                    'NewChart.DataManipulator.FilterTopN(500, series)

                    'set the average value to zero
                    dbl_average_value = 0
                    dbl_max_value = 0
                    int_average_value_counter = 0

                    For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1
                        series.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), CDbl(CDbl(csv_extract(str_performance_data_array(int_row_counter), csv_get_position(str_performance_data_array(1), csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(",")), CChar(","))) * dbl_unit_factor))

                        'average value
                        dbl_average_value = dbl_average_value + CDbl(CDbl(csv_extract(str_performance_data_array(int_row_counter), csv_get_position(str_performance_data_array(1), csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(",")), CChar(","))) * dbl_unit_factor)
                        int_average_value_counter = int_average_value_counter + 1

                        'max value
                        If CDbl(CDbl(csv_extract(str_performance_data_array(int_row_counter), csv_get_position(str_performance_data_array(1), csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(",")), CChar(","))) * dbl_unit_factor) > dbl_max_value Then
                            dbl_max_value = CDbl(CDbl(csv_extract(str_performance_data_array(int_row_counter), csv_get_position(str_performance_data_array(1), csv_extract(str_performance_data_array(1), i, CChar(",")), CChar(",")), CChar(","))) * dbl_unit_factor)
                        End If

                    Next

                    If dbl_average_value > 0 Or dbl_max_value > 0 Then
                        If dbl_average_value > 0 Then
                            If dbl_max_value > 0 Then
                                series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & ", Max. " & Math.Round(dbl_max_value, 2) & "]"
                            Else
                                series.Name = series.Name & " [Avg. " & CStr(Math.Round(dbl_average_value / int_average_value_counter, 2)) & "]"
                            End If
                        Else
                            If dbl_max_value > 0 Then
                                series.Name = series.Name & " [Max. " & Math.Round(dbl_max_value, 2) & "]"
                            End If
                        End If
                        dbl_average_value = Nothing
                        dbl_max_value = Nothing
                        int_average_value_counter = Nothing
                    End If

                    'Add the series to the chart_output control.
                    NewChart.Series.Add(series)

                    'update the chart after each series
                    'NewChart.Update()
                    series = Nothing

                    int_series_number = int_series_number + 1

                Next

                int_series_number = Nothing

        End Select



        'add stacked green/amber areas
        Dim series_1 As New Series
        'green
        If CheckBox_scalability.Checked = True Then
            series_1.ChartArea = "ChartArea1"
            'series legend name
            series_1.Name = "Green"
            ' Disable legend item for the first series
            series_1.IsVisibleInLegend = False
            'Change to a are graph
            series_1.ChartType = SeriesChartType.StackedArea
            ' Show transparent color
            series_1.Color = Color.FromArgb(80, Color.Green)
            'thikness of line
            series_1.BorderWidth = 1
            For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1
                series_1.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), NumericUpDown_green.Value)
            Next
            'Add the series to the chart_output control.
            NewChart.Series.Add(series_1)
            series_1 = Nothing

            'amber
            series_1 = New Series
            series_1.ChartArea = "ChartArea1"
            'series legend name
            series_1.Name = "Amber"
            ' Disable legend item for the first series
            series_1.IsVisibleInLegend = False
            'Change to a are graph
            series_1.ChartType = SeriesChartType.StackedArea
            ' Show transparent color
            series_1.Color = Color.FromArgb(80, Color.Orange)
            'thikness of line
            series_1.BorderWidth = 1
            For int_row_counter = 2 To str_performance_data_array.Length - 1 Step 1
                series_1.Points.AddXY(csv_extract(str_performance_data_array(int_row_counter), 1, CChar(",")), NumericUpDown_amber.Value - NumericUpDown_green.Value)
            Next
            'Add the series to the chart_output control.
            NewChart.Series.Add(series_1)
            series_1 = Nothing
        End If

        'Progress bar
        Label_progress_chart.Visible = False
        Label_progress_chart.Update()
        ProgressBar_chart.Visible = False
        ProgressBar_chart.Update()

        NewChart.Update()

        series_1 = Nothing
        NewChart = Nothing
        NewTab = Nothing
        str_performance_data_array = Nothing

        'reset the negative values that are found in the selected series
        str_negative_values_in_series_values = Nothing

    End Sub

    'what charts to show
    'raid
    Private Sub raid_collect_data_and_show_the_charts_needed(ByVal str_storage_type As String, ByVal str_performance_data_type As String, ByVal str_file_paths As String(), ByVal str_elements As String(), ByVal str_treeview_level As String, ByVal str_treeview_node_fullpath As String, ByVal str_what_type_of_graph As String, Optional ByVal str_max_min_average As String = "max", Optional ByVal bool_some_selected As Boolean = False)
        Dim str_performance_data_array As String() = Nothing
        Dim array_str_performance_data_array As Array = Nothing
        Dim str_temp As String = Nothing

        'needed for calculations
        Dim str_formula As String = Nothing
        Dim array_temp As Array = Nothing

        Dim date_datetimepicker_start_performancedate_value As Date = DateTimePicker_start_performancedate.Value
        Dim date_datetimepicker_end_performancedate_value As Date = DateTimePicker_end_performancedate.Value


        Select Case str_performance_data_type
            Case str_processor
                'Processor
                '------------------------------------------------------------------------------------
                Select Case str_treeview_level
                    Case "0"
                        Select Case str_storage_type
                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                'get the performance data (MPB-1MA.MP00-1MA)
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CPU Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " MP Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_storage_type_raid600

                                'get the performance data
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHP Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CHP Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End Select
                        array_str_performance_data_array = Nothing

                    Case "1"

                        Select Case str_storage_type
                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CPU Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CPU Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_storage_type_raid600

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHP Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CHP Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End Select
                        array_str_performance_data_array = Nothing

                    Case "2"

                        Select Case str_storage_type
                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800

                                If InStr(str_performance_data_available, str_performance_data_available_mppk, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                                    If Not str_file_paths.Length > 1 Then

                                        'mp data
                                        'get the performance data 
                                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                        'show graph
                                        Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CPU Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CPU Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                        array_str_performance_data_array = Nothing

                                    Else

                                        'get the performance data mppk


                                        'collect data
                                        array_str_performance_data_array = array_raid_performance_data_put_in_array_mppk(str_file_paths(0), str_file_paths(1), str_elements(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, 0, 100, int_array_descritor_line_count)
                                        'show graph
                                        'to get a stacked area graph of all series you have to set the chart type for each series
                                        str_temp = Nothing
                                        For i As Integer = 0 To UBound(array_str_performance_data_array, 2) - 1 Step 1
                                            If IsNothing(str_temp) Then
                                                str_temp = "stackedarea"
                                            Else
                                                str_temp = str_temp & ";" & "stackedarea"
                                            End If
                                        Next
                                        Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.SelectedItem) & " LDEVs busy of CPU " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CDbl(str_treeview_level) - 1)) & " and Core " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), str_treeview_node_fullpath, str_treeview_level, 100, 1, "CPU Busy [%] in relation to the CPU Busy [%]", "Top " & CStr(ToolStripComboBox_topx_value.SelectedItem) & " LDEVs busy of CPU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), array_str_performance_data_array, str_temp, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                        str_temp = Nothing

                                        'mppk type graph
                                        'get the performance data mppk
                                        array_str_performance_data_array = array_raid_performance_data_put_in_array_mppk(str_file_paths(0), str_file_paths(1), str_elements(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, 0, 100, int_array_descritor_line_count, "type")
                                        'to get a stacked area graph of all series you have to set the chart type for each series
                                        str_temp = Nothing
                                        For i As Integer = 0 To UBound(array_str_performance_data_array, 2) - 1 Step 1
                                            If IsNothing(str_temp) Then
                                                str_temp = "stackedarea"
                                            Else
                                                str_temp = str_temp & ";" & "stackedarea"
                                            End If
                                        Next
                                        'show graph
                                        Call array_create_chart("Busy types of CPU " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CDbl(str_treeview_level) - 1)) & " and Core " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), str_treeview_node_fullpath, str_treeview_level, 0, 1, "CPU Busy [%] in relation to the CPU Busy [%]", "types busy of CPU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " by type", array_str_performance_data_array, str_temp, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                        str_temp = Nothing

                                    End If

                                Else

                                    'get the performance data mp 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CPU Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CPU Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                End If

                            Case str_storage_type_raid600

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_processor, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHP Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CHP Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End Select

                    Case "3"
                        'NOP
                End Select
                array_str_performance_data_array = Nothing

            Case str_cache
                'Cache
                '------------------------------------------------------------------------------------

                Select Case str_treeview_level
                    Case "0"

                        If Not str_storage_type = str_storage_type_raid600 Then
                            'Cache Write Pending Rate [%]
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Cache Write Pending Rate [%]", str_treeview_node_fullpath, str_treeview_level, 75, 1, "Cache W'Pending Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " W'Pending Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            'Cache Allocation [MB]
                            Select Case str_storage_type
                                Case str_storage_type_G800, str_storage_type_G400_G600, str_storage_type_G200, str_storage_type_hm800
                                    'change the file path from "PHY_Short_Write_Pending_Rate_MPB-1MA.csv" to "PHY_Short_Cache_Allocate_MPB-1MA.csv"
                                    For i As Integer = 0 To str_file_paths.Length - 1
                                        str_file_paths(i) = Strings.Replace(str_file_paths(i), "Write_Pending_Rate", "Cache_Allocate")
                                    Next
                                Case Else
                                    'change the file path from "PHY_Short_Write_Pending_Rate_MPB-1MA.csv" to "PHY_Short_Cache_Allocate_MPB-1MA.csv"
                                    For i As Integer = 0 To str_file_paths.Length - 1
                                        str_file_paths(i) = Strings.Replace(str_file_paths(i), "Short_Write_Pending_Rate", "Cache_Allocate")
                                    Next
                            End Select
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            Call array_create_chart("Cache Allocation [MB]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Cache Allocation [MB]", "Cache Allocation", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            'Cache Usage Rate [%]

                            Select Case str_storage_type
                                Case str_storage_type_G800, str_storage_type_G400_G600, str_storage_type_G200, str_storage_type_hm800
                                    'change the file path from "PHY_Short_Cache_Allocate_MPB-1MA.csv" to "PHY_Short_Cache_Usage_Rate_MPB-1MA.csv"
                                    For i As Integer = 0 To str_file_paths.Length - 1
                                        str_file_paths(i) = Strings.Replace(str_file_paths(i), "Cache_Allocate", "Cache_Usage_Rate")
                                    Next
                                Case Else
                                    'change the file path from "PHY_Short_Cache_Allocate_MPB-1MA.csv" to "PHY_Short_Cache_Usage_Rate_MPB-1MA.csv"
                                    For i As Integer = 0 To str_file_paths.Length - 1
                                        str_file_paths(i) = Strings.Replace(str_file_paths(i), "Cache_Allocate", "Short_Cache_Usage_Rate")
                                    Next
                            End Select
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            Call array_create_chart("Cache Usage Rate [%]", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache Usage Rate [%]", "Cache Usage Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        Else
                            'Cache Write Pending Rate [%]
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Cache Write Pending Rate [%]", str_treeview_node_fullpath, str_treeview_level, 75, 1, "Cache W'Pending Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " W'Pending Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            'Cache Usage Rate [%]
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            Call array_create_chart("Cache Usage Rate [%]", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache Usage Rate [%]", "Cache Usage Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "1"

                        Select Case str_storage_system
                            Case str_storage_type_raid700, str_storage_type_raid800
                                str_temp = "MPB-"
                            Case str_storage_type_raid750
                                str_temp = "MPU-"
                        End Select

                        'Cache W 'Pending Rate [%]
                        'get the performance data
                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                        Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Write Pending Rate [%]", str_treeview_node_fullpath, str_treeview_level, 75, 1, "Cache W'Pending Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " W'Pending Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        array_str_performance_data_array = Nothing

                        If Not str_storage_type = str_storage_type_raid600 Then
                            'Cache Allocation [MB]
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Allocation [MB]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Cache Allocation [MB]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache Allocation", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            'Cache Usage Rate [%]
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(2), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Usage Rate [%]", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache Usage Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache Usage Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        Else
                            'Cache Usage Rate [%]
                            'get the performance data
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & " Cache Usage Rate [%]", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache Usage Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Usage Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "2"

                        Select Case str_storage_system
                            Case str_storage_type_raid700
                                str_temp = "MPB-"
                            Case str_storage_type_raid750
                                str_temp = "MPU-"
                        End Select

                        'get the performance data
                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                        Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & "-" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Write Pending Rate [%]", str_treeview_node_fullpath, str_treeview_level, 75, 1, "Cache W'Pending Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " W'Pending Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        array_str_performance_data_array = Nothing

                        'get the performance data
                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                        Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & "-" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Allocation [MB]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Cache Allocation [MB]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache Allocation ", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        array_str_performance_data_array = Nothing

                        'Cache Usage Rate [%]
                        'get the performance data
                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(2), str_cache, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                        Call array_create_chart(str_temp & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & "-" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Cache Usage Rate [%]", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache Usage Rate [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache Usage Rate ", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                    Case "3"
                        'NOP
                End Select
                array_str_performance_data_array = Nothing

            Case str_paritygroup
                'ParityGroup
                '------------------------------------------------------------------------------------
                Select Case str_treeview_level
                    Case "0"
                        'get the performance data 
                        'str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_paritygroup, "")
                        array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_paritygroup, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)

                        'show graph
                        Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "PG Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " PG Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                    Case "1"
                        'get the performance data 
                        array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_paritygroup, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                        'show graph
                        Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "PG Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " PG Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                    Case "2"

                        'get the performance data 
                        array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_paritygroup, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                        'show graph
                        Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "PG Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " PG Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                    Case "3"
                        'NOP
                End Select
                array_str_performance_data_array = Nothing

            Case str_ldeveachofcu
                'ldeveachofcu
                '------------------------------------------------------------------------------------
                Select Case str_treeview_level
                    Case "0"

                        '-------------
                        'top x LDEVeachofcu IOPS
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu sequential write iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops_write_seq) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Sequential Write IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Seq Write IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu sequential read iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops_read_seq) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Sequential Read IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Seq Read IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu random write iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops_write_rand) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Random Write IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Rand Write IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu random read iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops_read_rand) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Random Read IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Ran Read IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu write transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate_write) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Write Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Write Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LDEVeachofcu read transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LDEV Read Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Read Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "1"

                        'iops
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " IOPS", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IOPS]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'transfer
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Transfer Rate", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Transfer Rate [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV Transfer Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'response time
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_response) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Response Time [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "2"

                        'iops
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_iops_read_rand) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, str_take_filename_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " IOPS", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LDEV IOPS [IOPS]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'transfer
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, str_take_filename_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Transfer Rate", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Transfer Rate [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV Transfer Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'response time
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_response_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, str_take_filename_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV Response Time [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'blocksize
                        If InStr(str_file_paths(0), str_export_filename_ldeveachofcu_transrate) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_ldeveachofcu, str_take_filename_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'show graph
                            Call array_create_chart("LDEV " & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & " blocksize", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LDEV blocksize [kB]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LDEV blocksize", array_str_performance_data_array, str_what_type_of_graph, "div", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "3"
                        'NOP
                    Case "4"
                        'NOP
                End Select
                array_str_performance_data_array = Nothing

            Case str_port
                'Port
                '------------------------------------------------------------------------------------
                Select Case str_treeview_level
                    Case "0"
                        'NOP
                    Case "1"

                        Select Case str_treeview_node_fullpath
                             'mf ports
                            Case str_port & "\" & str_mfports

                                '--------------
                                'MF PORT IOPS
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("MF Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "MF Port IO [IOPS]", "MF Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                '--------------
                                'MF PORT Read Transfer
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("MF Port Read Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Read Transfer [MB/s]", "Port Read Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                '--------------
                                'MF PORT Write Transfer
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("MF Port Write Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Write Transfer [MB/s]", "Port Write Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                '--------------
                                'MF PORT Response
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(3), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("MF Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Response [ms]", "MF Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                '--------------
                                'MF PORT DiscTime
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(4), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("MF Port Disc Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Disc Time [ms]", "MF Port Disc Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)


                            'open ports
                            Case str_port & "\" & str_openports
                                '--------------
                                'PORT IOPS
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Port IO [IOPS]", "Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                '--------------
                                'PORT Transfer
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Port Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Port Transfer [MB/s]", "Port Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                '--------------
                                'PORT Response
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Port Response [ms]", "Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)


                                'initiator ports
                            Case str_port & "\" & str_tchurports
                                'Initiator port iops
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Initiator Port IOs", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Remote IOPS [IO/s]", "Initiator Port IOs", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                'Initiator port transfers
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Initiator Port Transfers", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Remote Transfers [MB/s]", "Initiator Port Transfers", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                'Initiator port response time
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Initiator Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Remote Response Time [ms]", "Initiator Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End Select

                    Case "2"

                        'mf ports
                        If InStr(str_treeview_node_fullpath, str_mfports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            '--------------
                            'MF PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "MF Port IO [IOPS]", "MF Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Read Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Read Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Read Transfer [MB/s]", "Port Read Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Write Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Write Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Write Transfer [MB/s]", "Port Write Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(3), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Response [ms]", "MF Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT DiscTime
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(4), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Disc Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Disc Time [ms]", "MF Port Disc Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)



                        End If

                        'open ports
                        If InStr(str_treeview_node_fullpath, str_openports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '--------------
                            'PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Port IO [IOPS]", "Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'PORT Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Port Transfer [MB/s]", "Port Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            '--------------
                            'PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Port Response [ms]", "Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'initiator ports
                        If InStr(str_treeview_node_fullpath, str_tchurports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '--------------
                            'PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Initiator Port IO [IOPS]", "Initiator Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'PORT Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Initiator Port Transfer [MB/s]", "Initiator Port Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            '--------------
                            'PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Initiator Port Response [ms]", "Initiator Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "3"

                        'mf ports
                        If InStr(str_treeview_node_fullpath, str_mfports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            '--------------
                            'MF PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "MF Port IO [IOPS]", "MF Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Read Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Read Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Read Transfer [MB/s]", "Port Read Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Write Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(2), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Write Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "MF Port Write Transfer [MB/s]", "Port Write Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(3), str_elements(3), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Response [ms]", "MF Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'MF PORT DiscTime
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(4), str_elements(4), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("MF Port Disc Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "MF Port Disc Time [ms]", "MF Port Disc Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)


                        End If

                        'open ports
                        If InStr(str_treeview_node_fullpath, str_openports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            '--------------
                            'PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Port IO [IOPS]", "Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'PORT Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(1), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Port Transfer [MB/s]", "Port Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            '--------------
                            'PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(2), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Port Response [ms]", "Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'initiator ports
                        If InStr(str_treeview_node_fullpath, str_tchurports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '--------------
                            'PORT IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port IO [IOPS]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Initiator Port IO [IOPS]", "Initiator Port IO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            '--------------
                            'PORT Transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(1), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port Transfer [MB/s]", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Initiator Port Transfer [MB/s]", "Initiator Port Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            '--------------
                            'PORT Response
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(2), str_elements(0), str_port, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Initiator Port Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "Initiator Port Response [ms]", "Initiator Port Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If


                End Select
                array_str_performance_data_array = Nothing

            Case str_lu
                'LU
                '------------------------------------------------------------------------------------

                Select Case str_treeview_level
                    Case "0"

                        '-------------
                        'top x LU IOPS
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_iops) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LU sequential write iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_iops_seq_write) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Sequential Write IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Seq Write IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LU random write iops
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_iops_ran_write) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Random Write IOPS", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Rand Write IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LU transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_kbps) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LU write transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_kbps_write) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Write Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Write Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '-------------
                        'top x LU read transfer
                        '--------------
                        If InStr(str_file_paths(0), str_export_filename_lu_kbps_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Read Transfer", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Read Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "1"

                        If InStr(str_file_paths(0), str_export_filename_lu_iops) > 0 Then

                            '--------------
                            'LU IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, "", "add_lu_hsd")
                            'show graph
                            'Call create_chart("LU IOPS " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", str_treeview_node_fullpath, 0, 1, "LU IOPS [IO/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS", str_performance_data_array, str_what_type_of_graph, "")
                            Call array_create_chart("LU IOPS " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_kbps) > 0 Then

                            If UBound(str_file_paths) = 0 Then
                                '--------------
                                'LU Transfer
                                '--------------
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("LU Transfer " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                                  str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            Else
                                If InStr(str_file_paths(1), str_export_filename_lu_kbps) > 0 Then
                                    '--------------
                                    'LU Transfer
                                    '--------------
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU Transfer " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                            End If
                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_response) > 0 Then

                            '--------------
                            'response time
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_average_up_take_hsd_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU Response " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Response Time [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                    Case "2"

                        '--------------
                        'LU IOPS
                        '--------------

                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_iops_ran_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU IOPS " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'all luns seperately (checkbox clicked -> stacked)
                        If InStr(str_file_paths(0), str_export_filename_lu_iops) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            Call array_create_chart("LU IOPS " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '--------------
                        'LU Transfer
                        '--------------

                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_kbps_write) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU Transfer " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                          str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_kbps) <> 0 Then

                            'only execute if it is no blocksize scenario
                            If str_file_paths.Length = 1 Then

                                'all luns seperately (checkbox clicked -> stacked)
                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("LU Transfer " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            End If

                        End If

                        '--------------
                        'LU HIT Ratio
                        '--------------

                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_hit_rnd_read) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_average_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU HIT Ratio " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                          str_treeview_node_fullpath, str_treeview_level, 101, 1, "LU HIT Ratio [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU HIT Ratio", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        '--------------
                        'LU response
                        '--------------

                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_response_read) <> 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_average_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU Response " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Response [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                        End If

                        'all luns seperately (checkbox clicked -> stacked)
                        If InStr(str_file_paths(0), str_export_filename_lu_response) <> 0 Then
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_average_up, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU Response " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & "", _
                                              str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Response [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        '--------------
                        'LU block size
                        '--------------
                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_kbps) > 0 Then

                            If UBound(str_file_paths) = 1 Then

                                If InStr(str_file_paths(1), str_export_filename_lu_iops) > 0 Then
                                    '--------------
                                    'LU blocksize
                                    '--------------
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU blocksize " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU blocksize [kB]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU blocksize", array_str_performance_data_array, str_what_type_of_graph, "div", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                            End If
                        End If

                        '--------------
                        'LU read/write ratio
                        '--------------
                        'all luns cumulated
                        If InStr(str_file_paths(0), str_export_filename_lu_iops_seq_read) > 0 Then

                            If UBound(str_file_paths) = 3 Then

                                If InStr(str_file_paths(1), str_export_filename_lu_iops_ran_read) > 0 Then
                                    '--------------
                                    'LU read/write ratio
                                    '--------------

                                    'element names after the calculation
                                    'create the arraylist of the elementnames that the newly calculated elements should have.
                                    Dim arraylist_str_element_label As New ArrayList

                                    'is the by line option set, and ther are no selected checkboxes?
                                    If Not Me.CheckBox_stacked_view.Checked And Not bool_some_selected Then

                                        'create the iops read/write values cumulatd
                                        array_temp = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_selected, date_datetimepicker_end_selected, int_array_descritor_line_count, "(LU IOPS Read/Write Ratio)")
                                        'specify the label of the graph
                                        arraylist_str_element_label.Add(Strings.Left(str_elements(0), InStr(str_elements(0), ")")))
                                    Else

                                        'create the iops read/write values by line
                                        array_temp = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "", date_datetimepicker_start_selected, date_datetimepicker_end_selected, int_array_descritor_line_count, "(LU IOPS Read/Write Ratio)")
                                        'specify the label of the graphs
                                        For Each element In str_elements(0).Split(CChar(","))
                                            arraylist_str_element_label.Add(element)
                                        Next
                                    End If

                                    '------------------------------------
                                    'formula
                                    '------------------------------------
                                    'LUN IOPS read/write ratio = (100 / ([rand read iops] + [seq read iops] + [rand write iops] + [seq write iops])) * ([rand read iops] + [seq read iops]
                                    '1 rand read
                                    '2 seq read
                                    '3 rand write
                                    '4 seq write
                                    str_formula = "(100/(:1:+:2:+:3:+:4:))*(:1:+:2:)"

                                    'calculation for read/write ratio
                                    array_str_performance_data_array = array_str_create_array_calculated_with_formula(array_temp, int_array_descritor_line_count, arraylist_str_element_label, str_formula, "LU IOPS Read/Write Ratio", "(LU IOPS Read/Write Ratio)")
                                    array_temp = Nothing
                                    arraylist_str_element_label.Clear()

                                    'show graph
                                    Call array_create_chart("LU IOPS read/write ratio " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), _
                                                      str_treeview_node_fullpath, str_treeview_level, 100, 1, "LU IOPS read/write ratio [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS read/write ratio", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                            End If
                        End If

                    Case "3"

                        If InStr(str_file_paths(0), str_export_filename_lu_iops_ran_read) > 0 Then 'IOPS

                            '--------------
                            'LU IOPS
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("LU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " IOPS", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        Select Case str_storage_type

                            Case str_storage_type_raid700, str_storage_type_raid750

                                If InStr(str_file_paths(0), str_export_filename_lu_kbps_write) > 0 Then ' Transfer

                                    '--------------
                                    'LU Transfer
                                    '--------------
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Transfer", _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                End If

                                If InStr(str_file_paths(0), str_export_filename_lu_response_read) > 0 Then ' Response

                                    '--------------
                                    'LU Response
                                    '--------------

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Response", _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Response [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                End If

                                '--------------
                                'LU read/write ratio
                                '--------------
                                'all luns cumulated
                                If InStr(str_file_paths(0), str_export_filename_lu_iops_seq_read) > 0 Then

                                    If UBound(str_file_paths) = 3 Then

                                        If InStr(str_file_paths(1), str_export_filename_lu_iops_ran_read) > 0 Then
                                            '--------------
                                            'LU read/write ratio
                                            '--------------

                                            'element names after the calculation
                                            'create the arraylist of the elementnames that the newly calculated elements should have.
                                            Dim arraylist_str_element_label As New ArrayList
                                            For Each element As String In str_elements(0).Split(CChar(","))
                                                arraylist_str_element_label.Add(element)
                                            Next

                                            '------------------------------------
                                            'formula
                                            '------------------------------------
                                            'LUN IOPS read/write ratio = 100 / ([rand read iops] + [seq read iops] + [rand write iops] + [seq write iops]) * ([rand read iops] + [seq read iops]
                                            '1 rand read
                                            '2 seq read
                                            '3 rand write
                                            '4 seq write
                                            str_formula = "(100/(:1:+:2:+:3:+:4:))*(:1:+:2:)"

                                            'create the iops read/write ration
                                            array_temp = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "add_lu_hsd", date_datetimepicker_start_selected, date_datetimepicker_end_selected, int_array_descritor_line_count, "(LU IOPS Read/Write Ratio)")
                                            'calculation
                                            array_str_performance_data_array = array_str_create_array_calculated_with_formula(array_temp, int_array_descritor_line_count, arraylist_str_element_label, str_formula, str_df_filename_lu_response_time_total_descriptor, "(LU IOPS Read/Write Ratio)")
                                            array_temp = Nothing

                                            'show graph
                                            Call array_create_chart("LU IOPS read/write ratio " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level), _
                                                              str_treeview_node_fullpath, str_treeview_level, 100, 1, "LU IOPS read/write ratio [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU IOPS read/write ratio", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                        End If

                                    End If
                                End If

                            Case str_storage_type_raid600

                                If InStr(str_file_paths(0), str_export_filename_lu_kbps) > 0 Then ' Transfer

                                    '--------------
                                    'LU Transfer
                                    '--------------

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Transfer", _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "LU Transfer [MB/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                End If

                                If InStr(str_file_paths(0), str_export_filename_lu_response) > 0 Then ' Response

                                    '--------------
                                    'LU Response
                                    '--------------

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("LU " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response", _
                                                      str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Response [ms]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                                End If

                        End Select


                        If InStr(str_file_paths(0), str_export_filename_lu_kbps) > 0 Then 'Blocksize

                            If Not str_file_paths.Length = 1 Then

                                '--------------
                                'LU Blocksize
                                '--------------

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                                'create graph
                                Call array_create_chart("LU (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ") blocksize", _
                                                  str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU blocksize [kB]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Blocksize", array_str_performance_data_array, str_what_type_of_graph, "div", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                            End If

                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_hit_rnd_read) > 0 Then 'HIT Rates

                            ''get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_average_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'create graph
                            Call array_create_chart("LU Hit Rates (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ")", _
                                               str_treeview_node_fullpath, str_treeview_level, 101, 1, "LU Hit Rates [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Hit Rates", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_c2d_trans) > 0 Then 'backend cache 2 disk

                            ''get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)

                            'create graph
                            'The number of data transfer operations per second from cache memories and hard disk drives (for example, LUs)
                            Call array_create_chart("LU Cache to Disk Transfer Operations (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ")", _
                                               str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU Cache2Disk Transfer Operations [Transfer Operations/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Cache2Disk Transfer Ops", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_lu_d2c_trans_sequential) > 0 Then 'backend disk 2 cache

                            ''get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_lu, str_sum_up_take_filename_as_name, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)

                            'create graph
                            'The number of data transfer operations per second from cache memories and hard disk drives (for example, LUs)
                            Call array_create_chart("LU Disk to Cache Transfer Operations (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ")", _
                                               str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU Disk2Cache Transfer Operations [Transfer Operations/s]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " LU Disk2Cache Transfer Ops", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        array_str_performance_data_array = Nothing
                End Select

            Case str_backend

                Select Case str_storage_type
                    Case str_storage_type_vsp5000
                        Select Case str_treeview_level

                            Case "1"
                                If InStr(str_treeview_node_fullpath, str_raid900_backend_hie) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, " Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                            Case "2"
                                If InStr(str_treeview_node_fullpath, str_raid900_backend_hie) > 0 Then
                                    'HIE-32C.ISW12, MPU-010.HIE-01G

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array_of_several_files(str_file_paths, str_elements, str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart(str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, " Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                        End Select

                    Case str_storage_type_raid700
                        Select Case str_treeview_level

                            Case "1"

                                If InStr(str_treeview_node_fullpath, str_backend_cha_esw) > 0 Then
                                    '"CHA-1EU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path CHA <-> ESW busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHA<->ESW Busy [%]", "CHA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_dka_esw) > 0 Then
                                    '"DKA-1AU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path DKA <-> ESW busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "DKA<->ESW Busy [%]", "DKA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_esw_cache) > 0 Then
                                    '"ESW-1SA.CACHE-1CA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path ESW <-> Cache busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "ESW<->Cache Busy [%]", "ESW<->Cache Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_mppcb_esw) > 0 Then
                                    '"MPB-1MA.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path MPB <-> ESW busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "MPPCB<->ESW Busy [%]", "MPPCB<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                            Case "2"

                                If InStr(str_treeview_node_fullpath, str_backend_cha_esw) > 0 Then
                                    '"CHA-1EU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHA<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CHA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_dka_esw) > 0 Then
                                    '"DKA-1AU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "DKA<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " DKA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_esw_cache) > 0 Then
                                    '"ESW-1SA.CACHE-1CA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "ESW<->Cache Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " ESW<->Cache Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_mppcb_esw) > 0 Then
                                    '"MPB-1MA.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "MPPCB<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " MPPCB<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                            Case "3"

                                If InStr(str_treeview_node_fullpath, str_backend_cha_esw) > 0 Then
                                    '"CHA-1EU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "CHA<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " CHA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_dka_esw) > 0 Then
                                    '"DKA-1AU.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "DKA<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " DKA<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_esw_cache) > 0 Then
                                    '"ESW-1SA.CACHE-1CA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "ESW<->Cache Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " ESW<->Cache Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If

                                If InStr(str_treeview_node_fullpath, str_backend_mppcb_esw) > 0 Then
                                    '"MPB-1MA.ESW-1SA"

                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Path " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "MPPCB<->ESW Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " MPPCB<->ESW Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                        End Select

                    Case str_storage_type_raid750
                        Select Case str_treeview_level
                            Case "1"
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_bepk_mainkp) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Backend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Backend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Backend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_cache_mainpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Cache PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_fepk_mainpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Frontend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Frontend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Frontend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                            Case "2"
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_bepk_mainkp) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Backend PK (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ") busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Backend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Backend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_cache_mainpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Cache PK (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ") busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_backend_hm700_fepk_mainpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Frontend PK (" & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & ") busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Frontend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Frontend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                        End Select

                    Case str_storage_type_raid800
                        Select Case str_treeview_level

                            Case "1"
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_dka_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Backend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Backend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Backend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cmpk_cache) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Cache PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cha_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Frontend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Frontend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Frontend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_mppcb_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("VSD PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "VSD PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " VSD PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                            Case "2"
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_dka_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Backend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Backend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Backend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cmpk_cache) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Cache PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cha_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Frontend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Frontend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Frontend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_mppcb_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("VSD PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "VSD PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " VSD PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                            Case "3"
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_dka_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Backend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Backend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Backend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cmpk_cache) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Cache PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Cache PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Cache PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_cha_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("Frontend PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "Frontend PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Frontend PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                                If InStr(str_treeview_node_fullpath, str_raid800_backend_mppcb_cmpk) > 0 Then
                                    'get the performance data 
                                    array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_backend, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                    'show graph
                                    Call array_create_chart("VSD PK busy", str_treeview_node_fullpath, str_treeview_level, 100, 1, "VSD PK Busy [%]", str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " VSD PK Busy", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)
                                End If
                        End Select
                End Select

                array_str_performance_data_array = Nothing

            Case str_truecopy

                Select Case str_treeview_level
                    Case "1"

                        Select Case str_elements(0)

                            Case str_truecopy_chart_name_remoteio

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_truecopy_data_name_remoteio, str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                'this value is dependent on the interval. so the value is IO/interval. that is why i have to calculate the the value as follows
                                '(1 / (interval * 60seconds) -> this is the factor i have to multiply each value
                                '(1 / (CDbl(Strings.Right(CStr(array_str_performance_data_array.GetValue(4, 1)), Strings.Len(array_str_performance_data_array.GetValue(4, 1)) - 15)) * 60))
                                Call array_create_chart("Remote IOs", str_treeview_node_fullpath, str_treeview_level, 0, (1 / (CDbl(Strings.Right(CStr(array_str_performance_data_array.GetValue(4, 1)), Strings.Len(array_str_performance_data_array.GetValue(4, 1)) - 15)) * 60)), "Remote IO [IOPS]", "Remote IOs", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_truecopy_chart_name_remotetransfer

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_truecopy_data_name_remotetransfer, str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Remote Transfer", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Remote Transfer [MB/s]", "Remote Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_truecopy_chart_name_remoteresponse

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_truecopy_data_name_remoteresponse, str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Remote Response", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Remote Response [ms]", "Remote Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_truecopy_chart_name_remoteoutofsync

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_truecopy_data_name_remoteoutofsync, str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Remote Out of Sync Tacks [#]", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Remote Out of Sync Tracks [#]", "Remote Out of Sync Tracks", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                            Case str_truecopy_chart_name_remotesynchronized

                                'get the performance data 
                                array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_truecopy_data_name_remotesynchronized, str_truecopy, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                                'show graph
                                Call array_create_chart("Remote Pair Synchronized [%]", str_treeview_node_fullpath, str_treeview_level, 101, 1, "Remote Pair Synchronized [%]", "Remote Pair Synchronized", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End Select

                End Select
                array_str_performance_data_array = Nothing

            Case str_hur

                Select Case str_treeview_level
                    Case "1"

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_initial_copy_transfer) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Journal group initial copy transfer ", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Initial copy transfer [MB/s]", "JNL group initial copy transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_write_transfer) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("Journal group write transfer ", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Write transfer [MB/s]", "JNL group write transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_m_usedrate) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("M journal Group Used Rate ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Used Rate [%]", "M-JNL Used", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_m_rio) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("M journal Group RIO ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "RIO [IO]", "M-JNL RIO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_m_transfer) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("M journal Group Transfer ", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Transfer [MB/s]", "M-JNL Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_m_response) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("M journal Group Response ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Response Time [ms]", "M-JNL Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_r_usedrate) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("R journal Group Used Rate ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Used Rate [%]", "R-JNL Used", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_r_rio) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("R journal Group RIO ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "RIO [IO]", "R-JNL RIO", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_r_transfer) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("R journal Group Transfer ", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_kb_mb, "Transfer [MB/s]", "R-JNL Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_export_filename_hurjnl_r_response) > 0 Then

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_hur, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("R journal Group Response ", str_treeview_node_fullpath, str_treeview_level, 0, 1, "Response Time [ms]", "R-JNL Response", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                End Select
                array_str_performance_data_array = Nothing

        End Select
    End Sub
    'what charts to show
    'df
    Private Sub df_collect_data_and_show_the_charts_needed(ByVal str_storage_type As String, ByVal str_performance_data_type As String, ByVal str_file_paths As String(), ByVal str_elements As String(), ByVal str_treeview_level As String, ByVal str_treeview_node_fullpath As String, ByVal str_what_type_of_graph As String, Optional ByVal str_max_average_min As String = "max")
        Dim str_performance_data_array As String() = Nothing
        Dim array_str_performance_data_array As Array = Nothing
        Dim str_temp As String = Nothing

        Dim date_datetimepicker_start_performancedate_value As Date = DateTimePicker_start_performancedate.Value
        Dim date_datetimepicker_end_performancedate_value As Date = DateTimePicker_end_performancedate.Value

        Select Case str_performance_data_type
            'LU
            '------------------------------------------------------------------------------------
            Case str_df_lu_section
                Select Case str_treeview_level
                    Case "0"
                        If InStr(str_file_paths(0), str_df_filename_lu_iops_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            '-------------
                            'top x LU IOPS max
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU IOPS", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU IOPS [IO/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " IOPS", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_df_filename_lu_transfer_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '-------------
                            'top x LU transfer
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Transfer", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU Transfer [MB/s]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Transfer", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_df_filename_lu_tag_count_read_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '-------------
                            'top x LU read tag count
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Read Tag Count", str_treeview_node_fullpath, str_treeview_level, 0, 1, "LU Read Tag [#]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Read Tag Count", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_df_filename_lu_response_time_total_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '-------------
                            'top x LU total response time
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Total Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Total Response Time [ms]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Total Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_df_filename_lu_response_time_read_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '-------------
                            'top x LU read response time
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Read Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Read Response Time [ms]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Read Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                        If InStr(str_file_paths(0), str_df_filename_lu_response_time_write_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            '-------------
                            'top x LU write response time
                            '--------------
                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), str_lu, "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("Top " & CStr(ToolStripComboBox_topx_value.Text) & " LU Write Response Time", str_treeview_node_fullpath, str_treeview_level, 0, dbl_conversion_us_ms, "LU Write Response Time [ms]", "Top " & CStr(ToolStripComboBox_topx_value.Text) & " " & str_get_treeview_name(str_treeview_node_fullpath, str_treeview_level) & " Write Response Time", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                    Case "1"

                    Case "2"

                End Select

            Case str_df_drive_operate_section
                'Drive Operation Rate
                '------------------------------------------------------------------------------------
                Select Case str_treeview_level

                    Case "0"

                        If InStr(str_file_paths(0), str_df_filename_driveoperate_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd operating rate
                            '--------------------------------------

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("HDD (all Units\all HDDs) Operating Rate", str_treeview_node_fullpath, str_treeview_level, 0, 1, "HDD Operating Rate [%]", "HDD Operating Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        ElseIf InStr(str_file_paths(0), str_df_filename_drive_tag_count_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd lun tag count
                            '--------------------------------------

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("HDD (all Units\all HDDs) Tag Count", str_treeview_node_fullpath, str_treeview_level, 0, 1, "HDD Tag Count [#]", "HDD Tag Count", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                    Case "1"

                        If InStr(str_file_paths(0), str_df_filename_driveoperate_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd operating rate
                            '--------------------------------------

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("HDD (" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & "\all HDDs) Operating Rate", str_treeview_node_fullpath, str_treeview_level, 0, 1, "HDD Operating Rate [%]", "HDD Operating Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        ElseIf InStr(str_file_paths(0), str_df_filename_drive_tag_count_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd lun tag count
                            '--------------------------------------

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("HDD (" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & "\all HDDs) Tag Count", str_treeview_node_fullpath, str_treeview_level, 0, 1, "HDD Tag Count [#]", "HDD Tag Count", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If

                    Case "2"

                        If InStr(str_file_paths(0), str_df_filename_driveoperate_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd operating rate
                            '--------------------------------------
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            'show graph
                            Call array_create_chart("HDD (" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & "\" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & ") Operating Rate", str_treeview_node_fullpath, str_treeview_level, 100, 1, "HDD Operating Rate [%]", "HDD Operating Rate", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        ElseIf InStr(str_file_paths(0), str_df_filename_drive_tag_count_descriptor, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                            'hdd lun tag count
                            '--------------------------------------

                            'get the performance data 
                            array_str_performance_data_array = array_raid_performance_data_put_in_array(str_file_paths(0), str_elements(0), "", "", date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value, 0, 100, int_array_descritor_line_count)
                            ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                            Call array_create_chart("HDD (" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level) - 1)) & "\" & str_get_treeview_name(str_treeview_node_fullpath, CStr(CInt(str_treeview_level))) & ") Tag Count", str_treeview_node_fullpath, str_treeview_level, 0, 1, "HDD Tag Count [#]", "HDD Tag Count", array_str_performance_data_array, str_what_type_of_graph, "", int_array_descritor_line_count, date_datetimepicker_start_performancedate_value, date_datetimepicker_end_performancedate_value)

                        End If
                End Select
                str_performance_data_array = Nothing
        End Select

    End Sub

    'Helpful procedures
    Private Function list_create_missing_date_elements(ByVal str_start_date As String, ByVal str_end_date As String, ByVal str_sapling_rate As String) As List(Of String)

        Dim list_missing_dates As New List(Of String)
        Dim date_start As DateTime = DateTime.Parse(str_start_date)
        Dim date_end As Date = DateTime.Parse(str_end_date)
        Dim int_sampling_rate As Integer = CInt(Strings.Right(str_sapling_rate, str_sapling_rate.Length - Strings.InStrRev(str_sapling_rate, ":") - 1))

        Dim long_datediff As Long = DateDiff(DateInterval.Minute, date_start, date_end)

        If (long_datediff > 1) And Not (long_datediff = int_sampling_rate) Then
            For i As Long = 1 To long_datediff + 1 Step 1
                'Select Case int_

                list_missing_dates.Add(CStr(DateAdd(DateInterval.Minute, i * int_sampling_rate, date_start)))
            Next

        End If

        list_create_missing_date_elements = list_missing_dates
    End Function

#End Region

#Region "Array Procedures"

    Public Function array_insert_element_at_position(ByRef array_2_columns(,) As String, ByVal int_position As Integer, ByVal str_information As String, ByVal str_value As String) As String
        'return value -1 if nok
        array_insert_element_at_position = "-1"

        If int_position = UBound(array_2_columns) Then
            'if it is the last element just overwrite it
            array_2_columns(int_position, 0) = str_information
            array_2_columns(int_position, 1) = str_value
            'return value 0 if ok
            array_insert_element_at_position = "0"
        Else
            For j = UBound(array_2_columns) - 1 To int_position Step -1
                'shift all following elements one position down
                array_2_columns(j + 1, 0) = array_2_columns(j, 0)
                array_2_columns(j + 1, 1) = array_2_columns(j, 1)
            Next
            array_2_columns(int_position, 0) = str_information
            array_2_columns(int_position, 1) = str_value
            'return value 0 if ok
            array_insert_element_at_position = "0"
        End If

    End Function

    Public Function array_delete_element_at_position(ByRef array_2_columns(,) As String, ByVal int_position As Integer) As String
        'return value -1 if nok
        array_delete_element_at_position = "-1"

        For j = int_position To UBound(array_2_columns) - 1 Step 1
            'shift all following elements one position down
            array_2_columns(j, 0) = array_2_columns(j + 1, 0)
            array_2_columns(j, 1) = array_2_columns(j + 1, 1)
        Next
        array_2_columns(UBound(array_2_columns), 0) = Nothing
        array_2_columns(UBound(array_2_columns), 1) = Nothing
        'return value 0 if ok
        array_delete_element_at_position = "0"

    End Function

    Public Function array_is_element_in_array(ByRef array_2_columns(,) As String, ByVal str_element_to_look_for As String) As Boolean
        array_is_element_in_array = False

        For j = 0 To UBound(array_2_columns) Step 1
            If array_2_columns(j, 0) = str_element_to_look_for Then
                array_is_element_in_array = True
            End If
        Next

    End Function

    Public Function array_get_position_of_element_in_array(ByRef array_2_columns(,) As String, ByVal str_element_to_look_for As String) As Integer

        array_get_position_of_element_in_array = -1

        For j = 0 To UBound(array_2_columns) Step 1
            If array_2_columns(j, 0) = str_element_to_look_for Then
                array_get_position_of_element_in_array = j
            End If
        Next

    End Function

#End Region

#Region "Parity Group Procedures"

    'general
    'add leading zeros if necessary (ex. 1-1 -> 01-01, 11-2 -> 11-02)
    Public Function pg_leading_zero_add(ByVal str_pg_number As String) As String

        Dim str_name As String = str_pg_number

        'if the parity group numbering is of one digit(before the "-" sign), then add a leading zero (ex. 1-1 -> 01-1)
        If InStr(CStr(str_pg_number), "-", Microsoft.VisualBasic.CompareMethod.Text) = 2 Then
            'get the parity group value before and with the "-" sign
            str_name = "0" & CStr(str_pg_number)
        End If

        'if the parity group numbering is of one digit (after the "-" sign), then add a leading zero (ex. 1-1 -> 1-01)
        If Strings.Len(str_pg_number) - CInt(InStr(CStr(str_pg_number), "-", Microsoft.VisualBasic.CompareMethod.Text)) = 1 Then
            str_name = Strings.Left(str_name, Strings.Len(str_name) - 1) & "0" & Strings.Right(str_name, 1)
        End If

        'return string
        pg_leading_zero_add = str_name
    End Function

    'general
    'remove leading zeros if necessary (ex. 01-01 -> 1-1, 11-02 -> 11-2)
    Public Function pg_leading_zero_remove(ByVal str_pg_number As String) As String

        Dim str_name As String = str_pg_number

        'if the parity group numbering is of one digit(before the "-" sign), then add a leading zero (ex. 1-1 -> 01-1)
        If str_pg_number(0) = "0" Then
            'get the parity group value before and with the "-" sign
            str_name = Strings.Right(str_name, str_name.Length - 1)
        End If

        'replace leading zero after the "-" sign (ex. 1-01 -> 1-1)
        If InStr(str_pg_number, "-0", Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
            str_name = Strings.Replace(str_name, "-0", "-")
        End If

        'return string
        pg_leading_zero_remove = str_name
    End Function

    'df (AMS, HUR)
    Public Function df_driveop_name_get_unit_name(ByVal str_driveop_item As String) As String
        'this function takes the unit name out ot the hd string
        'example: CTL0-Unit0-HDU0 -> Unit0

        'set return code
        df_driveop_name_get_unit_name = "-1"

        df_driveop_name_get_unit_name = Strings.Mid(str_driveop_item, InStr(str_driveop_item, "-") + 1, InStrRev(str_driveop_item, "-") - InStr(str_driveop_item, "-") - 1)
    End Function

#End Region

#Region "LU Procedures"

    'general
    Private Function lu_get_lu_number(ByVal str_lu_name_original As String) As String
        'specify the lu number out of the lu file 
        'ex. HM700 "CL5-A.01(E-SRV-W-1124).0"" -> 0
        'ex. VSP "CL1-A.01(ss001378).0000" -> 0000
        lu_get_lu_number = "-1"
        lu_get_lu_number = CStr(Strings.Right(Strings.Replace(str_lu_name_original, Chr(34), ""), Strings.Replace(str_lu_name_original, Chr(34), "").Length - Strings.InStrRev(Strings.Replace(str_lu_name_original, Chr(34), ""), ".")))

    End Function

#End Region

#Region "MP/CHP Procedures"

    'df (AMS, HUS)
    Private Function df_port_name_get_ctl_name(ByVal str_df_port_name_original As String) As String
        'specify the ctl name out of the port name (ex. "CTL0-A" -> CTL0)
        df_port_name_get_ctl_name = "-1"

        df_port_name_get_ctl_name = Strings.Mid(str_df_port_name_original, 1, 4)

    End Function

    'raid750 (hus v)
    'No.,"time","MPU-10.MP10-00","MPU-10.MP10-01","MPU-10.MP10-02","MPU-10.MP10-03","MPU-11.MP11-00","MPU-11.MP11-01","MPU-11.MP11-02","MPU-11.MP11-03","MPU-20.MP20-00","MPU-20.MP20-01","MPU-20.MP20-02","MPU-20.MP20-03","MPU-21.MP21-00","MPU-21.MP21-01","MPU-21.MP21-02","MPU-21.MP21-03"
    Private Function raid750_mp_get_mp_name(ByVal str_mp_name_original As String) As String
        'specify the mp name out of the mp file numbering (ex. "MPU-10.MP10-00" -> MP00)
        raid750_mp_get_mp_name = "-1"

        raid750_mp_get_mp_name = CStr("MP" & Strings.Right(Strings.Replace(str_mp_name_original, Chr(34), ""), 2))

    End Function

    Private Function raid750_mp_get_mpb_name(ByVal str_mp_name_original As String) As String
        'specify the mpb name out of the mp file numbering (ex. "MPU-10.MP10-00" -> MPU-10)
        raid750_mp_get_mpb_name = "-1"

        raid750_mp_get_mpb_name = Strings.Left(str_get_name_out_of_an_arraylist(arraylist_husvm_mp, Strings.Replace(str_mp_name_original, Chr(34), ""), CChar(",")), 6)

    End Function

    Private Function raid750_mp_get_mp_name_original(ByVal str_mpb_number As String, ByVal str_mp_number As String) As String
        'specify the original mp name out of the understandable mp numbering (ex. MPB0(1MA), MP00 -> "MPB-1MA.MP00-1MA")
        'ex. MPU-10, MP00 -> "MPU-10.MP10-00"

        raid750_mp_get_mp_name_original = str_mpb_number & ".MP" & Strings.Right(str_mpb_number, 2) & "-" & Strings.Right(str_mp_number, 2)

    End Function

    'raid700 (vsp)
    Private Function raid700_mp_get_mp_name(ByVal str_mp_name_original As String) As String
        'specify the mp name out of the mp file numbering (ex. "MPB-1MA.MP00-1MA" -> MP00)
        raid700_mp_get_mp_name = "-1"

        raid700_mp_get_mp_name = CStr(Strings.Left(Strings.Right(Strings.Replace(str_mp_name_original, Chr(34), ""), 8), 4))

    End Function

    Private Function raid700_mp_get_mpb_name(ByVal str_mp_name_original As String) As String
        'specify the mpb name out of the mp file numbering (ex. "MPB-1MA.MP00-1MA" -> MPB0(1MA))
        raid700_mp_get_mpb_name = "-1"

        raid700_mp_get_mpb_name = Strings.Left(str_get_name_out_of_an_arraylist(arraylist_vsp_mp, Strings.Replace(str_mp_name_original, Chr(34), ""), CChar(",")), 9)

    End Function

    Private Function raid700_mp_get_mp_name_original(ByVal str_mpb_number As String, ByVal str_mp_number As String) As String
        'specify the original mp name out of the understandable mp numbering (ex. MPB0(1MA), MP00 -> "MPB-1MA.MP00-1MA")
        'ex. MPB0(1MA), MP00 -> "MPB-1MA.MP00-1MA"

        raid700_mp_get_mp_name_original = Strings.Left(str_mpb_number, 3) & "-" & Strings.Mid(str_mpb_number, InStr(str_mpb_number, "(") + 1, 3) & "." & str_mp_number & "-" & Strings.Mid(str_mpb_number, InStr(str_mpb_number, "(") + 1, 3)
    End Function

    'raid800 (vsp g1000)
    Private Function raid800_mp_get_mp_name(ByVal str_mp_name_original As String) As String
        'specify the mp name out of the mp file numbering (ex. "MPB-1MA.MP00-1MA" -> MP00)
        raid800_mp_get_mp_name = "-1"

        raid800_mp_get_mp_name = CStr(Strings.Left(Strings.Right(Strings.Replace(str_mp_name_original, Chr(34), ""), 8), 4))

    End Function

    Private Function raid800_mp_get_mpb_name(ByVal str_mp_name_original As String) As String
        'specify the mpb name out of the mp file numbering (ex. "MPB-1MA.MP00-1MA" -> MPB0(1MA))
        raid800_mp_get_mpb_name = "-1"

        raid800_mp_get_mpb_name = Strings.Left(str_get_name_out_of_an_arraylist(arraylist_vspg1000_mp, Strings.Replace(str_mp_name_original, Chr(34), ""), CChar(",")), 7)

    End Function

    Private Function raid800_mp_get_mp_name_original(ByVal str_mpb_number As String, ByVal str_mp_number As String) As String
        'specify the original mp name out of the understandable mp numbering (ex. MPB0(1MA), MP00 -> "MPB-1MA.MP00-1MA")
        'ex. MPB0(1MA), MP00 -> "MPB-1MA.MP00-1MA"

        raid800_mp_get_mp_name_original = str_mpb_number & "." & str_mp_number & "-" & Strings.Right(str_mpb_number, 3)
    End Function

    'raid900 (vsp 5000)

    Private Function raid900_mp_get_mp_name_original(ByVal str_mpb_number As String, ByVal str_mp_number As String) As String
        'specify the original mp name out of the understandable mp numbering (ex. MPU-010, MP00 -> "MPU-010.MP010-00")

        raid900_mp_get_mp_name_original = str_mpb_number & ".MP" & str_mpb_number.Split(CChar("-"))(1) & "-" & str_mp_number.Substring(2, 2)

    End Function

    Private Function raid900_mp_get_mpb_name(ByVal str_mp_name_original As String) As String
        'specify the mpb name out of the mp file numbering (ex. "MPU-010.MP010-00" -> MPU-010)
        raid900_mp_get_mpb_name = "-1"

        raid900_mp_get_mpb_name = str_mp_name_original.Replace(Chr(34), "").Trim().Substring(0, 7)

    End Function

    Private Function raid900_mp_get_mp_name(ByVal str_mp_name_original As String) As String
        'specify the mp name out of the mp file numbering (ex. "MPU-010.MP010-00" -> MP00)
        raid900_mp_get_mp_name = "-1"

        raid900_mp_get_mp_name = CStr(Strings.Left(Strings.Replace(str_mp_name_original, Chr(34), ""), 2)) & CStr(Strings.Right(Strings.Replace(str_mp_name_original, Chr(34), ""), 2))

    End Function

    'raid600 (uspv)
    Private Function raid600_chp_get_location_name(ByVal str_chp_number As String) As String
        'specify the chp location name out of the chp numbering (ex. "CHP00-1EU" -> "1EU")
        'No.,"time","CHP00-1EU","CHP01-1EU","CHP02-1EU","CHP03-1EU","CHP10-1FU","CHP11-1FU","CHP12-1FU","CHP13-1FU","CHP04-1EL","CHP05-1EL","CHP06-1EL","CHP07-1EL","CHP14-1FL","CHP15-1FL","CHP16-

        If InStr(Strings.Right(str_chp_number, 3), "-") > 0 Then
            'usp-vm
            raid600_chp_get_location_name = Strings.Right(str_chp_number, 2)
        Else
            'usp-v
            raid600_chp_get_location_name = Strings.Right(str_chp_number, 3)
        End If

    End Function

#End Region

#Region "Date Procedures"

    'form data format "2012/01/27 05:01" to "27.01.2012_05:01"
    Private Function str_date_convert(ByVal str_date As String) As String

        Dim str_year As String = Nothing
        Dim str_month As String = Nothing
        Dim str_day As String = Nothing
        Dim str_time As String = Nothing


        str_time = Strings.Mid(str_date, 12, 5)
        str_year = Strings.Left(str_date, 4)
        str_month = Strings.Mid(str_date, 6, 2)
        str_day = Strings.Mid(str_date, 9, 2)


        str_date_convert = str_day & "." & str_month & "." & str_year & "_" & str_time
    End Function

    Private Function set_datetimepicker_start_end() As String

        'description of the function:
        '----------------------------
        'puts all elements in "what_to_look_for" and the performance data in one array

        'set return value
        set_datetimepicker_start_end = "-1"

        'get the first unzipped file 
        Dim str_path_and_filename As String = str_find_first_file_in_folder_and_subfolders(path_performance_export_data & "\" & str_export_foldername_unzipped, str_file_ending_csv)

        ' if file does not exist exit function. return code is "-1" in the first line of the array
        If Not File.Exists(str_path_and_filename) Then
            Exit Function
        End If

        'temp variables to open files
        Dim str_line As String = Nothing
        Dim obj_reader As System.IO.StreamReader = Nothing

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_path_and_filename)

        '-------------------------------------------------
        'get description info

        'Port_Initiator_IOPS.csv()
        'Serial number : 86173(VSP)
        'From : 2012/05/18 17:00
        'To   : 2012/05/19 05:00
        'sampling rate : 1


        'first line (file name)
        str_line = obj_reader.ReadLine
        'second line (storage serial)
        str_line = obj_reader.ReadLine
        'storage serial number
        'third line (from)
        str_line = obj_reader.ReadLine()


        'reset start datetimepicker
        DateTimePicker_start_performancedate.MinDate = CDate("01.01.1753, 00:00:00")
        DateTimePicker_start_performancedate.MaxDate = CDate(DateTime.Now).AddMonths(1)
        'reset end datetimepicker
        DateTimePicker_end_performancedate.MinDate = CDate("01.01.1753, 00:00:00")
        DateTimePicker_end_performancedate.MaxDate = CDate(DateTime.Now).AddMonths(1)

        'set the datetimepicker start and end min date
        DateTimePicker_start_performancedate.Value = CDate(Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": "))))
        DateTimePicker_start_performancedate.MinDate = DateTimePicker_start_performancedate.Value

        'set the datetimepicker start date
        DateTimePicker_end_performancedate.MinDate = DateTimePicker_start_performancedate.MinDate


        'forth line (to)
        str_line = obj_reader.ReadLine()

        'set the datetimepicker max date value
        DateTimePicker_end_performancedate.MaxDate = CDate(Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": "))))
        DateTimePicker_start_performancedate.MaxDate = DateTimePicker_end_performancedate.MaxDate

        'set the datetimepicker end date
        DateTimePicker_end_performancedate.Value = DateTimePicker_end_performancedate.MaxDate

        'fith line (sampling rate)
        str_line = obj_reader.ReadLine()
        'range = range & " (" & str_line & ")"

        '-------------------------------------------------

        obj_reader.Close()
        obj_reader.Dispose()

        'make the datetimepicker visible
        DateTimePicker_start_performancedate.Visible = True
        Label_start_performancedate.Visible = True
        DateTimePicker_end_performancedate.Visible = True
        Label_end_performancedata.Visible = True
        'user datetimepicker
        boolean_datetimepicker_set = True

        set_datetimepicker_start_end = "0"

    End Function

#End Region

#Region "Data gathering Procedures x-dimension Array"

    ' this function should analyse a mppk file and puts the x most consuming ldevs in a array. if there are all values with the same utilisation rate then it takes the first ones all other are ignored
    Private Function array_raid_performance_data_put_in_array_mppk_topx(ByVal path_and_filename_mppk As String, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date, ByVal int_how_many_items_to_show As Integer) As Array

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing
        'Dim i As Integer = Nothing
        'Dim j As Integer = Nothing
        Dim int_position As Integer = Nothing
        Dim str_extracted_usage As String = Nothing
        Dim str_extracted_information As String = Nothing

        Dim data_row_counter As Integer = Nothing

        'array of all elements in a line mp and mppk
        Dim array_str_line_mppk As String() = Nothing
        Dim array_str_line_mp As String() = Nothing

        'array of column names
        Dim str_array_performance_data As String() = Nothing

        'top ldev array of the type
        '0,0 -> information about the consumer ; 0,1 -> value of this consumer
        '1,0 -> information about the consumer; 1,1 -> value of this consumer
        'etc
        Dim str_array_top_x_ldevs(0 To int_how_many_items_to_show - 1, 0 To 1) As String

        '----------------------------
        'find the top x (int_how_many_items_to_show) ldevs

        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(path_and_filename_mppk)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        data_row_counter = 1
        int_position = 0
        Do
            'next line
            str_line = obj_reader.ReadLine()

            date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

            If date_compare_result < 0 Then
                'is earlier than date_datetimepicker_start_value
                'NOP
            Else
                'is the same or later than date_datetimepicker_start_value
                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                If date_compare_result <= 0 Then
                    'is earlier than date_datetimepicker_end_value

                    'fills all values of a line in an array
                    array_str_line_mppk = str_line.Split(CChar(","))

                    'go through the mppk csv file line
                    For i = 2 To array_str_line_mppk.Length - 1 Step 1

                        'no empty value in the csv file
                        If Not array_str_line_mppk(i) = "-1" Then

                            str_extracted_usage = csv_extract(array_str_line_mppk(i), 4, CChar(";"))
                            str_extracted_information = csv_extract(array_str_line_mppk(i), 1, CChar(";")) & ";" & csv_extract(array_str_line_mppk(i), 2, CChar(";")) & ";" & csv_extract(array_str_line_mppk(i), 3, CChar(";"))

                            If array_is_element_in_array(str_array_top_x_ldevs, str_extracted_information) Then
                                'element already in array

                                'check if the value of the highest ranked existing element in the array is bigger than the actual one
                                If CInt(str_array_top_x_ldevs(array_get_position_of_element_in_array(str_array_top_x_ldevs, str_extracted_information), 1)) < CInt(str_extracted_usage) Then
                                    'the new value is bigger than the old one

                                    'delete the old element
                                    If array_delete_element_at_position(str_array_top_x_ldevs, array_get_position_of_element_in_array(str_array_top_x_ldevs, str_extracted_information)) = "-1" Then
                                        'error
                                    End If

                                    'is the value bigger than the last value in the array
                                    If CInt(str_extracted_usage) > CInt(str_array_top_x_ldevs(UBound(str_array_top_x_ldevs), 1)) Then
                                        For j = 0 To UBound(str_array_top_x_ldevs) - 1 Step 1
                                            If CInt(str_extracted_usage) > CInt(str_array_top_x_ldevs(j, 1)) Then
                                                int_position = j
                                                Exit For
                                            End If
                                        Next

                                        'insert element in array
                                        If int_position = UBound(str_array_top_x_ldevs) Then
                                            'if it is the last element just overwrite it
                                            str_array_top_x_ldevs(int_position, 0) = str_extracted_information
                                            str_array_top_x_ldevs(int_position, 1) = str_extracted_usage
                                        Else
                                            For j = UBound(str_array_top_x_ldevs) - 1 To int_position Step -1
                                                'shift all following elements one position down
                                                str_array_top_x_ldevs(j + 1, 0) = str_array_top_x_ldevs(j, 0)
                                                str_array_top_x_ldevs(j + 1, 1) = str_array_top_x_ldevs(j, 1)
                                            Next
                                            str_array_top_x_ldevs(int_position, 0) = str_extracted_information
                                            str_array_top_x_ldevs(int_position, 1) = str_extracted_usage
                                        End If

                                    End If

                                Else
                                    'if not do nothing
                                End If

                            Else
                                'element not in array

                                If str_array_top_x_ldevs(UBound(str_array_top_x_ldevs), 1) = Nothing Then
                                    'empty array
                                    'fill the value in the next empty array slot
                                    For j = 0 To UBound(str_array_top_x_ldevs)
                                        If str_array_top_x_ldevs(j, 1) = Nothing Then
                                            str_array_top_x_ldevs(j, 0) = str_extracted_information
                                            str_array_top_x_ldevs(j, 1) = str_extracted_usage
                                            Exit For
                                        End If
                                    Next

                                Else
                                    'already filled up array

                                    'is the value bigger than the last value in the array
                                    If CInt(str_extracted_usage) > CInt(str_array_top_x_ldevs(UBound(str_array_top_x_ldevs), 1)) Then
                                        For j = 0 To UBound(str_array_top_x_ldevs) - 1 Step 1
                                            If CInt(str_extracted_usage) > CInt(str_array_top_x_ldevs(j, 1)) Then
                                                int_position = j
                                                Exit For
                                            End If
                                        Next

                                        'insert element in array
                                        If int_position = UBound(str_array_top_x_ldevs) Then
                                            'if it is the last element just overwrite it
                                            str_array_top_x_ldevs(int_position, 0) = str_extracted_information
                                            str_array_top_x_ldevs(int_position, 1) = str_extracted_usage
                                        Else
                                            For j = UBound(str_array_top_x_ldevs) - 1 To int_position Step -1
                                                'shift all following elements one position down
                                                str_array_top_x_ldevs(j + 1, 0) = str_array_top_x_ldevs(j, 0)
                                                str_array_top_x_ldevs(j + 1, 1) = str_array_top_x_ldevs(j, 1)
                                            Next
                                            str_array_top_x_ldevs(int_position, 0) = str_extracted_information
                                            str_array_top_x_ldevs(int_position, 1) = str_extracted_usage
                                        End If

                                    End If
                                End If
                            End If



                        End If
                    Next

                    array_str_line_mppk = Nothing
                    data_row_counter = data_row_counter + 1

                End If

            End If

            date_compare_result = Nothing

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing
        data_row_counter = Nothing

        array_raid_performance_data_put_in_array_mppk_topx = str_array_top_x_ldevs

    End Function
    ' this function should find the x most consuming resources in a csv file other than the mppk file.
    Private Function dictionary_raid_performance_data_put_in_dictionary_topx(ByVal str_path_and_filename As String, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date, ByVal int_how_many_items_to_show As Integer, ByVal str_what_to_do As String, ByVal str_what_origin As String) As Dictionary(Of String, Double)

        'description of the function:
        '----------------------------
        'puts the x top (max or highest average) elements in an array

        'dictionary where all elements and values are in
        Dim dictionary_all_name_value As New Dictionary(Of String, Double)

        ' if file does not exist exit function. return code is "-1" in the first line of the dictionary
        If Not File.Exists(str_path_and_filename) Then
            dictionary_all_name_value.Clear()
            dictionary_all_name_value.Add(str_no_result, CDbl(str_no_result))
            dictionary_raid_performance_data_put_in_dictionary_topx = dictionary_all_name_value
            dictionary_all_name_value.Clear()
            Exit Function
        End If

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing

        'this represents the number of performance lines the array will have
        Dim int_line_count_total As Integer = Nothing

        Dim boolean_exists As Boolean = Nothing

        'temp variable to reduce csv extract functions
        Dim str_temp_value As String = Nothing
        Dim str_temp_total_value As String = Nothing

        'array of all performance elements in the performance value line
        Dim array_str_line() As String = Nothing

        ' how many positions are in the positions array element
        Dim int_csv_length As Integer = Nothing

        'temp variable to set the value to compare
        Dim str_temp_what_to_compare_and_set As String = Nothing

        'rowcounter to extend the array (2 is the first performance line)
        Dim int_row_counter As Integer = Nothing

        'is a value found in that descriptor line
        Dim boolean_value_found_in_descriptor_line As Boolean = False

        Dim boolean_performance_value_row_created As Boolean = False
        Dim boolean_do_not_create_performance_rows_in_array As Boolean = False

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting top " & ToolStripComboBox_topx_value.Text & " elements"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = 0
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        '-----------------------------------------
        'calculate lines
        int_row_counter = 0
        Dim boolean_found_descriptor_line As Boolean = False
        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(str_path_and_filename)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        Do
            'next line
            str_line = obj_reader.ReadLine()

            If InStr(str_line, str_no_value) <> 0 Then
                boolean_found_descriptor_line = True
            End If

            If Not boolean_found_descriptor_line Then

                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

                If date_compare_result < 0 Then
                    'is earlier than date_datetimepicker_start_value
                    'NOP
                Else
                    'is the same or later than date_datetimepicker_start_value
                    date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                    If date_compare_result <= 0 Then
                        'is earlier than date_datetimepicker_end_value

                        int_row_counter = int_row_counter + 1

                    End If

                End If

                date_compare_result = Nothing

            End If

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing
        boolean_found_descriptor_line = Nothing
        int_line_count_total = int_row_counter

        ' if there are no performance line found exit function. return code is "-1" in the first line of the dictionary
        If int_line_count_total = 0 Then
            dictionary_all_name_value.Clear()
            dictionary_all_name_value.Add(str_no_result, CDbl(str_no_result))
            dictionary_raid_performance_data_put_in_dictionary_topx = dictionary_all_name_value
            dictionary_all_name_value.Clear()
            Exit Function
        End If

        'top array of the names an values
        '0,0 -> information about the consumer ; 0,1 -> value of this consumer
        '1,0 -> information about the consumer; 1,1 -> value of this consumer
        'etc
        'create array (will be cleared after each section)
        Dim array_name_value_temp(0 To 0, 0 To 1) As String

        '-----------------------------------------

        '----------------------------
        'process data

        'set row counter to initial value
        int_row_counter = 0

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_path_and_filename)

        str_line = obj_reader.ReadLine
        'PHY_Short_MP.csv()

        'next line
        str_line = obj_reader.ReadLine()
        'Serial number : 86094(VSP)

        'next line
        str_line = obj_reader.ReadLine()
        'From : 2013/07/18 07:33

        'next line
        str_line = obj_reader.ReadLine()
        'To   : 2013/07/19 07:33

        'next line
        str_line = obj_reader.ReadLine()
        'sampling rate : 1

        'next line
        str_line = obj_reader.ReadLine()

        'first row in array where performance data starts
        int_row_counter = 0

        Do
            'next line
            str_line = obj_reader.ReadLine()

            'counter for the progress bar
            int_row_counter = int_row_counter + 1

            '----------------------------------
            If InStr(str_line, "No.") <> 0 Then 'instr descriptorline 
                'descriptor line

                'if there are more than one block in the file
                If Not UBound(array_name_value_temp, 1) = 0 Then
                    'all other blocks but the last one
                    Select Case str_what_to_do
                        Case "average"
                            For i As Integer = 0 To UBound(array_name_value_temp, 1) Step 1
                                dictionary_all_name_value.Add(array_name_value_temp(i, 0), CDbl(array_name_value_temp(i, 1)) / CDbl(int_line_count_total))
                            Next
                        Case Else
                            For i As Integer = 0 To UBound(array_name_value_temp, 1) Step 1
                                dictionary_all_name_value.Add(array_name_value_temp(i, 0), CDbl(array_name_value_temp(i, 1)))
                            Next
                    End Select
                End If

                'get rid of the " sign
                str_line = Strings.Replace(str_line, Chr(34), "")
                array_str_line = str_line.Split(CChar(","))

                'top array of the type
                '0,0 -> information about the consumer ; 0,1 -> value of this consumer
                '1,0 -> information about the consumer; 1,1 -> value of this consumer
                'etc
                'create array (will be cleared after each section)
                ReDim array_name_value_temp(0 To array_str_line.Length - 3, 0 To 1)

                'go through all elements in the string line
                For i As Integer = 2 To array_str_line.Length - 1 Step 1

                    'take all elements but the "no." and "time"
                    array_name_value_temp(i - 2, 0) = array_str_line(i)

                Next i

            Else
                'performance line

                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

                If date_compare_result < 0 Then
                    'is earlier than date_datetimepicker_start_selected

                    'NOP

                Else
                    'is the same or later than date_datetimepicker_start_selected

                    date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                    If date_compare_result <= 0 Then
                        'is earlier than date_datetimepicker_end_selected


                        'go through all elements in the string line
                        array_str_line = str_line.Split(CChar(","))

                        'take all elements but the "no." and "time"
                        For i As Integer = 2 To array_str_line.Length - 1 Step 1

                            Select Case str_what_to_do

                                Case "min"

                                    If IsNothing(array_name_value_temp(i - 2, 1)) Then
                                        array_name_value_temp(i - 2, 1) = CStr(CDbl(array_str_line(i)))
                                    Else
                                        'If new value is smaller than the existing one then replace
                                        If CDbl(array_str_line(i)) < CDbl(array_name_value_temp(i - 2, 1)) Then
                                            array_name_value_temp(i - 2, 1) = CStr(CDbl(array_str_line(i)))
                                        End If
                                    End If

                                Case "max"

                                    If IsNothing(array_name_value_temp(i - 2, 1)) Then
                                        array_name_value_temp(i - 2, 1) = CStr(CDbl(array_str_line(i)))
                                    Else
                                        'If new value is bigger than the existing one then replace
                                        If CDbl(array_str_line(i)) > CDbl(array_name_value_temp(i - 2, 1)) Then
                                            array_name_value_temp(i - 2, 1) = CStr(CDbl(array_str_line(i)))
                                        End If
                                    End If


                                Case "average"

                                    If IsNothing(array_name_value_temp(i - 2, 1)) Then
                                        array_name_value_temp(i - 2, 1) = CStr(CDbl(array_str_line(i)))
                                    Else
                                        If Not CDbl(array_str_line(i)) = 0 Then
                                            array_name_value_temp(i - 2, 1) = CStr(CDbl(array_name_value_temp(i - 2, 1)) + CDbl(array_str_line(i)))
                                        End If
                                    End If

                            End Select

                        Next i

                        '---------------------------------------
                        'progressbar
                        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
                        Label_progress_chart.Text = "Collecting top " & ToolStripComboBox_topx_value.Text & " elements"
                        Label_progress_chart.Visible = True
                        Label_progress_chart.Update()
                        If CInt(99 / int_line_count_total * int_row_counter) > 99 Then
                            ProgressBar_chart.Value = 99
                        Else
                            ProgressBar_chart.Value = CInt(99 / int_line_count_total * int_row_counter)
                        End If
                        ProgressBar_chart.Visible = True
                        ProgressBar_chart.Update()
                        '-----------------------------------------

                    End If

                End If

                date_compare_result = Nothing
            End If

            'otherwise if you loose focus on the application it does not show any progress and it seems to hang
            Application.DoEvents()

            date_compare_result = Nothing
        Loop Until obj_reader.EndOfStream

        'last block action
        Select Case str_what_to_do
            Case "average"
                For i As Integer = 0 To UBound(array_name_value_temp, 1) Step 1
                    dictionary_all_name_value.Add(array_name_value_temp(i, 0), CDbl(array_name_value_temp(i, 1)) / CDbl(int_line_count_total))
                Next
            Case Else
                For i As Integer = 0 To UBound(array_name_value_temp, 1) Step 1
                    dictionary_all_name_value.Add(array_name_value_temp(i, 0), CDbl(array_name_value_temp(i, 1)))
                Next
        End Select

        '---------------------------------------
        'progressbar
        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting top " & ToolStripComboBox_topx_value.Text & " elements"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = 100
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        Dim sorted As System.Linq.IOrderedEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Double))
        Select Case str_what_to_do
            Case "min"
                'show the lowest number in the first position of the result and the higherst in the last position
                sorted = From key As KeyValuePair(Of String, Double) In dictionary_all_name_value Order By key.Value Ascending
            Case Else
                'max and average
                'show the highest number in the first position of the result and the last in the last position
                sorted = From key As KeyValuePair(Of String, Double) In dictionary_all_name_value Order By key.Value Descending
        End Select

        Dim sortedDictionary = sorted.ToDictionary(Function(p) p.Key, Function(p) p.Value)
        sorted = Nothing

        'get the x top values
        Dim dictionary_result_name_value As New Dictionary(Of String, Double)
        Dim counter As Integer = 1
        For Each element In sortedDictionary
            dictionary_result_name_value.Add(CStr(element.Key), CDbl(element.Value))
            If counter = int_how_many_items_to_show Then
                'exit after the top x elements
                Exit For
            End If
            counter = counter + 1
        Next
        counter = Nothing

        dictionary_raid_performance_data_put_in_dictionary_topx = dictionary_result_name_value
        dictionary_result_name_value = Nothing
        dictionary_all_name_value = Nothing

    End Function

    '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ''' <summary>
    ''' "dictionary_get_top_x_out_of_several_dictionaries" .
    ''' </summary>
    ''' <param name="list_of_dictionaries">The list_of_dictionaries containing the dictionaries with the top x elements in it. means top x times dictionary.</param>
    ''' <param name="int_top_x_dictionary_size">The int_top_x_dictionary_size.</param>
    ''' <param name="str_progress_bar_text">The str_progress_bar_text.</param>
    ''' <returns>The list of the directories but only the top x elements are still in over all dictionaries</returns>
    Private Function dictionary_get_top_x_out_of_several_dictionaries(ByVal list_of_dictionaries As List(Of Dictionary(Of String, Double)), ByVal int_top_x_dictionary_size As Integer, Optional ByVal str_progress_bar_text As String = "") As List(Of Dictionary(Of String, Double))
        dictionary_get_top_x_out_of_several_dictionaries = Nothing

        Dim dictionary_result_all_top_x_times_list_number As New Dictionary(Of String, Double)

        'get all elements to one dictionary
        dictionary_result_all_top_x_times_list_number.Clear()
        For Each list_element In list_of_dictionaries
            For Each dictionary_element In list_element
                dictionary_result_all_top_x_times_list_number.Add(dictionary_element.Key, dictionary_element.Value)
            Next
        Next

        'sort dictionary by value
        Dim sorted = From pair In dictionary_result_all_top_x_times_list_number Order By pair.Value Descending
        Dim sortedDictionary = sorted.ToDictionary(Function(p) p.Key, Function(p) p.Value)

        'fill the sorted dictionary to the "dictionary_result_all_top_x_times_list_number" but only the top x ones
        Dim a_pair As KeyValuePair(Of String, Double)
        Dim int_counter As Integer = 0
        dictionary_result_all_top_x_times_list_number.Clear()
        If sortedDictionary.Count >= int_top_x_dictionary_size Then
            For Each a_pair In sortedDictionary
                If int_counter >= int_top_x_dictionary_size Then
                    Exit For
                Else
                    int_counter = int_counter + 1
                    'add element to dictionary
                    dictionary_result_all_top_x_times_list_number.Add(a_pair.Key, a_pair.Value)
                End If
            Next
        Else
            'less than the top_x number is selected just take all elements
            For Each a_pair In sortedDictionary
                int_counter = int_counter + 1
                'add element to dictionary
                dictionary_result_all_top_x_times_list_number.Add(a_pair.Key, a_pair.Value)
            Next
        End If
        sorted = Nothing
        sortedDictionary = Nothing
        int_counter = Nothing
        a_pair = Nothing

        Dim list_key As New List(Of String)
        list_key.Clear()

        'remove the elements in the dictionaries they exist.
        For int_count As Integer = 0 To list_of_dictionaries.Count - 1 Step 1
            'go through all elements in one file
            For Each dictionary_single_file_element In list_of_dictionaries(int_count)
                If Not dictionary_result_all_top_x_times_list_number.TryGetValue(dictionary_single_file_element.Key, dictionary_single_file_element.Value) Then
                    'create list of all elements to delete
                    list_key.Add(dictionary_single_file_element.Key)
                End If
            Next

            'delete the elements that are not in the top x of all files
            For Each list_element In list_key
                'delete the dictionary element
                list_of_dictionaries(int_count).Remove(list_element)
            Next
            'clear list
            list_key.Clear()

        Next

        'set return value
        dictionary_get_top_x_out_of_several_dictionaries = list_of_dictionaries

    End Function
    'puts all mppk elements in "what_to_look_for" in one array
    Private Function array_raid_performance_data_put_in_array_mppk(ByVal str_path_and_filename_mppk As String, ByVal str_path_and_filename_mp As String, ByVal str_what_to_look_for As String, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date, ByVal int_progress_start_value As Integer, ByVal int_progress_end_value As Integer, int_how_many_descriptor_lines As Integer, Optional ByVal str_option As String = "topx") As Array

        'what_to_look_for definition
        'example
        'empty means all
        'Open-Target;JNLG;2
        'Open-Initiator;JNLG;2
        'BackEnd;LDEV;00:14:13

        'minus values
        Dim str_minus_values As String = Nothing
        'dictionary to temp save the summarized values
        Dim dictionary_mppk_type_row_values As New Dictionary(Of String, Integer)
        'different types
        Dim str_backend_ldev As String = "BackEnd;LDEV"
        Dim str_opentarget_ldev As String = "Open-Target;LDEV"
        Dim str_openinitiator_ldev As String = "Open-Initiator;LDEV"
        Dim str_mftarget_ldev As String = "MF-Target;LDEV"
        Dim str_system_jnlg_start As String = "System;JNLG"
        Dim str_openexternal_exg_start As String = "Open-External;ExG"
        Dim str_mfexternal_exg_start As String = "MF-External;ExG"

        'temp counter
        Dim int_temp_counter As Integer = Nothing
        Dim str_temp_value As String = Nothing
        Dim str_temp_value2 As String = Nothing

        'mppk type variables
        Dim str_mppk_types_sum As String = Nothing
        Dim array_str_line_mppk As Array = Nothing

        ' if file does not exist exit function. return code is "-1" in the first line of the array
        If Not File.Exists(str_path_and_filename_mppk) Then
            array_raid_performance_data_put_in_array_mppk = {-1}
            Exit Function
        End If

        ' if file does not exist exit function. return code is "-1" in the first line of the array
        If Not File.Exists(str_path_and_filename_mp) Then
            array_raid_performance_data_put_in_array_mppk = {-1}
            Exit Function
        End If

        'PHY_Short_MP.csv()
        Dim str_file_name As String = Nothing
        'Serial number : 86094(VSP)
        Dim str_serial_number As String = Nothing
        'From : 2013/07/18 07:33
        Dim str_from As String = Nothing
        'To   : 2013/07/19 07:33
        Dim str_to As String = Nothing
        'sampling rate : 1
        Dim str_sampling_rate As String = Nothing

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing

        'this represents the number of performance lines the array will have
        Dim int_line_count_total As Integer = Nothing

        'rowcounter to extend the array (2 is the first performance line)
        Dim int_row_counter As Integer = Nothing

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting Data"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = int_progress_start_value
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        '-----------------------------------------
        'calculate lines
        int_row_counter = 0
        Dim boolean_found_descriptor_line As Boolean = False
        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(str_path_and_filename_mppk)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        Do
            'next line
            str_line = obj_reader.ReadLine()

            If InStr(str_line, str_no_value) <> 0 Then
                boolean_found_descriptor_line = True
            End If


            If Not boolean_found_descriptor_line Then

                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

                If date_compare_result < 0 Then
                    'is earlier than date_datetimepicker_start_value
                    'NOP
                Else
                    'is the same or later than date_datetimepicker_start_value
                    date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                    If date_compare_result <= 0 Then
                        'is earlier than date_datetimepicker_end_value

                        int_row_counter = int_row_counter + 1

                    End If

                End If

                date_compare_result = Nothing

            End If

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing
        boolean_found_descriptor_line = Nothing
        int_line_count_total = int_row_counter

        ' if there are no performance line found exit function. return code is "-1" in the first line of the array
        If int_line_count_total = 0 Then
            array_raid_performance_data_put_in_array_mppk = {-1}
            Exit Function
        End If

        '-----------------------------------------

        'array of column names
        'top ldev array of the type
        '0,0 -> information about the consumer ; 0,1 -> value of this consumer
        '1,0 -> information about the consumer; 1,1 -> value of this consumer
        'etc

        'create performance array body
        Dim str_array_performance_data(int_how_many_descriptor_lines + int_line_count_total, 0) As String

        '----------------------------
        'get mppk performance data

        'set row counter to initial value
        int_row_counter = int_how_many_descriptor_lines + 1

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_path_and_filename_mppk)

        str_line = obj_reader.ReadLine
        'PHY_Short_MP.csv()
        str_array_performance_data(0, 0) = "file name"
        str_file_name = str_line

        'next line
        str_line = obj_reader.ReadLine()
        'Serial number : 86094(VSP)
        str_array_performance_data(1, 0) = "serial"
        str_serial_number = str_line

        'next line
        str_line = obj_reader.ReadLine()
        'From : 2013/07/18 07:33
        str_array_performance_data(2, 0) = "from"
        str_from = str_line

        'next line
        str_line = obj_reader.ReadLine()
        'To   : 2013/07/19 07:33
        str_array_performance_data(3, 0) = "to"
        str_to = str_line

        'next line
        str_line = obj_reader.ReadLine()
        'sampling rate : 1
        str_array_performance_data(4, 0) = "sampling rate"
        str_sampling_rate = str_line

        'next line
        str_line = obj_reader.ReadLine()

        'this field is reserved for minus values in the data
        str_array_performance_data(int_how_many_descriptor_lines - 3, 0) = "average item counter"
        str_array_performance_data(int_how_many_descriptor_lines - 2, 0) = "minus values"
        str_array_performance_data(int_how_many_descriptor_lines - 1, 0) = "Position"
        str_array_performance_data(int_how_many_descriptor_lines, 0) = "Date"

        'execute as option selected. default is "topx" means schow the top x ldevs 
        Select Case str_option
            Case "topx"
                'if only some elemnts have to be taken the size of the array is fix (number of elements in str_what_to_look_for)
                If Not str_what_to_look_for = "" Then

                    ReDim Preserve str_array_performance_data(int_how_many_descriptor_lines + int_line_count_total, csv_length(str_what_to_look_for, CChar(",")))

                    'fill in the element names and the related information
                    int_temp_counter = 1
                    For Each element As String In Split(str_what_to_look_for, ",")
                        str_array_performance_data(0, int_temp_counter) = str_file_name
                        str_array_performance_data(1, int_temp_counter) = str_serial_number
                        str_array_performance_data(2, int_temp_counter) = str_from
                        str_array_performance_data(3, int_temp_counter) = str_to
                        str_array_performance_data(4, int_temp_counter) = str_sampling_rate
                        str_array_performance_data(int_array_descritor_line_count, int_temp_counter) = element
                        int_temp_counter = int_temp_counter + 1
                    Next
                    int_temp_counter = Nothing
                End If

            Case "type"

                'NOP

        End Select

        'next line
        str_line = obj_reader.ReadLine()

        'performance values
        Do
            'next line
            str_line = obj_reader.ReadLine()

            date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

            If date_compare_result < 0 Then
                'is earlier than date_datetimepicker_start_value
                'NOP
            Else
                'is the same or later than date_datetimepicker_start_value
                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                If date_compare_result <= 0 Then
                    'is earlier than date_datetimepicker_end_value

                    ' insert the date
                    str_array_performance_data(int_row_counter, 0) = CStr(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")))

                    'execute as option selected. default is "topx" means schow the top x ldevs 
                    Select Case str_option
                        Case "topx"
                            'if str_what_to_look_for is "" then take all elements otherwise just take the selected elements
                            If Not str_what_to_look_for = "" Then
                                ' take only the specified elements

                                'go through the str_what_to_look_for elements
                                For Each str_performance_element As String In Split(str_what_to_look_for, ",")
                                    'if "-4" is in one of the elements then this applies for all elements. therefore add -4 to all elements in the array
                                    If IsNumeric(csv_extract(str_line, 3, CChar(","))) Then
                                        For i As Integer = 1 To UBound(str_array_performance_data, 2) Step 1
                                            If str_array_performance_data(int_how_many_descriptor_lines - 2, i) = "" Then
                                                str_array_performance_data(int_how_many_descriptor_lines - 2, i) = csv_extract(str_line, 3, CChar(","))
                                            Else
                                                'only write it in if it does not already exists
                                                If Not InStr(str_array_performance_data(int_how_many_descriptor_lines - 2, i), csv_extract(str_line, 3, CChar(","))) <> 0 Then
                                                    str_array_performance_data(int_how_many_descriptor_lines - 2, i) = str_array_performance_data(int_how_many_descriptor_lines - 2, i) & "," & csv_extract(str_line, 3, CChar(","))
                                                End If
                                            End If

                                        Next
                                    End If

                                    'is it in the actual performance data line?
                                    If InStr(str_line, str_performance_element) <> 0 Then

                                        str_temp_value = csv_extract(csv_extract(str_line, csv_get_position_contains_value(str_line, str_performance_element, CChar(",")), CChar(",")), 4, CChar(";"))

                                        'set value
                                        str_array_performance_data(int_row_counter, int_position_in_array_descriptor_line(str_performance_element, int_how_many_descriptor_lines, str_array_performance_data)) = str_temp_value
                                        'set average value + 1
                                        str_array_performance_data(int_how_many_descriptor_lines - 3, int_position_in_array_descriptor_line(str_performance_element, int_how_many_descriptor_lines, str_array_performance_data)) = CStr(CDbl(str_array_performance_data(int_how_many_descriptor_lines - 3, int_position_in_array_descriptor_line(str_performance_element, int_how_many_descriptor_lines, str_array_performance_data))) + 1)

                                    Else
                                        'this element does not exist in the date line so we set the value to 0
                                        str_array_performance_data(int_row_counter, int_position_in_array_descriptor_line(str_performance_element, int_how_many_descriptor_lines, str_array_performance_data)) = "0"
                                    End If
                                    str_temp_value = Nothing
                                Next

                            Else
                                'take all elements

                                'go through all the elements in the performance line
                                For Each str_performance_element As String In Split(str_line, ",")
                                    'the first two elements can be ignored
                                    If InStr(str_performance_element, ";") <> 0 Then
                                        'is it already in the array?

                                        Dim str_temp_descriptor_name As String = Strings.Left(str_performance_element, InStrRev(str_performance_element, ";") - 1)

                                        If boolean_is_in_array_descriptor_line(str_temp_descriptor_name, int_how_many_descriptor_lines, str_array_performance_data) Then
                                            str_temp_value = csv_extract(csv_extract(str_line, csv_get_position_contains_value(str_line, str_performance_element, CChar(",")), CChar(",")), 4, CChar(";"))
                                            'set value
                                            str_array_performance_data(int_row_counter, int_position_in_array_descriptor_line(str_temp_descriptor_name, int_how_many_descriptor_lines, str_array_performance_data) + 1) = str_temp_value
                                            'set average value + 1
                                            str_array_performance_data(int_how_many_descriptor_lines - 3, int_position_in_array_descriptor_line(str_temp_descriptor_name, int_how_many_descriptor_lines, str_array_performance_data) + 1) = CStr(CDbl(str_array_performance_data(int_how_many_descriptor_lines - 3, int_position_in_array_descriptor_line(str_performance_element, int_how_many_descriptor_lines, str_array_performance_data) + 1)) + 1)
                                            str_temp_value = Nothing
                                        Else
                                            ReDim Preserve str_array_performance_data(int_how_many_descriptor_lines + int_line_count_total, UBound(str_array_performance_data, 2) + 1)

                                            'fill in the array the additional information
                                            str_array_performance_data(0, UBound(str_array_performance_data, 2)) = str_file_name
                                            str_array_performance_data(1, UBound(str_array_performance_data, 2)) = str_serial_number
                                            str_array_performance_data(2, UBound(str_array_performance_data, 2)) = str_from
                                            str_array_performance_data(3, UBound(str_array_performance_data, 2)) = str_to
                                            str_array_performance_data(4, UBound(str_array_performance_data, 2)) = str_sampling_rate
                                            str_array_performance_data(5, UBound(str_array_performance_data, 2)) = CStr(1)
                                            'descriptor
                                            str_array_performance_data(int_array_descritor_line_count, UBound(str_array_performance_data, 2)) = str_temp_descriptor_name
                                            'value
                                            str_array_performance_data(int_row_counter, UBound(str_array_performance_data, 2)) = csv_extract(str_performance_element, 4, CChar(";"))
                                            'do we have to fill up zeros in the column because this element was not in the previous performance lines. so we have to fill in zeros in the column fields before
                                            If int_row_counter > int_how_many_descriptor_lines + 1 Then
                                                For i As Integer = int_how_many_descriptor_lines + 1 To int_row_counter - 1 Step 1
                                                    str_array_performance_data(i, UBound(str_array_performance_data, 2)) = CStr(0)
                                                Next
                                            End If

                                        End If
                                    End If
                                Next

                                'fill all fields with zero that have no value yet
                                For i As Integer = 1 To UBound(str_array_performance_data, 2) Step 1
                                    If IsNothing(str_array_performance_data(int_row_counter, i)) Then
                                        str_array_performance_data(int_row_counter, i) = CStr(0)
                                    End If
                                Next

                            End If

                        Case "type" ' this options shows the mppk data in type of data

                            'fills all values of a line in an array
                            array_str_line_mppk = str_line.Split(CChar(","))

                            ' * the kernel type is any one of the following types:
                            ' Open-Target, Open-Initiator, Open-External, MF-Target, MF-External, BackEnd, or System.

                            'reset dictionary
                            dictionary_mppk_type_row_values.Clear()

                            'go through the mppk csv file line
                            For j = 2 To array_str_line_mppk.Length - 1 Step 1

                                If Not IsNumeric(array_str_line_mppk.GetValue(j)) Then

                                    '• Performance information of LDEVs
                                    'Kernel-type *;LDEV;LDEV-number;Usage-rate
                                    '• Performance information of journals
                                    'Kernel-type *;JNLG; Journal-number;Usage-rates
                                    '• Performance information of external volumes
                                    'Kernel-type *;ExG;External-volume-groupnumber;Usage-rate
                                    '"BackEnd,System,Open-Target,Open-Initiator,Open-External,MF-Target,MF-External"

                                    'important information you want to have
                                    'LDEV actions 
                                    '-> Backend;LDEV
                                    '-> Open-Target;LDEV
                                    '-> Open-Initiator;LDEV
                                    '-> MF-Target;LDEV
                                    'Journal Group actions -> all JNL Groups (System;JNLG;#)
                                    'External Group actions -> all External Groups ([Open-External/MF-External];ExG;#)

                                    'Dim str_backend_ldev As String = "Backend;LDEV"
                                    'Dim str_opentarget_ldev As String = "Open-Target;LDEV"
                                    'Dim str_openinitiator_ldev As String = "Open-Initiator;LDEV"
                                    'Dim str_mftarget_ldev As String = "MF-Target;LDEV"
                                    'Dim str_system_jnlg_start As String = "System;JNLG"
                                    'Dim str_openexternal_exg_start As String = "Open-External;ExG"
                                    'Dim str_mfexternal_exg_start As String = "MF-External;ExG"


                                    Dim str_type_name As String = CStr(csv_extract(array_str_line_mppk.GetValue(j).ToString, 1, CChar(";")) & ";" & csv_extract(array_str_line_mppk.GetValue(j).ToString, 2, CChar(";")))
                                    Select Case CStr(csv_extract(array_str_line_mppk.GetValue(j).ToString, 1, CChar(";")) & ";" & csv_extract(array_str_line_mppk.GetValue(j).ToString, 2, CChar(";")))

                                        Case str_backend_ldev
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_backend_ldev) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_backend_ldev, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_backend_ldev) = CInt(dictionary_mppk_type_row_values.Item(str_backend_ldev) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If

                                        Case str_opentarget_ldev
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_opentarget_ldev) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_opentarget_ldev, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_opentarget_ldev) = CInt(dictionary_mppk_type_row_values.Item(str_opentarget_ldev) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If

                                        Case str_openinitiator_ldev
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_openinitiator_ldev) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_openinitiator_ldev, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_openinitiator_ldev) = CInt(dictionary_mppk_type_row_values.Item(str_openinitiator_ldev) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If

                                        Case str_mftarget_ldev
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_mftarget_ldev) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_mftarget_ldev, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_mftarget_ldev) = CInt(dictionary_mppk_type_row_values.Item(str_mftarget_ldev) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If

                                        Case str_mftarget_ldev
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_mftarget_ldev) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_mftarget_ldev, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_mftarget_ldev) = CInt(dictionary_mppk_type_row_values.Item(str_mftarget_ldev) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If

                                        Case str_system_jnlg_start
                                            'all journal groups
                                            str_temp_value = str_system_jnlg_start & ";" & csv_extract(array_str_line_mppk.GetValue(j).ToString, 3, CChar(";"))
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_temp_value) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_temp_value, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_temp_value) = CInt(dictionary_mppk_type_row_values.Item(str_temp_value) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If
                                            str_temp_value = Nothing

                                        Case str_openexternal_exg_start
                                            'all open external groups
                                            str_temp_value = str_openexternal_exg_start & ";" & csv_extract(array_str_line_mppk.GetValue(j).ToString, 3, CChar(";"))
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_temp_value) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_temp_value, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_temp_value) = CInt(dictionary_mppk_type_row_values.Item(str_temp_value) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 4, CChar(";"))))
                                            End If
                                            str_temp_value = Nothing

                                        Case str_mfexternal_exg_start
                                            'all mf external groups
                                            str_temp_value = str_mfexternal_exg_start & ";" & csv_extract(array_str_line_mppk.GetValue(j).ToString, 3, CChar(";"))
                                            If Not dictionary_mppk_type_row_values.ContainsKey(str_temp_value) Then
                                                'add the new value as it did not exist before
                                                dictionary_mppk_type_row_values.Add(str_temp_value, CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 3, CChar(";"))))
                                            Else
                                                'add the new value to the existing one
                                                dictionary_mppk_type_row_values.Item(str_temp_value) = CInt(dictionary_mppk_type_row_values.Item(str_temp_value) + CInt(csv_extract(array_str_line_mppk.GetValue(j).ToString, 3, CChar(";"))))
                                            End If
                                            str_temp_value = Nothing

                                    End Select

                                Else
                                    'minus value
                                    If IsNothing(str_minus_values) Then
                                        str_minus_values = array_str_line_mppk.GetValue(j).ToString
                                    Else
                                        'only write it in if it does not already exists
                                        If Not InStr(str_minus_values, array_str_line_mppk.GetValue(j).ToString) <> 0 Then
                                            str_minus_values = str_minus_values & "," & array_str_line_mppk.GetValue(j).ToString
                                        End If
                                    End If

                                End If
                            Next

                            If Not dictionary_mppk_type_row_values.Count = 0 Then

                                For Each element In dictionary_mppk_type_row_values
                                    If Not boolean_is_in_array_descriptor_line(element.Key, int_how_many_descriptor_lines, str_array_performance_data) Then
                                        'new element in array
                                        ReDim Preserve str_array_performance_data(UBound(str_array_performance_data, 1), UBound(str_array_performance_data, 2) + 1)

                                        'fill in the array the additional information
                                        str_array_performance_data(0, UBound(str_array_performance_data, 2)) = str_file_name
                                        str_array_performance_data(1, UBound(str_array_performance_data, 2)) = str_serial_number
                                        str_array_performance_data(2, UBound(str_array_performance_data, 2)) = str_from
                                        str_array_performance_data(3, UBound(str_array_performance_data, 2)) = str_to
                                        str_array_performance_data(4, UBound(str_array_performance_data, 2)) = str_sampling_rate
                                        str_array_performance_data(5, UBound(str_array_performance_data, 2)) = CStr(1)

                                        'descriptor line
                                        str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = element.Key

                                        'value
                                        str_array_performance_data(int_row_counter, UBound(str_array_performance_data, 2)) = CStr(element.Value)

                                        'fill zeros at the dates before
                                        For i As Integer = int_how_many_descriptor_lines + 1 To int_row_counter - 1 Step 1
                                            str_array_performance_data(i, UBound(str_array_performance_data, 2)) = "0"
                                        Next

                                    Else
                                        'existing element in array
                                        ' Dim testwzwetz As Integer = int_position_in_array_descriptor_line(element.Key, int_how_many_descriptor_lines, str_array_performance_data)
                                        str_array_performance_data(int_row_counter, int_position_in_array_descriptor_line(element.Key, int_how_many_descriptor_lines, str_array_performance_data)) = CStr(element.Value)
                                    End If

                                Next

                            End If

                            array_str_line_mppk = Nothing

                    End Select

                    'next line
                    int_row_counter = int_row_counter + 1

                    '---------------------------------------
                    'progressbar
                    'calculate lines in file for the progressbar
                    Label_progress_chart.TextAlign = ContentAlignment.TopCenter
                    Label_progress_chart.Text = "Collecting Data"
                    Label_progress_chart.Visible = True
                    Label_progress_chart.Update()
                    If CInt((int_progress_end_value - int_progress_start_value) / int_line_count_total * int_row_counter) >= 100 Then
                        ProgressBar_chart.Value = 100
                    Else
                        ProgressBar_chart.Value = CInt((int_progress_end_value - int_progress_start_value) / int_line_count_total * int_row_counter)
                    End If
                    ProgressBar_chart.Visible = True
                    ProgressBar_chart.Update()
                    '-----------------------------------------

                End If
            End If
            date_compare_result = Nothing
        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        'if option is type then add all minus values to the elements
        If str_option = "type" Then

            If UBound(str_array_performance_data, 2) > 0 Then
                For i As Integer = 1 To UBound(str_array_performance_data, 2) - 1 Step 1
                    str_array_performance_data(6, i) = str_minus_values
                Next
            End If

        End If

        array_raid_performance_data_put_in_array_mppk = str_array_performance_data
        str_array_performance_data = Nothing
    End Function
    Private Function array_raid_performance_data_put_in_array(ByVal str_path_and_filename As String, ByVal str_what_to_look_for As String, ByVal str_what_origin As String, ByVal str_what_to_do As String, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date, ByVal int_progress_start_value As Integer, ByVal int_progress_end_value As Integer, ByVal int_how_many_descriptor_lines As Integer, Optional ByVal str_progress_bar_text As String = "") As Array
        'description of the function:
        '----------------------------
        'puts all elements in "what_to_look_for" and the performance data in one array

        ' if file does not exist exit function. return code is "-1" in the first line of the array
        If Not File.Exists(str_path_and_filename) Then
            array_raid_performance_data_put_in_array = {-1}
            Exit Function
        End If

        Dim str_file_name As String = Nothing
        'Serial number : 86094(VSP)
        Dim str_serial_number As String = Nothing
        'From : 2013/07/18 07:33
        Dim str_from As String = Nothing
        'To   : 2013/07/19 07:33
        Dim str_to As String = Nothing
        'sampling rate : 1
        Dim str_sampling_rate As String = Nothing

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing

        'this represents the number of performance lines the array will have
        Dim int_line_count_total As Integer = Nothing

        Dim boolean_exists As Boolean = Nothing

        'temp variable to reduce csv extract functions
        Dim str_temp_value As String = Nothing
        Dim str_temp_total_value As String = Nothing

        'array of all performance elements in the performance value line
        Dim array_str_line() As String = Nothing

        ' how many positions are in the positions array element
        Dim int_csv_length As Integer = Nothing

        'temp variable to set the value to compare
        Dim str_temp_what_to_compare_and_set As String = Nothing

        'rowcounter to extend the array (2 is the first performance line)
        Dim int_row_counter As Integer = Nothing

        'is a value found in that descriptor line
        Dim boolean_value_found_in_descriptor_line As Boolean = False

        Dim boolean_performance_value_row_created As Boolean = False
        Dim boolean_do_not_create_performance_rows_in_array As Boolean = False

        'the position of the element in the array if the same element already exists
        Dim int_descriptor_exists_position As Integer = Nothing

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting performance data " & str_progress_bar_text
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = int_progress_start_value
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        '-----------------------------------------
        'calculate lines
        int_row_counter = 0
        Dim boolean_found_descriptor_line As Boolean = False
        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(str_path_and_filename)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        'progress bar variable 
        Dim int_progress_bar_update_counter As Integer = 0
        
        Do
            'next line
            str_line = obj_reader.ReadLine()

            If InStr(str_line, str_no_value) <> 0 Then
                boolean_found_descriptor_line = True
            End If


            If Not boolean_found_descriptor_line Then

                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

                If date_compare_result < 0 Then
                    'is earlier than date_datetimepicker_start_value
                    'NOP
                Else
                    'is the same or later than date_datetimepicker_start_value
                    date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                    If date_compare_result <= 0 Then
                        'is earlier than date_datetimepicker_end_value

                        int_row_counter = int_row_counter + 1

                    End If

                End If

                date_compare_result = Nothing

            End If

        Loop Until obj_reader.EndOfStream
                obj_reader.Close()
                obj_reader.Dispose()
                obj_reader = Nothing
                str_line = Nothing
                boolean_found_descriptor_line = Nothing
                int_line_count_total = int_row_counter

                ' if there are no performance line found exit function. return code is "-1" in the first line of the array
                If int_line_count_total = 0 Then
                    array_raid_performance_data_put_in_array = {-1}
                    Exit Function
                End If

                '-----------------------------------------

                'array of column names
                'top ldev array of the type
                '0,0 -> information about the consumer ; 0,1 -> value of this consumer
                '1,0 -> information about the consumer; 1,1 -> value of this consumer
                'etc

                Dim str_array_performance_data(int_line_count_total + int_how_many_descriptor_lines, 0) As String

                '----------------------------
                'get mppk performance data

                'set row counter to initial value
                int_row_counter = 0

                'open the stream and read it by line
                obj_reader = New System.IO.StreamReader(str_path_and_filename)

                str_line = obj_reader.ReadLine
                'PHY_Short_MP.csv()
                str_array_performance_data(0, 0) = "file name"
                str_file_name = str_line

                'next line
                str_line = obj_reader.ReadLine()
                'Serial number : 86094(VSP)
                str_array_performance_data(1, 0) = "serial"
                str_serial_number = str_line

                'next line
                str_line = obj_reader.ReadLine()
                'From : 2013/07/18 07:33
                str_array_performance_data(2, 0) = "from"
                str_from = str_line

                'next line
                str_line = obj_reader.ReadLine()
                'To   : 2013/07/19 07:33
                str_array_performance_data(3, 0) = "to"
                str_to = str_line

                'next line
                str_line = obj_reader.ReadLine()
                'sampling rate : 1
                str_array_performance_data(4, 0) = "sampling rate"
                str_sampling_rate = str_line

                'next line
                str_line = obj_reader.ReadLine()

                'this field is reserved for minus values in the data
                str_array_performance_data(int_how_many_descriptor_lines - 3, 0) = "average item counter"
                str_array_performance_data(int_how_many_descriptor_lines - 2, 0) = "minus values"
                str_array_performance_data(int_how_many_descriptor_lines - 1, 0) = "Position"
                str_array_performance_data(int_how_many_descriptor_lines, 0) = "Date"


                Do
                    'next line
                    str_line = obj_reader.ReadLine()

                    '----------------------------------
                    If InStr(str_line, "No.") <> 0 Then 'instr descriptorline 
                        'descriptor line

                        'first row in array where performance data starts
                        int_row_counter = 1

                        'get rid of the " sign
                        str_line = Strings.Replace(str_line, Chr(34), "")

                        'set value found to default
                        boolean_value_found_in_descriptor_line = False

                        'this has to be done because the lu data contains sometimes more than one data block. so the position elements have to be cleared each time
                        For i As Integer = 1 To UBound(str_array_performance_data, 2) Step 1
                            str_array_performance_data(int_how_many_descriptor_lines - 1, i) = Nothing
                        Next

                        'look if the what_to_look_for elements are in the descriptor line
                        For Each str_what_to_look_for_element In str_what_to_look_for.Split(CChar(","))

                            'go through all elements in the string line
                            For Each str_element_in_line As String In str_line.Split(CChar(","))

                                'if are both identical
                                If str_element_in_line = str_what_to_look_for_element Then
                                    'there is a value found in that descriptor line
                                    boolean_value_found_in_descriptor_line = True

                                    ' if the performance value rows exists no new row should be added and the additional values should be added to the existing row
                                    If boolean_performance_value_row_created Then
                                        boolean_do_not_create_performance_rows_in_array = True
                                    End If

                                    'str_what_to_do -> special tasks to do
                                    Select Case str_what_to_do
                                        Case str_sum_up_take_filename_as_name, str_average_up_take_filename_as_name, "add_lu_hsd", "df_sum_up", str_average_up_take_hsd_name, str_take_filename_name
                                            Select Case str_what_to_do
                                                Case str_sum_up_take_filename_as_name, str_average_up_take_filename_as_name, str_take_filename_name
                                                    'add the filename to the descriptor element of the array
                                                    'sum up all element values
                                                    'example "CL7-C.02(x3012sql01clu19_2).0001,CL7-C.02(x3012sql01clu19_2).0002" -> "Sequeantial Read Transfer Rate"
                                                    str_temp_what_to_compare_and_set = Strings.Mid(str_path_and_filename, InStrRev(str_path_and_filename, "\") + 1, str_path_and_filename.Length - InStrRev(str_path_and_filename, "\") - 4)
                                                Case "add_lu_hsd", str_average_up_take_hsd_name
                                                    'used for lu data for high end if you want to show the total hsd values
                                                    'add the parameters to the descriptor of the array but cut the lun number. 
                                            'add the position of all occurences

                                            'example "CL7-C.02(x3012sql01clu19_2).0001,CL7-C.02(x3012sql01clu19_2).0002" -> "CL7-C.02(x3012sql01clu19_2)"
                                            'example "CL7-C.02(x3012sql01clu19_2).1,CL7-C.02(x3012sql01clu19_2).2" -> "CL7-C.02(x3012sql01clu19_2)"
                                            str_temp_what_to_compare_and_set = Strings.Left(str_what_to_look_for_element, InStrRev(str_what_to_look_for_element, ".") - 1)

                                                    
                                                Case "df_sum_up"
                                                    '    'only add the hsd lun number (no ctl name) to the descriptor of the array
                                                    '    'LU0101 Random Read and not CTL0-LU0101
                                                    str_temp_what_to_compare_and_set = Strings.Right(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5) & " " & Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(" ") - (str_path_and_filename.LastIndexOf("\") + 1))
                                            End Select

                                            'go through the array descriptor
                                            boolean_exists = False
                                            'initial setting for the position value
                                            int_descriptor_exists_position = -1

                                            'if the array is empty skip test
                                            If Not UBound(str_array_performance_data, 2) = 0 Then
                                                'not empty
                                                For i As Integer = 1 To UBound(str_array_performance_data, 2) Step 1
                                                    'if the same descriptor name already exists
                                                    If str_array_performance_data(int_how_many_descriptor_lines, i) = str_temp_what_to_compare_and_set Then
                                                        boolean_exists = True
                                                        int_descriptor_exists_position = i
                                                        Exit For
                                                    End If
                                                Next

                                                If Not boolean_exists Then
                                                    'not found

                                                    'add the parameters to the descriptor of the array
                                                    ReDim Preserve str_array_performance_data(UBound(str_array_performance_data, 1), UBound(str_array_performance_data, 2) + 1)
                                                    'set the file information
                                                    'PHY_Short_MP.csv()
                                                    str_array_performance_data(0, UBound(str_array_performance_data, 2)) = str_file_name

                                                    'Serial number : 86094(VSP)
                                                    str_array_performance_data(1, UBound(str_array_performance_data, 2)) = str_serial_number

                                                    'From : 2013/07/18 07:33
                                                    str_array_performance_data(2, UBound(str_array_performance_data, 2)) = str_from

                                                    'To   : 2013/07/19 07:33
                                                    str_array_performance_data(3, UBound(str_array_performance_data, 2)) = str_to

                                                    'sampling rate : 1
                                                    str_array_performance_data(4, UBound(str_array_performance_data, 2)) = str_sampling_rate

                                                    'set position of the element in the csv file
                                                    str_array_performance_data(int_how_many_descriptor_lines - 1, UBound(str_array_performance_data, 2)) = str_value_specifier & CStr(csv_get_position(str_line, str_what_to_look_for_element, CChar(","))) & str_value_specifier

                                                    'set the name of the element
                                                    str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = str_temp_what_to_compare_and_set

                                                    'add 1 to the average counter to calculate the average in the end
                                                    str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2)) = CStr(CInt(str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2))) + 1)
                                                Else
                                                    'name already in the array

                                                    'add the position of thei element in the csv file to the existing ones
                                                    str_array_performance_data(int_how_many_descriptor_lines - 1, int_descriptor_exists_position) = str_array_performance_data(int_how_many_descriptor_lines - 1, int_descriptor_exists_position) & "," & str_value_specifier & CStr(csv_get_position(str_line, str_what_to_look_for_element, CChar(","))) & str_value_specifier


                                                    'average must be calculated without the next add !!!!!!!!!!!!
                                                    'crosscheck!!!!!!!!!!!!!!!

                                                    'add 1 to the average counter to calculate the average in the end
                                            str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2)) = CStr(CInt(str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2))) + 1)
                                                End If

                                            Else

                                                'add the filename to the descriptor element of the array
                                                ReDim Preserve str_array_performance_data(UBound(str_array_performance_data, 1), UBound(str_array_performance_data, 2) + 1)
                                                'set the file information
                                                'PHY_Short_MP.csv()
                                                str_array_performance_data(0, UBound(str_array_performance_data, 2)) = str_file_name

                                                'Serial number : 86094(VSP)
                                                str_array_performance_data(1, UBound(str_array_performance_data, 2)) = str_serial_number

                                                'From : 2013/07/18 07:33
                                                str_array_performance_data(2, UBound(str_array_performance_data, 2)) = str_from

                                                'To   : 2013/07/19 07:33
                                                str_array_performance_data(3, UBound(str_array_performance_data, 2)) = str_to

                                                'sampling rate : 1
                                                str_array_performance_data(4, UBound(str_array_performance_data, 2)) = str_sampling_rate

                                                'set position of the element in the csv file
                                                str_array_performance_data(int_how_many_descriptor_lines - 1, UBound(str_array_performance_data, 2)) = str_value_specifier & CStr(csv_get_position(str_line, str_what_to_look_for_element, CChar(","))) & str_value_specifier

                                                'set the name of the element
                                                str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = str_temp_what_to_compare_and_set

                                                'add 1 to the average counter to calculate the average in the end
                                                str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2)) = CStr(CInt(str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2))) + 1)

                                            End If

                                        Case Else
                                            'add the parameters to the descriptor of the array exactly as they are (standard for high end)
                                            ReDim Preserve str_array_performance_data(UBound(str_array_performance_data, 1), UBound(str_array_performance_data, 2) + 1)

                                            'set the file information
                                            'PHY_Short_MP.csv()
                                            str_array_performance_data(0, UBound(str_array_performance_data, 2)) = str_file_name

                                            'Serial number : 86094(VSP)
                                            str_array_performance_data(1, UBound(str_array_performance_data, 2)) = str_serial_number

                                            'From : 2013/07/18 07:33
                                            str_array_performance_data(2, UBound(str_array_performance_data, 2)) = str_from

                                            'To   : 2013/07/19 07:33
                                            str_array_performance_data(3, UBound(str_array_performance_data, 2)) = str_to

                                            'sampling rate : 1
                                            str_array_performance_data(4, UBound(str_array_performance_data, 2)) = str_sampling_rate

                                            'set position of the element in the csv file
                                            str_array_performance_data(int_how_many_descriptor_lines - 1, UBound(str_array_performance_data, 2)) = str_value_specifier & CStr(csv_get_position(str_line, str_what_to_look_for_element, CChar(","))) & str_value_specifier

                                            'set the name of the element
                                            Select Case str_what_origin
                                        Case str_cache
                                            Select Case str_storage_system
                                                Case str_storage_type_raid600
                                                    str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = str_what_to_look_for_element
                                                Case str_storage_type_hm800
                                                    str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = Strings.Left(Strings.Right(str_file_name, 10), 6) & "-" & str_what_to_look_for_element
                                                Case Else
                                                    str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = Strings.Left(Strings.Right(str_file_name, 11), 7) & "-" & str_what_to_look_for_element
                                            End Select
                                        Case Else
                                            str_array_performance_data(int_how_many_descriptor_lines, UBound(str_array_performance_data, 2)) = str_what_to_look_for_element


                                    End Select

                                            'add 1 to the average counter to calculate the average in the end
                                            str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2)) = CStr(CInt(str_array_performance_data(int_how_many_descriptor_lines - 3, UBound(str_array_performance_data, 2))) + 1)

                                    End Select

                                End If
                            Next
                        Next

                    Else
                        'performance line

                        If boolean_value_found_in_descriptor_line Then

                            date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_value)

                            If date_compare_result < 0 Then
                                'is earlier than date_datetimepicker_start_selected

                                'NOP

                            Else
                                'is the same or later than date_datetimepicker_start_selected

                                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_value)

                                If date_compare_result <= 0 Then
                                    'is earlier than date_datetimepicker_end_selected

                                    If Not boolean_do_not_create_performance_rows_in_array Then

                                        ' insert the date
                                        str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, 0) = CStr(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")))
                                        'a performance line was created in the array
                                        boolean_performance_value_row_created = True
                                    End If

                                    'puts all performance elements in the arra_str_line array variable
                                    array_str_line = Split(str_line, ",")

                                    ' go through all position elements in the array
                                    For j As Integer = 1 To UBound(str_array_performance_data, 2)

                                        'go through all elements in the performance line array
                                        For i As Integer = 2 To array_str_line.Length - 1

                                            'check if the actual position is in the position field
                                            If InStr(str_array_performance_data(int_how_many_descriptor_lines - 1, j), str_value_specifier & CStr(i + 1) & str_value_specifier) <> 0 Then
                                                If CInt(array_str_line(i)) >= 0 Then

                                                    ' check if the array field (performance value) is empty then write a zero 
                                                    If str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j) Is Nothing Then
                                                        'write a 0 to the element in the array
                                                        str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j) = array_str_line(i)
                                                    Else
                                                        'add the new value to the existing lement in the array
                                                        str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j) = CStr(CDbl(str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j)) + CDbl(array_str_line(i)))
                                                    End If

                                                Else
                                                    ' check if the array field (performance value is empty then write a zero 
                                                    If str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j) Is Nothing Then
                                                        'write a 0 to the element in the array
                                                        str_array_performance_data(int_how_many_descriptor_lines + int_row_counter, j) = "0"
                                                    End If

                                                    'performance value is below zero (some kind of error)

                                                    'add a label to know that the performance collection contains (minus values) 
                                                    If str_array_performance_data(int_how_many_descriptor_lines - 2, j) Is Nothing Then
                                                        str_array_performance_data(int_how_many_descriptor_lines - 2, j) = array_str_line(i)
                                                    Else
                                                        If Not InStr(str_array_performance_data(int_how_many_descriptor_lines - 2, j), array_str_line(i)) <> 0 Then
                                                            str_array_performance_data(int_how_many_descriptor_lines - 2, j) = str_array_performance_data(int_how_many_descriptor_lines - 2, j) & "," & array_str_line(i)
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next

                            'ten updates for an action
                            If int_progress_bar_update_counter = CInt(int_line_count_total / 10) Then
                                '---------------------------------------
                                'progressbar
                                'calculate lines in file for the progressbar
                                Label_progress_chart.TextAlign = ContentAlignment.TopCenter
                                Label_progress_chart.Text = "Collecting performance data " & str_progress_bar_text
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                If CInt((int_progress_end_value - int_progress_start_value) / int_line_count_total * int_row_counter) > 100 Then
                                    ProgressBar_chart.Value = 100
                                Else
                                    ProgressBar_chart.Value = CInt((int_progress_end_value - int_progress_start_value) / int_line_count_total * int_row_counter)
                                End If
                                ProgressBar_chart.Visible = True
                                ProgressBar_chart.Update()
                                '-----------------------------------------

                                'start off again counting
                                int_progress_bar_update_counter = 0
                            Else
                                int_progress_bar_update_counter = int_progress_bar_update_counter + 1
                            End If

                            'next row
                            int_row_counter = int_row_counter + 1
                        End If

                    End If

                    date_compare_result = Nothing
                End If
            End If

            'otherwise if you loose focus on the application it does not show any progress and it seems to hang
            Application.DoEvents()

            date_compare_result = Nothing
        Loop Until obj_reader.EndOfStream

        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing
        str_file_name = Nothing
        str_serial_number = Nothing
                str_from = Nothing
        str_to = Nothing
        str_sampling_rate = Nothing

        'only when average sum up is chosen
        Select Case str_what_to_do
            Case str_average_up_take_filename_as_name, str_average_up, str_average_up_take_hsd_name
                For i As Integer = 1 To UBound(str_array_performance_data, 2)
                    For int_row_counter_value As Integer = int_how_many_descriptor_lines + 1 To UBound(str_array_performance_data, 1) Step 1
                        str_array_performance_data(int_row_counter_value, i) = CStr(CDbl(str_array_performance_data(int_row_counter_value, i)) / CDbl(str_array_performance_data(int_array_descritor_line_count - 3, i)))
                    Next
                Next
        End Select

        array_raid_performance_data_put_in_array = str_array_performance_data

        'hide progress bar
        '---------------------------------------
        'progressbar
        Label_progress_chart.Visible = False
        Label_progress_chart.Update()
        ProgressBar_chart.Visible = False
        ProgressBar_chart.Update()
        '-----------------------------------------

    End Function
    Private Function array_raid_performance_data_put_in_array_of_several_files(ByVal str_array_filepaths As String(), ByVal str_array_what_to_look_for As String(), ByVal what_origin As String, ByVal str_what_to_do As String, ByVal date_datetimepicker_start_value As Date, ByVal date_datetimepicker_end_value As Date, ByVal int_how_many_descriptor_lines As Integer, Optional ByVal str_progress_bar_text As String = "") As Array

        'this is the line count of how many lines are used for other purposes before the performance array starts
        'the 7 first rows are for header info
        'Const int_array_descritor_line_count As Integer = 7

        Dim int_start_value As Integer = 0
        Dim str_array_performance_data_temp As Array = Nothing
        Dim str_array_performance_data_global(,) As String = Nothing

        array_raid_performance_data_put_in_array_of_several_files = Nothing

        'go through all files in the array and look for the items in str_array_what_to_look_for
        For i As Integer = 0 To str_array_filepaths.Length - 1 Step 1

            'get performance data
            str_array_performance_data_temp = Nothing
            str_array_performance_data_temp = array_raid_performance_data_put_in_array(str_array_filepaths(i), str_array_what_to_look_for(i), what_origin, str_what_to_do, date_datetimepicker_start_value, date_datetimepicker_end_value, int_start_value, int_start_value + CInt(Math.Truncate((100 / str_array_filepaths.Count))), int_how_many_descriptor_lines, str_progress_bar_text)

            int_start_value = int_start_value + CInt(Math.Truncate((100 / str_array_filepaths.Count)))

            ' if file does not exist exit function. return code is "-1" in the first line of the array
            If str_array_performance_data_temp.Length = 1 Then
                If CStr(str_array_performance_data_temp.GetValue(0)) Is "-1" Then
                    array_raid_performance_data_put_in_array_of_several_files = str_array_performance_data_temp
                    Exit Function
                End If
            End If

            'add the first array into a global array
            If IsNothing(str_array_performance_data_global) Then
                'just copy the array into the result array
                str_array_performance_data_global = CType(str_array_performance_data_temp, String(,))
            Else
                'add the temp array to the existing array

                Dim int_ubound_columns_str_array_performance_data_global As Integer = UBound(str_array_performance_data_global, 2)
                Dim int_ubound_columns_str_array_performance_data_temp As Integer = UBound(str_array_performance_data_temp, 2)

                ReDim Preserve str_array_performance_data_global(UBound(str_array_performance_data_temp, 1), int_ubound_columns_str_array_performance_data_global + int_ubound_columns_str_array_performance_data_temp)

                For j As Integer = 0 To UBound(str_array_performance_data_temp, 1) Step 1
                    For k As Integer = int_ubound_columns_str_array_performance_data_global + 1 To int_ubound_columns_str_array_performance_data_global + int_ubound_columns_str_array_performance_data_temp Step 1
                        str_array_performance_data_global(j, k) = CStr(str_array_performance_data_temp.GetValue(j, k - int_ubound_columns_str_array_performance_data_global))
                    Next
                Next

            End If
        Next

        array_raid_performance_data_put_in_array_of_several_files = str_array_performance_data_global
    End Function

#End Region

#Region "Data gathering Procedures 1-dimension (comma separated) array"
    Private Function performance_data_put_in_array_mppk_type(ByVal path_and_filename_mppk As String, ByVal path_and_filename_mp As String, ByVal what_to_look_for As String, ByVal int_progress_end_value As Integer, ByVal int_progress_start_value As Integer) As String()

        Dim xArray() As String = Nothing
        Dim yArray() As Integer = Nothing

        Dim j As Integer = Nothing
        Dim i As Integer = Nothing
        Dim data_row_counter As Integer = Nothing

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing

        'array of all elements in a line mp and mppk
        Dim array_str_line_mppk As String() = Nothing
        Dim array_str_line_mp As String() = Nothing

        'array of column names
        Dim str_array_performance_data As String() = Nothing

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Dim int_total_line_count As Integer = Nothing
        Dim int_line_count As Integer = 0
        'Dim lines As String() = IO.File.ReadAllLines(path_and_filename_mppk)
        'int_total_line_count = lines.Count()
        'lines = Nothing

        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting Data"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = int_progress_start_value
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------



        'get mp performance data
        str_array_performance_data = raid_performance_data_put_in_array(path_and_filename_mp, what_to_look_for, "", 0, 50)

        Dim str_mppk_types_sum As String = Nothing

        Select Case str_storage_system
            Case str_storage_type_raid700
                str_array_performance_data(1) = csv_add_at_the_end(str_array_performance_data(1), "BackEnd,System,Open-Target,Open-Initiator,Open-External,MF-Target,MF-External", CChar(","))
                str_mppk_types_sum = "0,0,0,0,0,0,0"
            Case str_storage_type_raid750 'no mainframe possible
                str_array_performance_data(1) = csv_add_at_the_end(str_array_performance_data(1), "BackEnd,System,Open-Target,Open-Initiator,Open-External", CChar(","))
                str_mppk_types_sum = "0,0,0,0,0"
        End Select



        'mppk data

        'specify an array that contains all mppk types and the sum (comma seperated)
        '{"BackEnd,System,Open-Target,Open-Initiator,Open-External,MF-Target,MF-External"}

        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(path_and_filename_mppk)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        data_row_counter = 1

        Do
            'next line
            str_line = obj_reader.ReadLine()

            ' are the datetimepicker used?
            If boolean_datetimepicker_set Then

                date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_selected)

                If date_compare_result < 0 Then
                    'is earlier than date_datetimepicker_start_selected

                    'NOP

                Else
                    'is the same or later than date_datetimepicker_start_selected

                    date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_selected)

                    If date_compare_result <= 0 Then
                        'is earlier than date_datetimepicker_end_selected

                        'fills all values of a line in an array
                        array_str_line_mppk = str_line.Split(CChar(","))

                        ' * the kernel type is any one of the following types:
                        ' Open-Target, Open-Initiator, Open-External, MF-Target, MF-External, BackEnd, or System.

                        'go through the mppk csv file line
                        For j = 2 To array_str_line_mppk.Length - 1 Step 1

                            'no empty value in the csv file
                            If Not array_str_line_mppk(j) = "-1" Then

                                '{"BackEnd,System,Open-Target,Open-Initiator,Open-External,MF-Target,MF-External"}
                                'if one of the above values maches then the cunter for this value gets increased by the new value
                                Select Case CStr(csv_extract(array_str_line_mppk(j), 1, CChar(";")))
                                    Case "BackEnd"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 1, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 1, CChar(","))
                                    Case "System"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 2, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 2, CChar(","))
                                    Case "Open-Target"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 3, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 3, CChar(","))
                                    Case "Open-Initiator"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 4, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 4, CChar(","))
                                    Case "Open-External"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 5, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 5, CChar(","))
                                    Case "MF-Target"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 6, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 6, CChar(","))
                                    Case "MF-External"
                                        str_mppk_types_sum = csv_replace(str_mppk_types_sum, CStr(CInt(csv_extract(str_mppk_types_sum, 7, CChar(","))) + CInt(csv_extract(array_str_line_mppk(j), 4, CChar(";")))), 6, CChar(","))
                                    Case Else

                                End Select

                            End If
                        Next
                        j = Nothing

                        'add the summarized mppk values to the othe rperformance values
                        str_array_performance_data(data_row_counter + 1) = csv_add_at_the_end(str_array_performance_data(data_row_counter + 1), str_mppk_types_sum, CChar(","))

                        'reset variables
                        Select Case str_storage_system
                            Case str_storage_type_raid700
                                str_mppk_types_sum = "0,0,0,0,0,0,0"
                            Case str_storage_type_raid750 'no mainframe possible
                                str_mppk_types_sum = "0,0,0,0,0"
                        End Select

                        array_str_line_mppk = Nothing
                        data_row_counter = data_row_counter + 1

                    End If

                End If

                date_compare_result = Nothing

            Else
                'datetimepicker is not used

            End If

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        'put the data array in the function return
        performance_data_put_in_array_mppk_type = str_array_performance_data

    End Function
    Private Function raid_performance_data_put_in_array(ByVal str_path_and_filename As String, ByVal str_what_to_look_for As String, ByVal str_what_to_do As String, ByVal int_progress_start_value As Integer, ByVal int_progress_end_value As Integer) As String() ', Optional ByVal str_datetimepicker_start As Date,Optional ByVal str_datetimepicker_end As Date) As String()

        'description of the function:
        '----------------------------
        'puts all elements in "what_to_look_for" and the performance data in one array

        'average variables
        Dim dbl_average As Double = 0
        Dim int_average_counter As Integer = 0

        Dim performance_data As String() = Nothing
        'add 2 lines for the description of the array (storage type, timerange, sampling rate) and the description line (column names)
        ReDim performance_data(1)
        performance_data(0) = "-1"
        performance_data(1) = "time"

        'date compare result (before datetimepicker or later)
        Dim date_compare_result As Integer = Nothing

        ' if file does not exist exit function. return code is "-1" in the first line of the array
        If Not File.Exists(str_path_and_filename) Then
            raid_performance_data_put_in_array = performance_data
            Exit Function
        End If

        'rowcounter to extend the array (2 is the first performance line)
        Dim int_row_counter As Integer = Nothing
        'int_temp_value
        Dim int_temp_value As Integer = 0
        'int_temp_array
        Dim int_temp_array As Integer() = Nothing
        'dbl_temp_value
        Dim dbl_temp_value As Double = Nothing

        'is a value found in that descriptor line
        Dim boolean_value_found_in_descriptor_line As Boolean = False

        Dim boolean_performance_value_row_created As Boolean = False
        Dim boolean_do_not_create_performance_rows_in_array As Boolean = False

        'arraylist of the positions of the parameters in str_what_to_look_for
        Dim arraylist_raid_positions_what_to_look_for As New ArrayList
        arraylist_raid_positions_what_to_look_for.Clear()

        'temp variables to open files
        Dim str_line As String = Nothing
        Dim obj_reader As System.IO.StreamReader = Nothing

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Dim int_total_line_count As Integer = Nothing
        Dim int_line_count As Integer = 0
        Dim lines As String() = IO.File.ReadAllLines(str_path_and_filename)
        int_total_line_count = lines.Count()
        lines = Nothing

        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Collecting Data"
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = int_progress_start_value
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        'is a parameter found that is looked for in the descriptor line
        boolean_value_found_in_descriptor_line = False

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_path_and_filename)

        '-------------------------------------------------
        'get description info

        'first line (file name)
        str_line = obj_reader.ReadLine
        int_line_count = int_line_count + 1
        'second line (storage serial)
        str_line = obj_reader.ReadLine
        int_line_count = int_line_count + 1
        'storage serial number
        performance_data(0) = Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": ")))
        'fill global variable with storage serial number
        str_storage_system_serial = Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": ")))
        'third line (from)
        str_line = obj_reader.ReadLine()
        int_line_count = int_line_count + 1

        'range values -> from date to date
        'does it use datetimepicker?
        If boolean_datetimepicker_set Then
            performance_data(0) = performance_data(0) & "," & "from " & date_datetimepicker_start_selected.ToString & " to " & date_datetimepicker_end_selected.ToString
        Else
            Dim range As String = Nothing
            range = "from " & Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": ")))
            'forth line (to)
            str_line = obj_reader.ReadLine()
            int_line_count = int_line_count + 1
            range = "timerange " & range & " to " & Strings.Trim(Strings.Right(str_line, str_line.Length - InStr(str_line, ": ")))
            'fith line (sampling rate)
            str_line = obj_reader.ReadLine()
            int_line_count = int_line_count + 1
            range = range & " (" & str_line & ")"
            performance_data(0) = performance_data(0) & "," & range
            'empty temporary variables
            range = Nothing
        End If

        '-------------------------------------------------

        'sixth line (empty line)
        str_line = obj_reader.ReadLine()
        int_line_count = int_line_count + 1

        'until the file is at the end of stream
        Do

            '-----------------------------------------
            'update progress bar
            Label_progress_chart.Text = "Collecting Data"
            Label_progress_chart.Update()
            If ProgressBar_chart.Value + CInt((int_progress_end_value - int_progress_start_value) * int_line_count / int_total_line_count) <= 100 Then
                ProgressBar_chart.Value = ProgressBar_chart.Value + CInt((int_progress_end_value - int_progress_start_value) * int_line_count / int_total_line_count)
            Else
                ProgressBar_chart.Value = 100
            End If
            ProgressBar_chart.Update()
            '-----------------------------------------

            'next line
            str_line = obj_reader.ReadLine
            int_line_count = int_line_count + 1

            If InStr(str_line, "No.") <> 0 Then 'instr descriptorline 
                'descriptor line

                'first row in array where performance data starts
                int_row_counter = 2

                'get rid of the " sign
                str_line = Strings.Replace(str_line, Chr(34), "")

                'set value found to default
                boolean_value_found_in_descriptor_line = False

                'clear arraylist raid positions
                arraylist_raid_positions_what_to_look_for.Clear()

                'look if the what_to_look_for elements are in the descriptor line
                For Each str_what_to_look_for_element In str_what_to_look_for.Split(CChar(","))

                    'go through all elements in the string line
                    For Each str_element_in_line As String In str_line.Split(CChar(","))

                        'if are both identical
                        If str_element_in_line = str_what_to_look_for_element Then
                            'there is a value found in that descriptor line
                            boolean_value_found_in_descriptor_line = True

                            ' if the performance value rows exists no new row should be added and the additional values should be added to the existing row
                            If boolean_performance_value_row_created Then
                                boolean_do_not_create_performance_rows_in_array = True
                            End If

                            'add the position of the str_what_to_look_for_element in the performance file
                            arraylist_raid_positions_what_to_look_for.Add(csv_get_position(str_line, str_what_to_look_for_element, CChar(",")))

                            'str_what_to_do -> special tasks to do
                            Select Case str_what_to_do
                                Case str_sum_up_take_filename_as_name, str_average_up_take_filename_as_name

                                    If csv_extract(performance_data(1), 2, CChar(",")) = str_no_result Or csv_extract(performance_data(1), 2, CChar(",")) = str_time_value Then
                                        'only add the hsd name to the descriptor of the array 
                                        performance_data(1) = performance_data(1) & "," & Strings.Mid(str_path_and_filename, InStrRev(str_path_and_filename, "\") + 1, str_path_and_filename.Length - InStrRev(str_path_and_filename, "\") - 4)
                                    End If


                                Case "add_lu_hsd"

                                    ' is the hsd descriptor already set

                                    If InStr(performance_data(1), Strings.Left(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5)) <> 0 Then
                                        'NOP
                                    Else
                                        'only add the hsd name to the descriptor of the array
                                        performance_data(1) = performance_data(1) & "," & Strings.Left(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5)
                                    End If
                                Case "df_sum_up"

                                    ' just take the "what to look for" name but only once

                                    If InStr(performance_data(1), Strings.Right(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5) & " " & Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(" ") - (str_path_and_filename.LastIndexOf("\") + 1))) <> 0 Then
                                        'NOP
                                    Else
                                        'only add the hsd lun number (no ctl name) to the descriptor of the array
                                        'LU0101 Random Read and not CTL0-LU0101
                                        performance_data(1) = performance_data(1) & "," & Strings.Right(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5) & " " & Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(" ") - (str_path_and_filename.LastIndexOf("\") + 1))
                                    End If

                                Case "df_sum_up_all"

                                    ' just take the "what to look for" name but only once
                                    Dim test As String = Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(" ") - str_path_and_filename.LastIndexOf("\"))
                                    If InStr(performance_data(1), Strings.Right(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5) & " " & Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(" ") - str_path_and_filename.LastIndexOf("\") - 1)) <> 0 Then
                                        'NOP
                                    Else
                                        'only add the hsd lun number (no ctl name) to the descriptor of the array
                                        'LU0101 Random Read and not CTL0-LU0101
                                        performance_data(1) = performance_data(1) & "," & Strings.Right(str_what_to_look_for_element, str_what_to_look_for_element.Length - 5) & " " & Strings.Mid(str_path_and_filename, str_path_and_filename.LastIndexOf("\") + 2, str_path_and_filename.LastIndexOf(".csv") - str_path_and_filename.LastIndexOf("\") - 1)
                                    End If

                                Case Else
                                    'add the parameters to the descriptor of the array
                                    performance_data(1) = performance_data(1) & "," & str_what_to_look_for_element

                            End Select
                        End If
                    Next
                Next

            Else
                'performance line

                If boolean_value_found_in_descriptor_line Then

                    ' are the datetimepicker used?
                    If boolean_datetimepicker_set Then

                        date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_start_selected)

                        If date_compare_result < 0 Then
                            'is earlier than date_datetimepicker_start_selected

                            'NOP

                        Else
                            'is the same or later than date_datetimepicker_start_selected

                            date_compare_result = DateTime.Compare(CDate(Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")), date_datetimepicker_end_selected)

                            If date_compare_result <= 0 Then
                                'is earlier than date_datetimepicker_end_selected

                                If Not boolean_do_not_create_performance_rows_in_array Then
                                    'create new line in array and keep the existing
                                    ReDim Preserve performance_data(int_row_counter)
                                    'add date to the line
                                    performance_data(int_row_counter) = Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")

                                    'a performance line was created in the array
                                    boolean_performance_value_row_created = True
                                End If

                                Select Case str_what_to_do
                                    Case "add_lu_hsd", "df_sum_up", "df_sum_up_all", str_sum_up_take_filename_as_name
                                        For Each arraylist_element In arraylist_raid_positions_what_to_look_for
                                            'add up all values if they are positive numbers
                                            If Not CInt(csv_extract(str_line, CInt(arraylist_element), CChar(","))) < 1 Then
                                                int_temp_value = int_temp_value + CInt(csv_extract(str_line, CInt(arraylist_element), CChar(",")))
                                            End If
                                        Next

                                        If csv_length(performance_data(int_row_counter), CChar(",")) = 1 Then
                                            performance_data(int_row_counter) = performance_data(int_row_counter) & "," & CStr(int_temp_value)
                                        Else
                                            performance_data(int_row_counter) = csv_extract(performance_data(int_row_counter), 1, CChar(",")) & "," & (CDbl(csv_extract(performance_data(int_row_counter), 2, CChar(","))) + int_temp_value)
                                        End If

                                        int_temp_value = 0

                                    Case Else
                                        For Each arraylist_element In arraylist_raid_positions_what_to_look_for
                                            'add number if they are positive numbers. if not add a 0
                                            If CInt(csv_extract(str_line, CInt(arraylist_element), CChar(","))) >= 0 Then
                                                performance_data(int_row_counter) = performance_data(int_row_counter) & "," & csv_extract(str_line, CInt(arraylist_element), CChar(","))
                                            Else
                                                'performance value is below zero (some kind of error)

                                                'add a label here that the performance collection contains (minus values)

                                                performance_data(int_row_counter) = performance_data(int_row_counter) & ",0"

                                            End If

                                        Next
                                End Select

                                'next row
                                int_row_counter = int_row_counter + 1

                                'count the values to calculate the average
                                'int_average_counter = int_average_counter + 1


                            End If

                        End If

                        date_compare_result = Nothing

                    Else

                        'datetimepicker is not used

                        ''create new line in array and keep the existing
                        'ReDim Preserve performance_data(int_row_counter)
                        ''add date to the line
                        'performance_data(int_row_counter) = Strings.Replace(csv_extract(str_line, 2, CChar(",")), Chr(34), "")

                        'Select Case str_what_to_do
                        '    Case "add_lu_hsd", "df_sum_up", "df_sum_up_all"
                        '        For Each arraylist_element In arraylist_raid_positions_what_to_look_for
                        '            'add up all values if they are positive numbers
                        '            If Not CInt(csv_extract(str_line, CInt(arraylist_element), CChar(","))) < 0 Then
                        '                int_temp_value = int_temp_value + CInt(csv_extract(str_line, CInt(arraylist_element), CChar(",")))
                        '            End If
                        '        Next
                        '        performance_data(int_row_counter) = performance_data(int_row_counter) & "," & int_temp_value
                        '        int_temp_value = 0

                        '    Case Else
                        '        For Each arraylist_element In arraylist_raid_positions_what_to_look_for
                        '            'add number if they are positive numbers. if not add a 0
                        '            If CInt(csv_extract(str_line, CInt(arraylist_element), CChar(","))) > 0 Then
                        '                performance_data(int_row_counter) = performance_data(int_row_counter) & "," & csv_extract(str_line, CInt(arraylist_element), CChar(","))
                        '            Else
                        '                performance_data(int_row_counter) = performance_data(int_row_counter) & ",0"
                        '            End If

                        '        Next
                        'End Select

                        ''next row
                        'int_row_counter = int_row_counter + 1



                    End If
                End If
            End If

        Loop Until obj_reader.EndOfStream

        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        int_line_count = Nothing

        'only when average sum up is chosen
        If str_what_to_do = str_average_up_take_filename_as_name Then

            int_row_counter = 0
            For Each arraylist_element As String In performance_data

                'add up all values if they are positive numbers
                If Not arraylist_element.Contains(str_time_value) And Not arraylist_element.Contains(",from ") Then
                    performance_data(int_row_counter) = csv_average_start_end_position(performance_data(int_row_counter), CChar(","), 2)
                End If

                int_row_counter = int_row_counter + 1
            Next
            int_row_counter = Nothing

        End If

        'copy array to output array of function
        raid_performance_data_put_in_array = performance_data

    End Function
    Private Function raid_performance_data_put_in_array_of_several_files(ByVal str_array_filepaths As String(), ByVal str_array_what_to_look_for As String(), ByVal what_origin As String, ByVal str_what_to_do As String) As String()

        raid_performance_data_put_in_array_of_several_files = Nothing
        Dim str_array_performance_data_temp As String() = Nothing
        Dim str_array_performance_data_temp_global As String() = Nothing
        Dim j As Integer = 0
        Dim int_start_value As Integer = 0


        'go through all files in the array and look for the items in str_array_what_to_look_for
        For Each str_filepath As String In str_array_filepaths

            int_start_value = int_start_value + CInt(Math.Truncate((100 / str_array_filepaths.Count)))

            'get performance data
            str_array_performance_data_temp = Nothing
            str_array_performance_data_temp = raid_performance_data_put_in_array(str_filepath, str_array_what_to_look_for(j), str_what_to_do, int_start_value, int_start_value + CInt(Math.Truncate((100 / str_array_filepaths.Count))))

            ' if file does not exist exit function. return code is "-1" in the first line of the array
            If str_array_performance_data_temp(0) = "-1" Then
                raid_performance_data_put_in_array_of_several_files = str_array_performance_data_temp
                Exit Function
            End If

            j = j + 1

            'add the first array into a global array
            If IsNothing(str_array_performance_data_temp_global) Then
                str_array_performance_data_temp_global = str_array_performance_data_temp

                'modify all labels in row 1 of the array 
                For k As Integer = 2 To csv_length(str_array_performance_data_temp(1), CChar(",")) Step 1

                    Select Case what_origin
                        Case "lu_blocksize"
                            'CL3-C.01(sb00002).0001 -> iops_CL3-C.01(sb00002).0001
                            str_array_performance_data_temp_global(1) = csv_replace(str_array_performance_data_temp_global(1), Strings.Mid(str_filepath, str_filepath.LastIndexOf("LU_") + 4, str_filepath.LastIndexOf(".") - str_filepath.LastIndexOf("LU_") - 3) & "_" & csv_extract(str_array_performance_data_temp(1), k, CChar(",")), k, CChar(","))
                        Case str_lu
                            'CL3-C.01(sb00002).0001 -> Write_CL3-C.01(sb00002).0001
                            str_array_performance_data_temp_global(1) = csv_replace(str_array_performance_data_temp_global(1), Strings.Mid(str_filepath, str_filepath.LastIndexOf("\") + 5, str_filepath.LastIndexOf("_") - str_filepath.LastIndexOf("\") - 4) & "_" & csv_extract(str_array_performance_data_temp(1), k, CChar(",")), k, CChar(","))
                        Case str_cache
                            Select Case str_storage_system
                                Case str_storage_type_raid700
                                    '00(CLPR0),01(Tier2) -> 1MA_00(CLPR0),1MA_01(Tier2)
                                    str_array_performance_data_temp_global(1) = csv_replace(str_array_performance_data_temp_global(1), Strings.Left(Strings.Right(str_filepath, 7), 3) & "_" & csv_extract(str_array_performance_data_temp(1), k, CChar(",")), k, CChar(","))
                                Case str_storage_type_raid750
                                    '00(CLPR0),01(Tier2) -> 10_00(CLPR0),10_01(Tier2)
                                    str_array_performance_data_temp_global(1) = csv_replace(str_array_performance_data_temp_global(1), Strings.Left(Strings.Right(str_filepath, 6), 2) & "_" & csv_extract(str_array_performance_data_temp(1), k, CChar(",")), k, CChar(","))
                            End Select
                        Case "df_port_detail"
                            'CTL0-A -> CTL0-A_Random Read
                            str_array_performance_data_temp_global(1) = csv_replace(str_array_performance_data_temp_global(1), csv_extract(str_array_performance_data_temp(1) & "_" & Strings.Mid(str_filepath, str_filepath.LastIndexOf("\") + 2, str_filepath.LastIndexOf(" ") - str_filepath.LastIndexOf("\")), k, CChar(",")), k, CChar(","))
                        Case Else 'the descriptor name does not need to be changed
                            'NOP
                    End Select
                Next
            Else
                'add the next array to the existing array but dont take the time values
                For i As Integer = 1 To str_array_performance_data_temp_global.Length - 1 Step 1
                    If i = 1 Then
                        'modify all labels in row 1 of the array
                        For k As Integer = 2 To csv_length(str_array_performance_data_temp(i), CChar(",")) Step 1

                            Select Case what_origin
                                Case "lu_blocksize"
                                    'CL3-C.01(sb00002).0001 -> iops_CL3-C.01(sb00002).0001
                                    str_array_performance_data_temp_global(1) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                    Strings.Mid(str_filepath, str_filepath.LastIndexOf("LU_") + 4, str_filepath.LastIndexOf(".") - str_filepath.LastIndexOf("LU_") - 3) & "_" & csv_extract(str_array_performance_data_temp(i), k, CChar(",")), CChar(","))
                                Case str_lu
                                    'CL3-C.01(sb00002).0001 -> Write_CL3-C.01(sb00002).0001
                                    str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                    Strings.Mid(str_filepath, str_filepath.LastIndexOf("\") + 5, str_filepath.LastIndexOf("_") - str_filepath.LastIndexOf("\") - 4) & "_" & csv_extract(str_array_performance_data_temp(i), k, CChar(",")), CChar(","))
                                Case str_cache
                                    Select Case str_storage_system
                                        Case str_storage_type_raid700
                                            '00(CLPR0),01(Tier2) -> 1MA_00(CLPR0),1MA_01(Tier2)
                                            str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                           Strings.Left(Strings.Right(str_filepath, 7), 3) & "_" & csv_extract(str_array_performance_data_temp(i), k, CChar(",")), CChar(","))
                                        Case str_storage_type_raid750
                                            '00(CLPR0),01(Tier2) -> 1MA_00(CLPR0),1MA_01(Tier2)
                                            str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                           Strings.Left(Strings.Right(str_filepath, 6), 2) & "_" & csv_extract(str_array_performance_data_temp(i), k, CChar(",")), CChar(","))
                                    End Select


                                Case "df_port_detail"
                                    'CTL0-A -> CTL0-A(Random)
                                    str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                   csv_extract(str_array_performance_data_temp(i) & "_" & Strings.Mid(str_filepath, str_filepath.LastIndexOf("\") + 2, str_filepath.LastIndexOf(" ") - str_filepath.LastIndexOf("\")), k, CChar(",")), CChar(","))
                                Case Else 'the descriptor name does not need to be changed
                                    str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i), csv_extract(str_array_performance_data_temp(i), k, CChar(",")), CChar(","))
                            End Select
                        Next
                    Else
                        str_array_performance_data_temp_global(i) = csv_add_at_the_end(str_array_performance_data_temp_global(i),
                                                                                   Strings.Right(str_array_performance_data_temp(i),
                                                                                                 str_array_performance_data_temp(i).Length -
                                                                                                 InStr(str_array_performance_data_temp(i), ",")), CChar(","))
                    End If
                Next
            End If

        Next

        raid_performance_data_put_in_array_of_several_files = str_array_performance_data_temp_global
    End Function

#End Region

#Region "Zip Procedures"

    Private Sub unzip(ByVal path_zip_filename As String, ByVal path_zip_output As String, ByVal file_filter As String)

        Dim directoryInfo As New DirectoryInfo(path_zip_output)
        If Not directoryInfo.Exists Then

            'create folder
            directoryInfo.Create()

        Else
            'exists already

            'do nothing

        End If
        directoryInfo = Nothing

        'extract zip files
        Try
            Dim x As New ICSharpCode.SharpZipLib.Zip.FastZip
            x.ExtractZip(path_zip_filename, path_zip_output, "")
        Catch ex As Exception
            MsgBox("exception: {0}", CType(ex.ToString, MsgBoxStyle))
        End Try

    End Sub

#End Region

#Region "Check Procedures"

    Private Sub check_performance_data_zip_files()

        'Extract zipped files
        'check the necessary data to be extracted
        Dim directory As New IO.DirectoryInfo(path_performance_export_data)

        If directory.Exists Then 'does the selected folder exist?

            If directory.GetFiles("*.zip").Length <> 0 Then

                'is the unzipped folder already created
                Dim directory_unzipped As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped)
                If Not directory_unzipped.Exists Then 'is it already extracted?
                    'create "UnZippedFiles" folder
                    directory_unzipped.Create()
                    directory_unzipped.Refresh()
                End If

                '----------------------
                'high end systems
                '----------------------

                'raidcom available?
                '------------------
                'it looks for a folder called "*horcmdir*"
                If boolean_raidcom_folder_available(path_performance_export_data) Then

                    '!!!!!!!!!!!!!!!!!!!!!!!!

                    'parse the raidcom get ldev command 
                    'Dim array_raidcom_get_ldevlist_def As Dictionary(Of String, Array) = dict_raidcom_parse_get_ldevlist_def(str_raidcom_full_path)

                End If


                'ldeveachofcu
                Dim directory_ldeveachofcu As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_ldeveachofcu)
                'does the ldeveachofcu folder exists?
                If directory_ldeveachofcu.Exists Then
                    'check if data is already extracted
                    Dim directory_ldeveachofcu_unzipped As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu)
                    If Not directory_ldeveachofcu_unzipped.Exists Then
                        'create "UnZippedFiles" folder
                        directory_ldeveachofcu_unzipped.Create()
                        directory_ldeveachofcu_unzipped.Refresh()

                        'go through all zip files in the folder
                        For Each file_zipped_ldeveachofcu As FileInfo In directory_ldeveachofcu.GetFiles("*.zip")

                            'otherwise if you loose focus on the application it does not show any progress and it seems to hang
                            Application.DoEvents()

                            'unzip files
                            Label_progress_chart.Text = "Extracting " & Chr(34) & directory_ldeveachofcu.Name & "\" & file_zipped_ldeveachofcu.Name & Chr(34)
                            Label_progress_chart.Visible = True
                            Label_progress_chart.Update()
                            unzip(file_zipped_ldeveachofcu.FullName, directory_ldeveachofcu_unzipped.FullName, "")
                            Label_progress_chart.Visible = False
                            Label_progress_chart.Update()
                            TabControl_chart1.Update()

                        Next
                    End If

                    'extracted files exist
                    Dim directory_ldeveachofcu_unzipped_iops As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops)
                    If File.Exists(directory_ldeveachofcu_unzipped_iops.GetFiles("*.csv")(0).FullName) Then
                        'what storage type
                        str_storage_system = str_what_storage_is_it(directory_ldeveachofcu_unzipped_iops.GetFiles("*.csv")(0).FullName)
                    End If

                    'data available
                    'add processor string to csv string
                    If IsNothing(str_performance_data_available) Then
                        Select Case str_storage_system
                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000
                                str_performance_data_available = str_performance_data_available_ldeveachofcu
                        End Select
                    Else
                        Select Case str_storage_system
                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000
                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_ldeveachofcu
                        End Select
                    End If
                End If

                'go through the zip files in the performance folder
                For Each file_zipped As FileInfo In directory.GetFiles("*.zip")

                    'otherwise if you loose focus on the application it does not show any progress and it seems to hang
                    Application.DoEvents()

                    Select Case Strings.LCase(file_zipped.Name)
                        '************************************
                        ' MFPort RAID900
                        '************************************
                        Case Strings.LCase(str_export_foldername_raid900_mfport) & ".zip" 'mppk data to be data extracted
                            'does the unzipped folder exists?
                            Dim directory_check As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_mfport)
                            If Not directory_check.Exists Then
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_raid900_mfport & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_mfport
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mfport
                                End If
                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_raid900_mfport & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phypg data available
                                'add phypg string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_mfport
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mfport
                                End If
                            End If

                        '************************************
                        ' MPPK RAID900
                        '************************************
                        Case Strings.LCase(str_export_foldername_raid900_phyprocdetail) & ".zip" 'mppk data to be data extracted
                            'does the unzipped folder exists?

                            Dim directory_check As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phyprocdetail)
                            If Not directory_check.Exists Then
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_raid900_phyprocdetail & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phypg
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phypg
                                End If

                            End If
                            'get first file in folder
                            Dim getFIlesOfFolder = directory_check.GetFiles("*.csv")
                            If getFIlesOfFolder.Length <> 0 Then
                                'what storage is it
                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phyprocdetail & "\" & getFIlesOfFolder(0).Name) Then
                                    'what storage type
                                    str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phyprocdetail & "\" & getFIlesOfFolder(0).Name)
                                End If
                            End If

                        '************************************
                        ' MP/CHP RAID700, RAID800, HM800, RAID900
                        '************************************
                        Case Strings.LCase(str_export_foldername_mp) & ".zip" 'mp/chp data to be data extracted

                            'does the unzipped folder exists?
                            If directory_unzipped.Exists Then

                                'check if data is already extracted
                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp) Or File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800) Then
                                    'mp data available

                                    'VSP, VSP G1000
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp) Then
                                        'what storage type
                                        str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp)
                                    End If

                                    'HM800
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800) Then
                                        'what storage type
                                        str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800)
                                    End If

                                    'add mp string to csv string
                                    Select Case str_storage_system
                                        Case str_storage_type_hm800
                                            If IsNothing(str_performance_data_available) Then
                                                str_performance_data_available = str_performance_data_available_phympu_hm800
                                            Else
                                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                            End If
                                        Case Else
                                            If IsNothing(str_performance_data_available) Then
                                                str_performance_data_available = str_performance_data_available_mp
                                            Else
                                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                            End If

                                    End Select

                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_mp & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()

                                    'HM800
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800) Then
                                        'what storage type
                                        str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800)
                                    End If

                                    'VSP, VSP G1000
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp) Then
                                        'what storage type
                                        str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp)
                                    End If

                                    'USP-V
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp) Then
                                        'what storage type
                                        str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp)
                                    End If

                                    'data available
                                    'add processor string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        Select Case str_storage_system
                                            Case str_storage_type_raid600
                                                str_performance_data_available = str_performance_data_available_chp
                                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                                str_performance_data_available = str_performance_data_available_mp
                                            Case str_storage_type_hm800
                                                str_performance_data_available = str_performance_data_available_phympu_hm800
                                        End Select
                                    Else
                                        Select Case str_storage_system
                                            Case str_storage_type_raid600
                                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_chp
                                            Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                            Case str_storage_type_hm800
                                                str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                        End Select
                                    End If

                                End If

                            Else

                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_mp & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()

                                'HM800
                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800) Then
                                    'what storage type
                                    str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800)
                                End If

                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp) Then
                                    'what storage type
                                    str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp)
                                End If


                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp) Then
                                    'what storage type
                                    str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp)
                                End If

                                'data available
                                'add processor string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    Select Case str_storage_system
                                        Case str_storage_type_raid600
                                            str_performance_data_available = str_performance_data_available_chp
                                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                            str_performance_data_available = str_performance_data_available_mp
                                        Case str_storage_type_hm800
                                            str_performance_data_available = str_performance_data_available_phympu_hm800
                                    End Select
                                Else
                                    Select Case str_storage_system
                                        Case str_storage_type_raid600
                                            str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_chp
                                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid800
                                            str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                        Case str_storage_type_hm800
                                            str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                    End Select
                                End If


                            End If


                            '************************************
                            ' PhyPG
                            '************************************
                        Case Strings.LCase(str_export_foldername_phypg) & ".zip" 'phypg to be extracted

                            'does the unzipped folder exists?
                            If directory_unzipped.Exists Then
                                'check if data is already extracted
                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg) Then
                                    'phypg data available

                                    'add phypg string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phypg
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phypg
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_filename_phypg & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phypg data available
                                    'add phypg string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phypg
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phypg
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phypg & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phypg data available
                                'add phypg string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phypg
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phypg
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg)
                            End If

                            '************************************
                            ' PhyCMPK (Cache Write Pending) RAID800
                            '************************************
                        Case Strings.LCase(str_export_foldername_phycmpk) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phycmpk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk)
                            'does the unzipped folder exists?
                            If directory_unzipped_phycmpk.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phycmpk.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phycmpk
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycmpk
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyesw & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phycmpk
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycmpk
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyesw & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phycmpk
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycmpk
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_phycmpk) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_phycmpk)
                            End If

                            '************************************
                            ' PhyMPU (Cache Write Pending) HM800
                            '************************************
                        Case Strings.LCase(str_export_foldername_HM800_phympu) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phycmpk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu)
                            'does the unzipped folder exists?
                            If directory_unzipped_phycmpk.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phycmpk.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phympu_hm800
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                    End If

                                    'VSP 5000 and HM850(Panama2)
                                    For Each file In directory_unzipped_phycmpk.GetFiles("*.csv")
                                        If (InStr(file.FullName, str_export_filename_vsp5000_backend_hie) <> 0) Or (InStr(file.FullName, str_export_filename_vsp5000_backend_mpu) <> 0) Then
                                            str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phybackend_vsp5000
                                            Exit For
                                        End If
                                    Next
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM800_phympu & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phympu_hm800
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                    End If

                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM800_phympu & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phympu_hm800
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phympu_hm800
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_foldername_HM800_phympu) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_export_filename_phyproc_hm800)
                            End If

                            '************************************
                            ' PhyESW (Cache Write Pending) RAID700
                            '************************************
                        Case Strings.LCase(str_export_foldername_phyesw) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phyesw As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw)
                            'does the unzipped folder exists?
                            If directory_unzipped_phyesw.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phyesw.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phyesw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyesw
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyesw & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phyesw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyesw
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyesw & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phyesw
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyesw
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_phyesw) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_phyesw)
                            End If



                            '************************************
                            ' PhyCSW (Cache Write Pending) RAID600 (USP-V)
                            '************************************
                        Case Strings.LCase(str_export_foldername_phycsw) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phycsw As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw)
                            'does the unzipped folder exists?
                            If directory_unzipped_phycsw.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phycsw.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phycsw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycsw
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phycsw & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phycsw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycsw
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phycsw & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phycsw
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phycsw
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_phyesw) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_phyesw)
                            End If

                            '************************************
                            ' PhyMPU_dat.ZIP (Cache Write Pending) HM800
                            '************************************
                        Case Strings.LCase(str_export_foldername_HM800_phympu) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phympu As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu)
                            'does the unzipped folder exists?
                            If directory_unzipped_phympu.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phympu.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_mp
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM800_phympu & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_mp
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM800_phympu & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_mp
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mp
                                End If
                            End If



                            '************************************
                            ' PhyMainPK (Cache Write Pending) HM700
                            '************************************
                        Case Strings.LCase(str_export_foldername_HM700_phyesw) & ".zip" 'phyesw to be extracted (chache write pending rate)

                            Dim directory_unzipped_phyesw As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw)
                            'does the unzipped folder exists?
                            If directory_unzipped_phyesw.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phyesw.GetFiles("*.csv").Length <> 0 Then
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_HM700_phyesw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_HM700_phyesw
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM700_phyesw & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'phyesw data available
                                    'add phyesw string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_HM700_phyesw
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_HM700_phyesw
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_HM700_phyesw & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'phyesw data available
                                'add phyesw string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_HM700_phyesw
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_HM700_phyesw
                                End If
                            End If

                        Case Strings.LCase(str_export_foldername_mppk) & ".zip" 'mppk data to be extracted
                            '************************************
                            ' MPPK (CPU) RAID700, RAID800
                            '************************************

                            Dim directory_unzipped_mppk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk)
                            'does the unzipped folder exists?
                            If directory_unzipped_mppk.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_mppk.GetFiles("*.csv").Length <> 0 Then
                                    'mppk data available
                                    'add mppk string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_mppk
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mppk
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_mppk & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'mppk data available
                                    'add mppk string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_mppk
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mppk
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_mppk & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'mppk data available
                                'add mppk string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_mppk
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_mppk
                                End If
                            End If

                        Case Strings.LCase(str_export_foldername_port) & ".zip" 'port data to be extracted
                            '************************************
                            'Port (Port) RAID700, HHM700, RAID800
                            '************************************

                            Dim directory_unzipped_port As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port)
                            'does the unzipped folder exists?
                            If directory_unzipped_port.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_port.GetFiles("*.csv").Length <> 0 Then
                                    'port data available
                                    'add port string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_port
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_port
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_port & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'port data available
                                    'add port string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_port
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_port
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_port & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'port data available
                                'add port string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_port
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_port
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_response) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_response)
                            End If

                        Case Strings.LCase(str_export_foldername_remotecopy) & ".zip" 'remote copy data to be extracted
                            '************************************
                            ' Remote Copy (TC/HUR) RAID700, RAID800
                            '************************************

                            'does the unzipped folder exists?
                            If directory_unzipped.Exists Then
                                'check if data is already extracted
                                If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy) Then
                                    'remote copy data available
                                    'add remote copy string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_remotecopy
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_remotecopy
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_filename_remotecopy & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()
                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'remote copy data available
                                    'add remote copy string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_remotecopy
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_remotecopy
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_remotecopy & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()
                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'remote copy data available
                                'add remote copy string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_remotecopy
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_remotecopy
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy)
                            End If

                        Case Strings.LCase(str_export_foldername_lu) & ".zip" 'lu data to be extracted
                            '************************************
                            ' LU (LU) RAID700, RAID800
                            '************************************

                            Dim directory_unzipped_lu As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu)
                            'does the unzipped folder exists?
                            If directory_unzipped_lu.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_lu.GetFiles("*.csv").Length <> 0 Then
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_lu
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_lu
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_lu & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()

                                    '****************************************
                                    'evtl file filter einfügen
                                    '****************************************


                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_lu
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_lu
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_lu & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()

                                '****************************************
                                'evtl file filter einfügen
                                '****************************************

                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'lu data available
                                'add lu string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_lu
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_lu
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_iops) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_iops)
                            End If

                        Case Strings.LCase(str_export_foldername_hurjnl) & ".zip" 'hur jnl data to be extracted
                            '************************************
                            ' HUR JNL (HUR Journal) RAID700, RAID800
                            '************************************

                            Dim directory_unzipped_hurjnl As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl)
                            'does the unzipped folder exists?
                            If directory_unzipped_hurjnl.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_hurjnl.GetFiles("*.csv").Length <> 0 Then
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_hur_jnl
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_hur_jnl
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_hurjnl & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()

                                    '****************************************
                                    'evtl file filter einfügen
                                    '****************************************


                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_hur_jnl
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_hur_jnl
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_hurjnl & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()

                                '****************************************
                                'evtl file filter einfügen
                                '****************************************

                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'lu data available
                                'add lu string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_hur_jnl
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_hur_jnl
                                End If
                            End If

                            'what storage is it
                            If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_usedrate) Then
                                'what storage type
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_usedrate)
                            End If

                        Case Strings.LCase(str_export_foldername_phyldev) & ".zip" 'ldev busy und ldev si busy data to be extracted
                            '************************************
                            'LDEV Busy / LDEV SI Busy RAID700, RAID800
                            '************************************

                            Dim directory_unzipped_phyldev As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyldev)
                            'does the unzipped folder exists?
                            If directory_unzipped_phyldev.Exists Then
                                'check if data is already extracted
                                If directory_unzipped_phyldev.GetFiles("*.csv").Length <> 0 Then
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phyldev
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyldev
                                    End If
                                Else
                                    'unzip files
                                    Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyldev & Chr(34)
                                    Label_progress_chart.Visible = True
                                    Label_progress_chart.Update()

                                    '****************************************
                                    'evtl file filter einfügen
                                    '****************************************

                                    unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                    Label_progress_chart.Visible = False
                                    Label_progress_chart.Update()
                                    TabControl_chart1.Update()
                                    'lu data available
                                    'add lu string to csv string
                                    If IsNothing(str_performance_data_available) Then
                                        str_performance_data_available = str_performance_data_available_phyldev
                                    Else
                                        str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyldev
                                    End If
                                End If

                            Else
                                'unzip files
                                Label_progress_chart.Text = "Extracting " & Chr(34) & str_export_foldername_phyldev & Chr(34)
                                Label_progress_chart.Visible = True
                                Label_progress_chart.Update()

                                '****************************************
                                'evtl file filter einfügen
                                '****************************************

                                unzip(file_zipped.FullName, path_performance_export_data & "\" & str_export_foldername_unzipped, "")
                                Label_progress_chart.Visible = False
                                Label_progress_chart.Update()
                                TabControl_chart1.Update()
                                'lu data available
                                'add lu string to csv string
                                If IsNothing(str_performance_data_available) Then
                                    str_performance_data_available = str_performance_data_available_phyldev
                                Else
                                    str_performance_data_available = str_performance_data_available & "," & str_performance_data_available_phyldev
                                End If
                            End If

                            'what storage is it
                            If directory_unzipped_phyldev.GetFiles("*.csv").Length <> 0 Then
                                'what storage type
                                Dim files() As System.IO.FileInfo = directory_unzipped_phyldev.GetFiles("*.csv")
                                str_storage_system = str_what_storage_is_it(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyldev & "\" & files(0).Name)
                                files = Nothing
                            End If
                            directory_unzipped_phyldev = Nothing

                    End Select

                Next

            Else
                'only extracted data
                'RAID - Highend
                'check if performance data is extrcated in this folder


                'HUS - Midrange
                'check if performance data is extrcated in this folder


                'check if there are DF files in this foder
                If Not str_df_create_performance_files(directory) <> "-1" Then
                    MsgBox("The creation of the performance files could not be completed successfully.", MsgBoxStyle.Information)
                Else
                    'df performance data available
                    str_performance_data_available = str_performance_data_available_df

                End If

            End If

        Else
            'the folder selected does not exist
            MsgBox("performance export: Error : The folder '" & path_performance_export_data & "' does not exist.", MsgBoxStyle.Critical)

        End If

    End Sub

#End Region

#Region "Treeview Procedures"

    ''' <summary>
    ''' Treeview_populates the tree.
    ''' </summary>
    ''' <param name="path">The path.</param>
    Private Sub treeview_populate(ByVal path As String)

        'set datepicker
        Call set_datetimepicker_start_end()

        'set datetimepicker values
        date_datetimepicker_start_selected = DateTimePicker_start_performancedate.Value
        date_datetimepicker_end_selected = DateTimePicker_end_performancedate.Value

        'treeview erstellen
        Dim k As Integer = Nothing
        Dim l As Integer = Nothing

        TreeView_available_performancedata.Nodes.Clear()

        With TreeView_available_performancedata
            .CheckBoxes = True
            .ShowLines = True
            .ShowPlusMinus = True
            .ShowRootLines = True
            .Sort()
        End With

        Dim treenode_temparray As TreeNode() = Nothing
        Dim boolean_found As Boolean = False

        'variables to read a file
        Dim obj_reader As System.IO.StreamReader = Nothing
        Dim str_line As String = Nothing

        'variables to go through a directory
        Dim directory As IO.DirectoryInfo = Nothing
        Dim files_of_directory As IO.FileInfo() = Nothing
        Dim file As IO.FileInfo = Nothing

        'array of strings of all elements in a csv line (split) 
        Dim array_str As String() = Nothing

        'all elements of a performance file are stored here
        Dim str_elements As String = Nothing
        '
        Dim str_name As String = Nothing
        Dim str_element_name As String = Nothing

        If str_performance_data_available = str_performance_data_available_df Then
            'DF systems

            'no checkboxes in treeview
            TreeView_available_performancedata.CheckBoxes = False

            Dim str_name_out_of_arraylist As String = Nothing
            Dim directoryinfo_df As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped)

            'get all folders in the unzipped folder
            For Each subfolder As IO.DirectoryInfo In directoryinfo_df.GetDirectories()
                'if there are files in the folder
                If subfolder.GetFiles("*.csv").Length <> 0 Then

                    Select Case subfolder.Name
                        Case str_df_name_port
                            'set key
                            Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                            'go through the file and look if there are several groups of data
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & subfolder.Name & "\" & str_df_filename_port_iops_descriptor)

                            str_name = Nothing
                            'clear variable
                            array_str = Nothing
                            array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                            str_elements = Nothing

                            'go through array of descriptors
                            For Each item_port As String In array_str
                                'does the controller element exists?
                                If searchTreeview(df_port_name_get_ctl_name(item_port), Me.TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes, True, False) Is Nothing Then
                                    'add specifig controller
                                    Me.TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add(df_port_name_get_ctl_name(item_port), df_port_name_get_ctl_name(item_port))
                                End If
                                'add specifig port
                                '"CTL0-A"
                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes(df_port_name_get_ctl_name(item_port)).Nodes.Add(CStr(item_port), CStr(item_port))
                            Next

                        Case str_df_name_rg
                            'set key
                            'Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))
                        Case str_df_name_dppool
                            'set key
                            'Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))False
                        Case str_df_name_lu
                            'set key
                            Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                            'go through the file and look if there are several groups of data
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & _
                                                                                str_export_foldername_unzipped & "\" & subfolder.Name & "\" & _
                                                                                str_df_filename_lu_descriptor)

                            'clear variable
                            array_str = Nothing
                            array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                            str_elements = Nothing

                            'to get all lu numbers
                            Dim array_str_elements As String()
                            ReDim array_str_elements(0)

                            'go through array of descriptors
                            For Each item As String In array_str
                                
                                'add all elements but only the lun numbering. this is done to create the response time files (all elements needed there.
                                'see below
                                If IsNothing(array_str_elements(0)) Then
                                    array_str_elements(0) = item
                                Else
                                    array_str_elements(0) = array_str_elements(0) & "," & item
                                End If

                                'add specifig LU
                                '"LU0000" 
                                If Strings.Left(item, 5) = "CTL0-" Then 'only take the ctl0 luns to create the treeview

                                    Select Case Strings.Mid(item, 8, 1)
                                        Case "0"
                                            If Not TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.ContainsKey("0000-0999") Then
                                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add("0000-0999", "0000-0999")
                                            End If
                                            TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes("0000-0999").Nodes.Add(CStr(Strings.Right(item, item.Length - 5)), CStr(Strings.Right(item, item.Length - 5)))
                                        Case "1"
                                            If Not TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.ContainsKey("1000-1999") Then
                                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add("1000-1999", "1000-1999")
                                            End If
                                            TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes("1000-1999").Nodes.Add(CStr(Strings.Right(item, item.Length - 5)), CStr(Strings.Right(item, item.Length - 5)))
                                        Case "2"
                                            If Not TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.ContainsKey("2000-2999") Then
                                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add("2000-2999", "2000-2999")
                                            End If
                                            TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes("2000-2999").Nodes.Add(CStr(Strings.Right(item, item.Length - 5)), CStr(Strings.Right(item, item.Length - 5)))
                                        Case "3"
                                            If Not TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.ContainsKey("3000-3999") Then
                                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add("3000-3999", "3000-3999")
                                            End If
                                            TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes("3000-3999").Nodes.Add(CStr(Strings.Right(item, item.Length - 5)), CStr(Strings.Right(item, item.Length - 5)))
                                        Case "4"
                                            If Not TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.ContainsKey("4000-4095") Then
                                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add("4000-4095", "4000-4095")
                                            End If
                                            TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes("4000-4095").Nodes.Add(CStr(Strings.Right(item, item.Length - 5)), CStr(Strings.Right(item, item.Length - 5)))
                                        Case Else
                                    End Select

                                End If
                            Next
                            array_str = Nothing

                            ' if any of the response time files is missing then recreate them 
                            If Not System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_total_descriptor) Or Not System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_write_descriptor) Or Not System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_read_descriptor) Then

                                '------------------------------
                                'create the response time files
                                '------------------------------

                                Dim str_filepaths As String() = Nothing
                                ReDim str_filepaths(11)
                                'the filepaths should contain the following files
                                str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_count_descriptor
                                str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_descriptor
                                str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_count_descriptor
                                str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_descriptor
                                str_filepaths(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_count_descriptor
                                str_filepaths(5) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_descriptor
                                str_filepaths(6) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_count_descriptor
                                str_filepaths(7) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_descriptor
                                str_filepaths(8) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_count_descriptor
                                str_filepaths(9) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_descriptor
                                str_filepaths(10) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_count_descriptor
                                str_filepaths(11) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_descriptor

                                'element names
                                'all rows must have the same elements
                                ReDim Preserve array_str_elements(11)
                                For i = 1 To 11 Step 1
                                    array_str_elements(i) = array_str_elements(0)
                                Next

                                'element names after the calculation
                                'create the arraylist of the elementnames that the newly calculated elements should have.
                                Dim arraylist_str_element_label As New ArrayList
                                For Each element As String In array_str_elements(0).Split(CChar(","))
                                    If InStr(element, "CTL0", Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        arraylist_str_element_label.Add(Strings.Replace(element, "CTL0-", ""))
                                    End If
                                Next

                                'formula
                                'write count -> '01 lu_response_job_write_count'03 lu_response_job_write_hit_count'05 lu_response_job_write_miss_count
                                'write times -> '02 lu_response_job_write'04 lu_response_job_write_hit'06 lu_response_job_write_miss
                                'read count  -> '07 lu_response_job_read_count'09 lu_response_job_read_hit_count'11 lu_response_job_read_miss_count'
                                'read times  -> '08 lu_response_job_read'10 lu_response_job_read_hit'12 lu_response_job_read_miss

                                Dim str_formula As String = Nothing

                                '------------------------------------
                                'LU Total Response Time
                                '------------------------------------
                                'LUN total response time = 1 / (total read and write counts) * ((read cmd count * read cmd time) + (read cmd hit count * read cmd hit time) + (read cmd miss count * read cmd miss time) + (write cmd job * write cmd time) + (write cmd hit count * write cmd hit time) + (write cmd miss count * write cmd miss time))
                                '1/(:7:+:9:+:11:+:1:+:3:+:5:)*((:7:*:8:)+(:9:*:10:)+(:11:*:12:)+(:1:*:2:)+(:3:*:4:)+(:5:*:6:))
                                str_formula = "1/(:7:+:9:+:11:+:1:+:3:+:5:)*((:7:*:8:)+(:9:*:10:)+(:11:*:12:)+(:1:*:2:)+(:3:*:4:)+(:5:*:6:))"

                                'create the total reponse time  nothingfile out of the data
                                Dim array_temp As Array = array_raid_performance_data_put_in_array_of_several_files(str_filepaths, array_str_elements, "lu", "df_sum_up", date_datetimepicker_start_selected, date_datetimepicker_end_selected, int_array_descritor_line_count, "(LU Response Time)")
                                'save file after calculation
                                int_save_file_out_of_array(array_str_create_array_calculated_with_formula(array_temp, int_array_descritor_line_count, arraylist_str_element_label, str_formula, str_df_filename_lu_response_time_total_descriptor, "(LU Total Response Time)"), path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_total_descriptor, int_array_descritor_line_count)

                                '------------------------------------
                                'LU Read Response Time
                                '------------------------------------
                                '1 / dbl_total_count_read * ((dbl_read_job_count * dbl_read_job_response) + (dbl_read_miss_count * dbl_read_miss_response) + (dbl_read_hit_count * dbl_read_hit_response)))
                                'LUN read response time = 1 / (total read counts) * ((read cmd count * read cmd time) + (read cmd hit count * read cmd hit time) + (read cmd miss count * read cmd miss time)
                                '1/(:7:+:9:+:11:)*((:7:*:8:)+(:9:*:10:)+(:11:*:12:))
                                str_formula = "1/(:7:+:9:+:11:)*((:7:*:8:)+(:9:*:10:)+(:11:*:12:))"

                                int_save_file_out_of_array(array_str_create_array_calculated_with_formula(array_temp, int_array_descritor_line_count, arraylist_str_element_label, str_formula, str_df_filename_lu_response_time_read_descriptor, "(LU Read Response Time)"), path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_read_descriptor, int_array_descritor_line_count)

                                '------------------------------------
                                'LU Write Response Time
                                '------------------------------------
                                'LUN write response time = 1 / (total write counts) * ((write cmd job * write cmd time) + (write cmd hit count * write cmd hit time) + (write cmd miss count * write cmd miss time))
                                '1/(:1:+:3:+:5:)*((:1:*:2:)+(:3:*:4:)+(:5:*:6:))
                                str_formula = "1/(:1:+:3:+:5:)*((:1:*:2:)+(:3:*:4:)+(:5:*:6:))"

                                int_save_file_out_of_array(array_str_create_array_calculated_with_formula(array_temp, int_array_descritor_line_count, arraylist_str_element_label, str_formula, str_df_filename_lu_response_time_write_descriptor, "(LU Write Response Time)"), path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_write_descriptor, int_array_descritor_line_count)

                            End If

                        Case str_df_name_cache

                            'set key
                            Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                            'go through the file and look if there are several groups of data
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & subfolder.Name & "\" & str_df_filename_cache_descriptor)

                            str_name = Nothing
                            'clear variable
                            array_str = Nothing
                            array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                            str_elements = Nothing

                            'go through array of descriptors
                            For Each item As String In array_str
                                'add specifig cpu
                                '"CTL0-CoreX"
                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add(CStr(item), CStr(item))
                            Next
                            array_str = Nothing

                        Case str_df_name_processor

                            'set key
                            Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                            'go through the file and look if there are several groups of data
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & subfolder.Name & "\" & str_df_filename_cpu_descriptor)

                            str_name = Nothing
                            'clear variable
                            array_str = Nothing
                            array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                            str_elements = Nothing

                            'go through array of descriptors
                            For Each item As String In array_str
                                'add specifig cpu
                                '"CTL0-CoreX"
                                TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add(CStr(item), CStr(item))
                            Next
                            array_str = Nothing

                        Case str_df_name_cache_partitition
                            'set key
                            'Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))
                        Case str_df_name_drive
                            'set key
                            'Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))
                        Case str_df_name_drive_operate

                            'set key
                            Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                            'go through the file and look if there are several groups of data
                            'No.,"time",CTL0-Unit00-HDU00,CTL0-Unit00-HDU01,CTL0-Unit00-HDU02,CTL0-Unit00-HDU03
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & subfolder.Name & "\" & str_df_filename_driveoperate_descriptor)

                            str_name = Nothing
                            'clear variable
                            array_str = Nothing
                            'delete the No. and time element
                            array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                            str_elements = Nothing

                            'go through array of descriptors
                            For Each item As String In array_str
                                'does the controller element exists?
                                If searchTreeview(df_driveop_name_get_unit_name(item), Me.TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes, True, False) Is Nothing Then
                                    'add specifig unit
                                    '"Unit02"
                                    Me.TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes.Add(df_driveop_name_get_unit_name(item), df_driveop_name_get_unit_name(item))
                                End If

                                'only add the hdu once and not for both controllers.
                                If InStr(item, "CTL0") <> 0 Then
                                    'add specifig port
                                    '"HDU-00"
                                    TreeView_available_performancedata.Nodes(CStr(subfolder.Name)).Nodes(df_driveop_name_get_unit_name(item)).Nodes.Add(CStr(Strings.Right(item, item.Length - InStr(item, "HDU") + 1)), CStr(Strings.Right(item, item.Length - InStr(item, "HDU") + 1)))
                                End If

                            Next
                            array_str = Nothing

                        Case str_df_name_backend
                            'set key
                            'Me.TreeView_available_performancedata.Nodes.Add(CStr(subfolder.Name), CStr(subfolder.Name))

                        Case Else
                    End Select





                End If
            Next

            'set storage type
            str_storage_system = str_storage_type_df800

        Else ' RAID systems

            '***************************************************
            'RAID systems

            'PhyProc_dat.zip / PHY_MPPK.ZIP
            If (InStr(str_performance_data_available, str_performance_data_available_mp, Microsoft.VisualBasic.CompareMethod.Text) <> 0) Or (InStr(str_performance_data_available, str_performance_data_available_phympu_hm800, Microsoft.VisualBasic.CompareMethod.Text) <> 0) Then

                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_processor, str_processor)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor))

                '******************************************************
                ' create treeview out of the mp data (phyproc_dat\phy_short_mp.csv)
                '******************************************************

                'go through the file and look if there are several groups of data
                Select Case str_storage_system
                    Case str_storage_type_hm800
                        str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800)
                    Case Else
                        str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp)
                End Select

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                str_elements = Nothing

                For Each item_mp As String In array_str

                    Select Case str_storage_system
                        Case str_storage_type_raid700

                            '"No.","time","MPB-1MA.MP00-1MA","MPB-1MA.MP01-1MA","MPB-1MA.MP02-1MA","MPB-1MA.MP03-1MA","MPB-1MB.MP04-1MB","MPB-1MB.MP05-1MB","MPB-1MB.MP06-1MB","MPB-1MB.MP07-1MB","MPB-1ME.MP10-1ME","MPB-1ME.MP11-1ME","MPB-1ME.MP12-1ME","MPB-1ME.MP13-1ME","MPB-1MF.MP14-1MF","MPB-1MF.MP15-1MF","MPB-1MF.MP16-1MF","MPB-1MF.MP17-1MF","MPB-2MC.MP08-2MC","MPB-2MC.MP09-2MC","MPB-2MC.MP0A-2MC","MPB-2MC.MP0B-2MC","MPB-2MD.MP0C-2MD","MPB-2MD.MP0D-2MD","MPB-2MD.MP0E-2MD","MPB-2MD.MP0F-2MD","MPB-2MG.MP18-2MG","MPB-2MG.MP19-2MG","MPB-2MG.MP1A-2MG","MPB-2MG.MP1B-2MG","MPB-2MH.MP1C-2MH","MPB-2MH.MP1D-2MH","MPB-2MH.MP1E-2MH","MPB-2MH.MP1F-2MH"
                            If searchTreeview(raid700_mp_get_mpb_name(item_mp), Me.TreeView_available_performancedata.Nodes(str_processor).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_processor).Nodes.Add(raid700_mp_get_mpb_name(item_mp), raid700_mp_get_mpb_name(item_mp))
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor).Nodes(raid700_mp_get_mpb_name(item_mp)))
                            End If
                            'add specific mp core
                            '"MPB-1MA.MP00-1MA"
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid700_mp_get_mpb_name(item_mp)).Nodes.Add(raid700_mp_get_mp_name(item_mp), raid700_mp_get_mp_name(item_mp))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid700_mp_get_mpb_name(item_mp)).Nodes(raid700_mp_get_mp_name(item_mp)))

                        Case str_storage_type_raid750, str_storage_type_hm800

                            'No.,"time","MPU-10.MP10-00","MPU-10.MP10-01","MPU-10.MP10-02","MPU-10.MP10-03","MPU-11.MP11-00","MPU-11.MP11-01","MPU-11.MP11-02","MPU-11.MP11-03","MPU-20.MP20-00","MPU-20.MP20-01","MPU-20.MP20-02","MPU-20.MP20-03","MPU-21.MP21-00","MPU-21.MP21-01","MPU-21.MP21-02","MPU-21.MP21-03"
                            If searchTreeview(raid750_mp_get_mpb_name(item_mp), Me.TreeView_available_performancedata.Nodes(str_processor).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_processor).Nodes.Add(raid750_mp_get_mpb_name(item_mp), raid750_mp_get_mpb_name(item_mp))
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor).Nodes(raid750_mp_get_mpb_name(item_mp)))
                            End If
                            'add specific chp
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid750_mp_get_mpb_name(item_mp)).Nodes.Add(raid750_mp_get_mp_name(item_mp), raid750_mp_get_mp_name(item_mp))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid750_mp_get_mpb_name(item_mp)).Nodes(raid750_mp_get_mp_name(item_mp)))

                        Case str_storage_type_raid800
                            'No.,"time","MPU-10.MP10-00","MPU-10.MP10-01","MPU-10.MP10-02","MPU-10.MP10-03","MPU-11.MP11-00","MPU-11.MP11-01","MPU-11.MP11-02","MPU-11.MP11-03","MPU-20.MP20-00","MPU-20.MP20-01","MPU-20.MP20-02","MPU-20.MP20-03","MPU-21.MP21-00","MPU-21.MP21-01","MPU-21.MP21-02","MPU-21.MP21-03"
                            If searchTreeview(raid800_mp_get_mpb_name(item_mp), Me.TreeView_available_performancedata.Nodes(str_processor).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_processor).Nodes.Add(raid800_mp_get_mpb_name(item_mp), raid800_mp_get_mpb_name(item_mp))
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor).Nodes(raid750_mp_get_mpb_name(item_mp)))
                            End If
                            'add specific chp
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid800_mp_get_mpb_name(item_mp)).Nodes.Add(raid800_mp_get_mp_name(item_mp), raid800_mp_get_mp_name(item_mp))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid750_mp_get_mpb_name(item_mp)).Nodes(raid750_mp_get_mp_name(item_mp)))

                        Case str_storage_type_vsp5000
                            'No.,"time","MPU-10.MP10-00","MPU-10.MP10-01","MPU-10.MP10-02","MPU-10.MP10-03","MPU-11.MP11-00","MPU-11.MP11-01","MPU-11.MP11-02","MPU-11.MP11-03","MPU-20.MP20-00","MPU-20.MP20-01","MPU-20.MP20-02","MPU-20.MP20-03","MPU-21.MP21-00","MPU-21.MP21-01","MPU-21.MP21-02","MPU-21.MP21-03"
                            If searchTreeview(raid900_mp_get_mpb_name(item_mp), Me.TreeView_available_performancedata.Nodes(str_processor).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_processor).Nodes.Add(raid900_mp_get_mpb_name(item_mp), raid900_mp_get_mpb_name(item_mp))
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor).Nodes(raid750_mp_get_mpb_name(item_mp)))
                            End If
                            'add specific chp
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid900_mp_get_mpb_name(item_mp)).Nodes.Add(raid900_mp_get_mp_name(item_mp), raid900_mp_get_mp_name(item_mp))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid750_mp_get_mpb_name(item_mp)).Nodes(raid750_mp_get_mp_name(item_mp)))

                    End Select


                Next

            Else

                ' is there chp data?
                If InStr(str_performance_data_available, str_performance_data_available_chp, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                    'set key also
                    Me.TreeView_available_performancedata.Nodes.Add(str_processor, str_processor)
                    'hide checkbox
                    HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor))

                    '******************************************************
                    ' create treeview out of the chp data (phyproc_dat\phy_short_chp.csv)
                    '******************************************************

                    'go through the file and look if there are several groups of data
                    str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp)

                    str_name = Nothing

                    'clear variable
                    array_str = Nothing
                    array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                    'No.,"time","CHP00-1EU","CHP01-1EU","CHP02-1EU","CHP03-1EU","CHP10-1FU","CHP11-1FU","CHP12-1FU","CHP13-1FU","CHP04-1EL","CHP05-1EL","CHP06-1EL","CHP07-1EL","CHP14-1FL","CHP15-1FL","CHP16-1FL","CHP17-1FL","CHP20-1GU","CHP21-1GU","CHP22-1GU","CHP23-1GU","CHP30-1HU","CHP31-1HU","CHP32-1HU","CHP33-1HU","CHP24-1GL","CHP25-1GL","CHP26-1GL","CHP27-1GL","CHP34-1HL","CHP35-1HL","CHP36-1HL","CHP37-1HL","CHP80-2QU","CHP81-2QU","CHP82-2QU","CHP83-2QU","CHP90-2RU","CHP91-2RU","CHP92-2RU","CHP93-2RU","CHP84-2QL","CHP85-2QL","CHP86-2QL","CHP87-2QL","CHP94-2RL","CHP95-2RL","CHP96-2RL","CHP97-2RL","CHPA0-2TU","CHPA1-2TU","CHPA2-2TU","CHPA3-2TU","CHPB0-2UU","CHPB1-2UU","CHPB2-2UU","CHPB3-2UU","CHPA4-2TL","CHPA5-2TL","CHPA6-2TL","CHPA7-2TL","CHPB4-2UL","CHPB5-2UL","CHPB6-2UL","CHPB7-2UL"

                    str_elements = Nothing

                    'populate the elements
                    For Each item_chp As String In array_str
                        If searchTreeview(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), "")), Me.TreeView_available_performancedata.Nodes(str_processor).Nodes, True, False) Is Nothing Then
                            'add specifig mp blade
                            Me.TreeView_available_performancedata.Nodes(str_processor).Nodes.Add(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), "")), raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), "")))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_processor).Nodes(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), ""))))
                        End If

                        If InStr(Strings.Right(Strings.Replace(item_chp, Chr(34), ""), 3), "-") > 0 Then
                            'usp-vm
                            'add specific chp
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), ""))).Nodes.Add(CStr(str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(","))), CStr(str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(","))))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), ""))).Nodes(CStr(str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(",")))))
                        Else
                            'usp-v
                            'add specific chp
                            Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), ""))).Nodes.Add(CStr(str_get_name_out_of_an_arraylist(arraylist_uspv_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(","))), CStr(str_get_name_out_of_an_arraylist(arraylist_uspv_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(","))))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(CStr(str_processor)).Nodes(raid600_chp_get_location_name(Strings.Replace(item_chp, Chr(34), ""))).Nodes(CStr(str_get_name_out_of_an_arraylist(arraylist_uspv_chp, Strings.Replace(item_chp, Chr(34), ""), CChar(",")))))
                        End If

                    Next

                End If
            End If

            '***************************************************
            'PhyPG_dat.ZIP
            If InStr(str_performance_data_available, str_performance_data_available_phypg, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phypg data?
                ' phypg data?
                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_paritygroup, str_paritygroup)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_paritygroup))

                'go through the file and look if there are several groups of data
                Select Case str_storage_system
                    Case str_storage_type_hm800
                        str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg_hm800)
                    Case Else
                        str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg)
                End Select


                'clear variable
                array_str = Nothing
                'No.,"time","1-1","1-2","1-3",.....,"15-15","15-16"
                array_str = Split(str_elements, ",")
                str_elements = Nothing

                'temporary variables
                str_name = Nothing
                str_element_name = Nothing

                For Each item As String In array_str
                    'string must contain "-" sign
                    If InStr(item, "-", Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                        'add leading zeros if necessary (ex. 1-1 -> 01-01, 11-2 -> 11-02)
                        str_element_name = pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))

                        'create the summary pg string (ex. 01-XX)
                        str_element_name = CStr(Strings.Left(CStr(str_element_name), InStr(CStr(str_element_name), "-", Microsoft.VisualBasic.CompareMethod.Text))) & "XX"

                        'did i already add a parity group of that dku
                        If InStr(CStr(str_name), CStr(str_element_name), Microsoft.VisualBasic.CompareMethod.Text) = 0 Then

                            'add the parity group starting value
                            str_name = CStr(str_name) & CStr(str_element_name)

                            'add specifig parity group summary
                            Me.TreeView_available_performancedata.Nodes(str_paritygroup).Nodes.Add(CStr(str_element_name), CStr(str_element_name))
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_paritygroup).Nodes(CStr(str_element_name)))
                        End If

                        'add the specified pg in the subtree of the group
                        Me.TreeView_available_performancedata.Nodes(str_paritygroup).Nodes(CStr(str_element_name)).Nodes.Add(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))), CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_paritygroup).Nodes(CStr(str_element_name)).Nodes(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), ""))))))

                    End If
                Next
                array_str = Nothing

            End If

            '***************************************************
            'LDEVEACHOFCU_data
            If InStr(str_performance_data_available, str_performance_data_available_ldeveachofcu, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' ldeveachofcu data?
                If searchTreeview(str_ldeveachofcu, Me.TreeView_available_performancedata.Nodes, True, False) Is Nothing Then
                    'set key also
                    Me.TreeView_available_performancedata.Nodes.Add(str_ldeveachofcu, str_ldeveachofcu)
                    'hide checkbox
                    HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_ldeveachofcu))
                End If

                'go through the file and look if there are several groups of data
                Dim directory_ldeveachofcu_iops As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops)

                'go through the files
                For Each str_cu_file As FileInfo In directory_ldeveachofcu_iops.GetFiles("*.csv")

                    'go through the first file in the folder 
                    str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops & "\" & str_cu_file.Name)

                    'clear variable
                    array_str = Nothing
                    '"No.","time","00:00:00X(X2304-1)","00:00:01X(X2305-1)","00:00:02X(X2306-1)"
                    array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                    str_elements = Nothing

                    'create cu treeview folder
                    Me.TreeView_available_performancedata.Nodes(str_ldeveachofcu).Nodes.Add(Strings.Mid(str_cu_file.Name, str_export_filename_ldeveachofcu_iops.Length + 1, 2), Strings.Mid(str_cu_file.Name, str_export_filename_ldeveachofcu_iops.Length + 1, 2))

                    'go through all description elements in the cu file
                    For Each str_item As String In array_str
                        'ignore the no. and time values
                        If (Not str_item = str_no_value) And (Not str_item = str_time_value) Then
                            'create cu treeview folder
                            Me.TreeView_available_performancedata.Nodes(str_ldeveachofcu).Nodes(Strings.Mid(str_cu_file.Name, str_export_filename_ldeveachofcu_iops.Length + 1, 2)).Nodes.Add(str_item, str_item)
                        End If
                    Next
                Next

                ''temporary variables
                'str_name = Nothing
                'str_element_name = Nothing

                'For Each item As String In array_str
                '    'string must contain "-" sign
                '    If InStr(item, "-", Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                '        'add leading zeros if necessary (ex. 1-1 -> 01-01, 11-2 -> 11-02)
                '        str_element_name = pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))

                '        'create the summary pg string (ex. 01-XX)
                '        str_element_name = CStr(Strings.Left(CStr(str_element_name), InStr(CStr(str_element_name), "-", Microsoft.VisualBasic.CompareMethod.Text))) & "XX"

                '        'did i already add a parity group of that dku
                '        If InStr(CStr(str_name), CStr(str_element_name), Microsoft.VisualBasic.CompareMethod.Text) = 0 Then

                '            'add the parity group starting value
                '            str_name = CStr(str_name) & CStr(str_element_name)

                '            'add specifig parity group summary
                '            Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes.Add(CStr(str_element_name), CStr(str_element_name))
                '            'hide checkbox
                '            HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes(CStr(str_element_name)))
                '        End If

                '        If System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & CStr(Strings.Replace(item, Chr(34), "")) & ".csv") Then

                '            'add the specified pg in the subtree of the group
                '            Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes(CStr(str_element_name)).Nodes.Add(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))), CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), "")))))
                '            'hide checkbox
                '            HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes(CStr(str_element_name)).Nodes(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), ""))))))

                '            'add the ldevs of that pg
                '            'go through the file and look if there are several groups of data
                '            Dim str_ldev_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & CStr(Strings.Replace(item, Chr(34), "")) & ".csv")

                '            'clear variable
                '            Dim array_str_ldev As Array = Nothing
                '            'No.,"time","00:F0:00"...
                '            array_str_ldev = Split(CStr(str_ldev_elements), ",")
                '            str_elements = Nothing
                '            For Each ldev_item As String In array_str_ldev
                '                If Not ldev_item = Chr(34) & str_no_value & Chr(34) And Not ldev_item = Chr(34) & str_time_value & Chr(34) Then
                '                    'add the specified pg in the subtree of the group
                '                    Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes(CStr(str_element_name)).Nodes(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), ""))))).Nodes.Add(CStr(Strings.Replace(ldev_item, Chr(34), "")), CStr(Strings.Replace(ldev_item, Chr(34), "")))
                '                    'hide checkbox
                '                    HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_phyldev).Nodes(str_phyldev_physical).Nodes(CStr(str_element_name)).Nodes(CStr(pg_leading_zero_add(CStr(Strings.Replace(item, Chr(34), ""))))).Nodes(CStr(Strings.Replace(ldev_item, Chr(34), ""))))
                '                End If

                '            Next
                '            array_str_ldev = Nothing
                '            str_ldev_elements = Nothing

                '        End If
                '    End If
                'Next
                'array_str = Nothing
            End If


            '***************************************************
            'PhyCSW_dat.ZIP (cache) RAID600
            If InStr(str_performance_data_available, str_performance_data_available_phycsw, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phyesw data?
                'cache write pending (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_cache, str_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache))

                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_phyesw)

                'clear variable
                array_str = Nothing
                'No.,"time","1-1","1-2","1-3",.....,"15-15","15-16"
                array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                str_elements = Nothing


                For Each item As String In array_str

                    'string must not be "No." and "time"
                    If Not item = str_no_value And Not item = str_time_value Then

                        'add specific mp core
                        Me.TreeView_available_performancedata.Nodes(str_cache).Nodes.Add(item, item)
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(item))

                    End If
                Next
                array_str = Nothing


            End If

            '***************************************************
            'PhyMPU_dat.ZIP (cache) HM800
            If InStr(str_performance_data_available, str_performance_data_available_phympu_hm800, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phympu data?

                '******************************************************
                ' create treeview out of the backend data (phympu_dat\PHY_Write_Pending_Rate_MPU-???.csv)
                '******************************************************
                'cache write pending (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_cache, str_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache))

                'clear variables
                directory = Nothing
                files_of_directory = Nothing
                file = Nothing

                Select Case str_storage_system
                    Case str_storage_type_vsp5000
                        directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu)
                        files_of_directory = directory.GetFiles(str_phy & str_short & str_export_filename_start_phympu_write_pending_raid900 & str_mpu_pattern_raid900 & "*.csv")

                    Case Else
                        directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu)
                        files_of_directory = directory.GetFiles(str_phy & str_export_filename_start_phympu_write_pending_hm800 & str_mpu_pattern_hm800 & "*.csv")
                End Select

                Dim str_mpb As String = Nothing

                'create treeview cache write pending
                For Each file In files_of_directory
                    'go through the file and look if there are several groups of data
                    str_elements = str_raid_performance_data_create_elements(file.FullName)

                    'clear variable
                    array_str = Nothing
                    'No.,"time","1-1","1-2","1-3",.....,"15-15","15-16"
                    array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                    str_elements = Nothing

                    'temporary variables
                    'VSP5000 PHY_Short_Write_Pending_Rate_MPU-010.csv -> 010
                    'Gx00    PHY_Write_Pending_Rate_MPU-20.csv        -> 20
                    'str_name = Strings.Left(Strings.Right(file.Name, 6), 2)
                    Dim idx_start As Integer = file.Name.LastIndexOf("-") + 1
                    Dim idx_end As Integer = file.Name.LastIndexOf(".")
                    str_name = file.Name.Substring(idx_start, idx_end - idx_start)

                    For Each item As String In array_str

                        'string must not be "No." and "time"
                        If Not item = str_no_value And Not item = str_time_value Then
                            If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_cache).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes.Add(str_name, str_name)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name))
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            Else
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            End If
                        End If
                    Next
                    array_str = Nothing
                Next
            End If

            '***************************************************
            ' PHY_Short_MPU_HIE.csv or PHY_Long_HIE_ISW.csv (Panama2 -> MH850, Jupiter -> VSP5x00)
            If InStr(str_performance_data_available, str_performance_data_available_phybackend_vsp5000, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                '******************************************************
                ' create treeview out of the backend data (phympu_dat\PHY_Write_Pending_Rate_MPU-???.csv)
                '******************************************************
                'backend (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_backend_hm700, str_backend_hm700)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700))

                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_raid900_backend_hie, str_raid900_backend_hie)
                'hide checkbox
                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid900_backend_hie))

                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_mpuhie_pattern_raid900 & ".csv")
                array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                str_elements = Nothing
                Dim array_str1 As String() = Nothing
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_hieisw_pattern_raid900 & ".csv")
                array_str1 = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                str_elements = Nothing

                For Each item As String In array_str

                    'string must not be "No." and "time"
                    If Not item = str_no_value And Not item = str_time_value Then
                        str_elements = item & ";"

                        'find elements that contain the item id and save it comma separated to use it as key
                        For Each item1 As String In array_str1
                            If (item1.Contains(Strings.Right(item, 3))) Then
                                If Strings.Right(str_elements, 1) = ";" Then
                                    str_elements &= item1
                                Else
                                    str_elements = str_elements & "," & item1
                                End If
                            End If
                        Next

                        'add specifig mp blade
                        Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid900_backend_hie).Nodes.Add(str_elements, Strings.Right(item, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid900_backend_hie).Nodes(Strings.Right(item, 3))
                    End If
                Next




            End If

            '***************************************************
            'PhyCMPK_dat.ZIP (cache, backend) RAID800, HM800

            If InStr(str_performance_data_available, str_performance_data_available_phycmpk, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phyesw data?

                '******************************************************
                ' create treeview out of the backend data (phycmpk_dat\PHY_Short_Write_Pending_Rate_MPB-???.csv)
                '******************************************************
                'cache write pending (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_cache, str_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache))

                'clear variables
                directory = Nothing
                files_of_directory = Nothing
                file = Nothing

                Select Case str_storage_system
                    Case str_storage_type_hm800
                        directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu)
                        files_of_directory = directory.GetFiles(str_phy & str_export_filename_start_phympu_write_pending_hm800 & str_mpu_pattern_hm800 & "*.csv")
                    Case Else
                        directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk)
                        files_of_directory = directory.GetFiles(str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & "*.csv")
                End Select

                Dim str_mpb As String = Nothing

                'create treeview cache write pending
                For Each file In files_of_directory
                    'go through the file and look if there are several groups of data
                    str_elements = str_raid_performance_data_create_elements(file.FullName)

                    'clear variable
                    array_str = Nothing
                    'No.,"time","1-1","1-2","1-3",.....,"15-15","15-16"
                    array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                    str_elements = Nothing

                    'temporary variables
                    str_name = Strings.Left(Strings.Right(file.Name, 7), 3)

                    For Each item As String In array_str

                        'string must not be "No." and "time"
                        If Not item = str_no_value And Not item = str_time_value Then
                            If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_cache).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes.Add(str_name, str_name)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name))
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            Else
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            End If
                        End If
                    Next
                    array_str = Nothing
                Next

                '******************************************************
                ' create treeview out of the backend data
                '******************************************************
                'backend (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_backend_hm700, str_backend_hm700)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700))

                '**********************
                ' PHY_Short_CHA_CMPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_raid800_backend_cha_cmpk, str_raid800_backend_cha_cmpk)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cha_cmpk))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cha)

                str_name = Nothing

                'clear variable
                array_str = Nothing

                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                'No.,"time","CHA-1PC.CACHE-1CA","CHA-1PC.CACHE-1CB","CHA-1PC.CACHE-2CA","CHA-1PC.CACHE-2CB","CHA-1PD.CACHE-1CA","CHA-1PD.CACHE-1CB","CHA-1PD.CACHE-2CA","CHA-1PD.CACHE-2CB","CHA-1PE.CACHE-1CA","CHA-1PE.CACHE-1CB","CHA-1PE.CACHE-2CA","CHA-1PE.CACHE-2CB","CHA-2PC.CACHE-1CA","CHA-2PC.CACHE-1CB","CHA-2PC.CACHE-2CA","CHA-2PC.CACHE-2CB","CHA-2PD.CACHE-1CA","CHA-2PD.CACHE-1CB","CHA-2PD.CACHE-2CA","CHA-2PD.CACHE-2CB","CHA-2PE.CACHE-1CA","CHA-2PE.CACHE-1CB","CHA-2PE.CACHE-2CA","CHA-2PE.CACHE-2CB"

                For Each item_backend As String In array_str
                    If searchTreeview(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cha_cmpk).Nodes, True, False) Is Nothing Then
                        'add specifig backend location
                        '"CHA-1PC.CACHE-1CA"
                        '1PC
                        Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cha_cmpk).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                    End If
                    'add specific backend location
                    '"CHA-1PC.CACHE-1CA"
                    '1CA
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cha_cmpk).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))
                Next
                array_str = Nothing

                '**********************
                ' PHY_Short_CMPK_Cache.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_raid800_backend_cmpk_cache, str_raid800_backend_cmpk_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cmpk_cache))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cache)

                str_name = Nothing

                'clear variable
                array_str = Nothing

                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                'No.,"time","CACHE-1CA","CACHE-1CB","CACHE-2CA","CACHE-2CB"

                For Each item_backend As String In array_str
                    'add specifig backend location
                    '"CACHE-1CA"
                    '1CA
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_cmpk_cache).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                Next
                array_str = Nothing
                '**********************
                ' PHY_Short_DKA_CMPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_raid800_backend_dka_cmpk, str_raid800_backend_dka_cmpk)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_dka_cmpk))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_dka)

                str_name = Nothing

                'clear variable
                array_str = Nothing

                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                'No.,"time","DKA-1PA.CACHE-1CA","DKA-1PA.CACHE-1CB","DKA-1PA.CACHE-2CA","DKA-1PA.CACHE-2CB","DKA-1PB.CACHE-1CA","DKA-1PB.CACHE-1CB","DKA-1PB.CACHE-2CA","DKA-1PB.CACHE-2CB","DKA-2PA.CACHE-1CA","DKA-2PA.CACHE-1CB","DKA-2PA.CACHE-2CA","DKA-2PA.CACHE-2CB","DKA-2PB.CACHE-1CA","DKA-2PB.CACHE-1CB","DKA-2PB.CACHE-2CA","DKA-2PB.CACHE-2CB"

                For Each item_backend As String In array_str
                    If searchTreeview(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_dka_cmpk).Nodes, True, False) Is Nothing Then
                        'add specifig backend location
                        '"DKA-1PA.CACHE-1CA"
                        '1PA
                        Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_dka_cmpk).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                    End If
                    'add specific backend location
                    '"DKA-1PA.CACHE-1CA"
                    '1CA
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_dka_cmpk).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))
                Next
                array_str = Nothing

                '**********************
                ' PHY_Short_MPPCB_CMPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_raid800_backend_mppcb_cmpk, str_raid800_backend_mppcb_cmpk)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_mppcb_cmpk))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_mppcb)

                str_name = Nothing

                'clear variable
                array_str = Nothing

                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                'No.,"time","MPB-1MA.CACHE-1CA","MPB-1MA.CACHE-1CB","MPB-1MA.CACHE-2CA","MPB-1MA.CACHE-2CB","MPB-1MB.CACHE-1CA","MPB-1MB.CACHE-1CB","MPB-1MB.CACHE-2CA","MPB-1MB.CACHE-2CB","MPB-2MA.CACHE-1CA","MPB-2MA.CACHE-1CB","MPB-2MA.CACHE-2CA","MPB-2MA.CACHE-2CB","MPB-2MB.CACHE-1CA","MPB-2MB.CACHE-1CB","MPB-2MB.CACHE-2CA","MPB-2MB.CACHE-2CB"

                For Each item_backend As String In array_str
                    If searchTreeview(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_mppcb_cmpk).Nodes, True, False) Is Nothing Then
                        'add specifig backend location
                        '"MPB-1MA.CACHE-1CA"
                        '1MA
                        Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_mppcb_cmpk).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                    End If
                    'add specific backend location
                    '"MPB-1MA.CACHE-1CA"
                    '1CA
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_raid800_backend_mppcb_cmpk).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))
                Next
                array_str = Nothing

            End If


            '***************************************************
            'PhyESW_dat.ZIP (cache) RAID700

            If InStr(str_performance_data_available, str_performance_data_available_phyesw, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phyesw data?

                '******************************************************
                ' create treeview out of the backend data (phyesw_dat\PHY_Short_Write_Pending_Rate_MPB-???.csv)
                '******************************************************
                'cache write pending (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_cache, str_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache))

                'clear variables
                directory = Nothing
                files_of_directory = Nothing
                file = Nothing

                directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw)
                files_of_directory = directory.GetFiles(str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & "*.csv")

                Dim str_mpb As String = Nothing

                'create treeview cache write pending
                For Each file In files_of_directory
                    'go through the file and look if there are several groups of data
                    str_elements = str_raid_performance_data_create_elements(file.FullName)

                    'clear variable
                    array_str = Nothing
                    'No.,"time","1-1","1-2","1-3",.....,"15-15","15-16"
                    array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                    str_elements = Nothing

                    'temporary variables
                    str_name = Strings.Left(Strings.Right(file.Name, 7), 3)

                    For Each item As String In array_str

                        'string must not be "No." and "time"
                        If Not item = str_no_value And Not item = str_time_value Then
                            If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_cache).Nodes, True, False) Is Nothing Then
                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes.Add(str_name, str_name)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name))
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            Else
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            End If
                        End If
                    Next
                    array_str = Nothing
                Next

                '******************************************************
                ' create treeview out of the backend data (phyesw_dat\PHY_Short_DKA_ESW.csv)
                '******************************************************
                'backend (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_backend, str_backend)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend))

                '**********************
                ' DKA - ESW
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend).Nodes.Add(str_backend_dka_esw, str_backend_dka_esw)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_backend_dka)

                str_name = Nothing

                'clear variable
                array_str = Nothing

                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")
                'No.,"time","DKA-1AU.ESW-1SA","DKA-1AU.ESW-2SC","DKA-1AL.ESW-1SB","DKA-1AL.ESW-2SD","DKA-1LU.ESW-1SE","DKA-1LU.ESW-2SG","DKA-1LL.ESW-1SF","DKA-1LL.ESW-2SH","DKA-2MU.ESW-1SA","DKA-2MU.ESW-2SC","DKA-2ML.ESW-1SB","DKA-2ML.ESW-2SD","DKA-2XU.ESW-1SE","DKA-2XU.ESW-2SG","DKA-2XL.ESW-1SF","DKA-2XL.ESW-2SH"

                For Each item_backend As String In array_str
                    If searchTreeview(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw).Nodes, True, False) Is Nothing Then
                        'add specifig backend location
                        '"DKA-1AU.ESW-1SA"
                        '1AU
                        Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                    End If
                    'add specific backend location
                    '"DKA-1AU.ESW-1SA"
                    '1SA
                    Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_dka_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))
                Next
                array_str = Nothing

                '**********************
                ' CHA - ESW
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend).Nodes.Add(str_backend_cha_esw, str_backend_cha_esw)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_backend_cha)

                '"No.","time","CHA-1EU.ESW-1SA","CHA-1EU.ESW-2SC","CHA-1EL.ESW-1SA","CHA-1EL.ESW-2SC","CHA-1FU.ESW-1SB","CHA-1FU.ESW-2SD","CHA-1GU.ESW-1SE","CHA-1GU.ESW-2SG","CHA-1GL.ESW-1SE","CHA-1GL.ESW-2SG","CHA-1HU.ESW-1SF","CHA-1HU.ESW-2SH","CHA-2QU.ESW-1SA","CHA-2QU.ESW-2SC","CHA-2QL.ESW-1SA","CHA-2QL.ESW-2SC","CHA-2RU.ESW-1SB","CHA-2RU.ESW-2SD","CHA-2TU.ESW-1SE","CHA-2TU.ESW-2SG","CHA-2TL.ESW-1SE","CHA-2TL.ESW-2SG","CHA-2UU.ESW-1SF","CHA-2UU.ESW-2SH"

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str
                    If searchTreeview(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw).Nodes, True, False) Is Nothing Then
                        'add specifig backend location
                        '"CHA-1EU.ESW-1SA"
                        '1EU
                        Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))
                    End If
                    'add specific backend location
                    '"CHA-1EU.ESW-1SA"
                    '1SA
                    Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_cha_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))
                Next
                array_str = Nothing


                '**********************
                ' ESW - Cache
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend).Nodes.Add(str_backend_esw_cache, str_backend_esw_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_esw_cache))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_backend_cache)

                '"No.","time","ESW-1SA.CACHE-1CA","ESW-1SA.CACHE-1CB","ESW-1SA.CACHE-2CC","ESW-1SA.CACHE-2CD","ESW-1SB.CACHE-1CA","ESW-1SB.CACHE-1CB","ESW-1SB.CACHE-2CC","ESW-1SB.CACHE-2CD","ESW-1SE.CACHE-1CJ","ESW-1SE.CACHE-2CL","ESW-1SF.CACHE-1CJ","ESW-1SF.CACHE-2CL","ESW-2SC.CACHE-1CA","ESW-2SC.CACHE-1CB","ESW-2SC.CACHE-2CC","ESW-2SC.CACHE-2CD","ESW-2SD.CACHE-1CA","ESW-2SD.CACHE-1CB","ESW-2SD.CACHE-2CC","ESW-2SD.CACHE-2CD","ESW-2SG.CACHE-1CJ","ESW-2SG.CACHE-2CL","ESW-2SH.CACHE-1CJ","ESW-2SH.CACHE-2CL"

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str

                    treenode_temparray = TreeView_available_performancedata.Nodes.Find(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), True)
                    boolean_found = False
                    For i = 0 To treenode_temparray.Length - 1

                        If InStr(treenode_temparray(i).FullPath, str_backend_esw_cache) > 0 Then
                            'is the node in the subtree that i want to create
                            boolean_found = True
                        End If

                    Next
                    treenode_temparray = Nothing

                    ' if the parent node does not exist
                    If Not boolean_found Then

                        'add specifig backend location
                        '"ESW-1SA.CACHE-1CA"
                        '1SA
                        Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_esw_cache).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_esw_cache).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))

                    End If
                    treenode_temparray = Nothing

                    'add specific backend location
                    '"ESW-1SA.CACHE-1CA""
                    '1CA
                    Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_esw_cache).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_esw_cache).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))

                Next
                array_str = Nothing
                boolean_found = Nothing


                '**********************
                ' MPPCB - ESW
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend).Nodes.Add(str_backend_mppcb_esw, str_backend_mppcb_esw)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_mppcb_esw))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_export_filename_backend_mppcb)

                '"No.","time","MPB-1MA.ESW-1SA","MPB-1MA.ESW-1SB","MPB-1MA.ESW-2SC","MPB-1MA.ESW-2SD","MPB-1MB.ESW-1SA","MPB-1MB.ESW-1SB","MPB-1MB.ESW-2SC","MPB-1MB.ESW-2SD","MPB-1ME.ESW-1SE","MPB-1ME.ESW-1SF","MPB-1ME.ESW-2SG","MPB-1ME.ESW-2SH","MPB-2MC.ESW-1SA","MPB-2MC.ESW-1SB","MPB-2MC.ESW-2SC","MPB-2MC.ESW-2SD","MPB-2MD.ESW-1SA","MPB-2MD.ESW-1SB","MPB-2MD.ESW-2SC","MPB-2MD.ESW-2SD","MPB-2MG.ESW-1SE","MPB-2MG.ESW-1SF","MPB-2MG.ESW-2SG","MPB-2MG.ESW-2SH"

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str
                    treenode_temparray = TreeView_available_performancedata.Nodes.Find(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), True)
                    boolean_found = False
                    For i = 0 To treenode_temparray.Length - 1

                        If InStr(treenode_temparray(i).FullPath, str_backend_mppcb_esw) > 0 Then
                            'is the node in the subtree that i want to create
                            boolean_found = True
                        End If

                    Next
                    treenode_temparray = Nothing

                    ' if the parent node does not exist
                    If Not boolean_found Then

                        'add specifig backend location
                        '"MPB-1MA.ESW-1SA"
                        '1MA
                        Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_mppcb_esw).Nodes.Add(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3), Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3))
                        'hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_mppcb_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)))

                    End If
                    treenode_temparray = Nothing

                    'add specific backend location
                    '"MPB-1MA.ESW-1SA"
                    '1SA
                    Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_mppcb_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes.Add(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3), Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend).Nodes(str_backend_mppcb_esw).Nodes(Strings.Mid(Strings.Replace(item_backend, Chr(34), ""), 5, 3)).Nodes(Strings.Right(Strings.Replace(item_backend, Chr(34), ""), 3)))

                Next
                array_str = Nothing
                boolean_found = Nothing

            End If

            If InStr(str_performance_data_available, str_performance_data_available_HM700_phyesw, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' phyesw data?

                '******************************************************
                ' create treeview out of the backend data (PhyMainPK_dat\PHY_Short_Write_Pending_Rate_MPU-??.csv)
                '******************************************************
                'cache write pending (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_cache, str_cache)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache))

                'clear variables
                directory = Nothing
                files_of_directory = Nothing
                file = Nothing

                directory = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw)
                files_of_directory = directory.GetFiles(str_phy & str_export_filename_start_HM700_phesw_write_pending & str_mpu & "*.csv")

                Dim str_mpb As String = Nothing

                'create treeview cache write pending
                For Each file In files_of_directory
                    'go through the file and look if there are several groups of data
                    str_elements = str_raid_performance_data_create_elements(file.FullName)

                    'clear variable
                    array_str = Nothing
                    '"No.","time","00(CLPR0)"
                    array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                    str_elements = Nothing

                    'temporary variables
                    str_name = Strings.Left(Strings.Right(file.Name, 6), 2)

                    For Each item As String In array_str

                        'string must not be "No." and "time"
                        If Not item = str_no_value And Not item = str_time_value Then

                            If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_cache).Nodes, True, False) Is Nothing Then

                                'add specifig mp blade
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes.Add(str_name, str_name)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name))
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            Else
                                'add specific mp core
                                Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes.Add(item, item)
                                'hide checkbox
                                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_cache).Nodes(str_name).Nodes(item))

                            End If
                        End If
                    Next
                    array_str = Nothing
                Next
                str_name = Nothing


                '******************************************************
                ' create treeview out of the backend data (PhyMainPK_dat\PHY_Short_BEPK_MainPK.csv, PHY_Short_Cache_MainPK.csv, PHY_Short_FEPK_MainPK.csv
                '******************************************************

                'backend (set key also)
                Me.TreeView_available_performancedata.Nodes.Add(str_backend_hm700, str_backend_hm700)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700))

                '**********************
                ' BEPK - MainPK 'PHY_Short_BEPK_MainPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_backend_hm700_bepk_mainkp, str_backend_hm700_bepk_mainkp)
                'hide checkbox
                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_bepk_mainkp))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_bepk)

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str
                    'add specific backend location
                    'No.,"time","DKB-1E.MAIN1","DKB-1F.MAIN1","DKB-2E.MAIN2","DKB-2F.MAIN2"
                    'DKB-1E.MAIN1
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_bepk_mainkp).Nodes.Add(Strings.Replace(item_backend, Chr(34), ""), Strings.Replace(item_backend, Chr(34), ""))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_bepk_mainkp).Nodes(Strings.Replace(item_backend, Chr(34), "")))
                Next
                array_str = Nothing

                '**********************
                ' Cache - MainPK 'PHY_Short_Cache_MainPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_backend_hm700_cache_mainpk, str_backend_hm700_cache_mainpk)
                'hide checkbox
                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_cache_mainpk))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_cache)

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str
                    'add specific backend location
                    'No.,"time","DKB-1E.MAIN1","DKB-1F.MAIN1","DKB-2E.MAIN2","DKB-2F.MAIN2"
                    'DKB-1E.MAIN1
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_cache_mainpk).Nodes.Add(Strings.Replace(item_backend, Chr(34), ""), Strings.Replace(item_backend, Chr(34), ""))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_cache_mainpk).Nodes(Strings.Replace(item_backend, Chr(34), "")))
                Next
                array_str = Nothing

                '**********************
                ' FEPK - MainPK 'PHY_Short_FEPK_MainPK.csv
                '**********************
                Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes.Add(str_backend_hm700_fepk_mainpk, str_backend_hm700_fepk_mainpk)
                'hide checkbox
                'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_fepk_mainpk))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_fepk)

                str_name = Nothing

                'clear variable
                array_str = Nothing
                array_str = Split(Strings.Right(str_elements, str_elements.Length - 13), ",")

                For Each item_backend As String In array_str
                    'add specific backend location
                    'No.,"time","DKB-1E.MAIN1","DKB-1F.MAIN1","DKB-2E.MAIN2","DKB-2F.MAIN2"
                    'DKB-1E.MAIN1
                    Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_fepk_mainpk).Nodes.Add(Strings.Replace(item_backend, Chr(34), ""), Strings.Replace(item_backend, Chr(34), ""))
                    'hide checkbox
                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_backend_hm700).Nodes(str_backend_hm700_fepk_mainpk).Nodes(Strings.Replace(item_backend, Chr(34), "")))

                Next
                array_str = Nothing

            End If

            '***************************************************
            'Port_dat.ZIP
            If InStr(str_performance_data_available, str_performance_data_available_port, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' port data?
                ' port data?
                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_port, str_port)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port))

                'mf ports
                If (InStr(str_performance_data_available, str_performance_data_available_mfport, Microsoft.VisualBasic.CompareMethod.Text) <> 0) Then
                    'set key also
                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes.Add(str_mfports, str_mfports)
                    'hide checkbox
                    HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_mfports))


                    Dim directory_mfport_unzipped As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_mfport)
                    If directory_mfport_unzipped.Exists Then
                        'go through all zip files in the folder
                        For Each file_zipped_mfport As FileInfo In directory_mfport_unzipped.GetFiles("*.csv")
                            'go through the file and look if there are several groups of data
                            str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_mfport & "\" & file_zipped_mfport.Name)
                            'clear variable
                            array_str = Nothing
                            '"No.","time","CL1-A","CL5-A","CL7-A","CL1-B","CL3-B","CL5-B","CL7-B","CL1-C","CL3-C"
                            array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                            str_name = Nothing
                            str_elements = Nothing
                            Exit For
                        Next

                        For Each item As String In array_str

                            'string must not be "No." and "time"
                            If Not item = str_no_value And Not item = str_time_value Then

                                str_name = Strings.Left(item, 4) & "X"

                                If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_mfports).Nodes, True, False) Is Nothing Then

                                    'add specifig mp blade
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_mfports).Nodes.Add(str_name, str_name)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name))
                                    'add specific mp core
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_mfports).Nodes(str_name).Nodes.Add(item, item)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                                Else
                                    'add specific mp core
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_mfports).Nodes(str_name).Nodes.Add(item, item)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                                End If
                            End If
                        Next
                        str_name = Nothing
                        array_str = Nothing


                    End If




                End If

                '----------------------------------------------
                ' Open ports
                '------------------------------------------------

                'set key also
                Me.TreeView_available_performancedata.Nodes(str_port).Nodes.Add(str_openports, str_openports)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_openports))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_response)

                'clear variable
                array_str = Nothing
                '"No.","time","CL1-A","CL5-A","CL7-A","CL1-B","CL3-B","CL5-B","CL7-B","CL1-C","CL3-C"
                array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                str_name = Nothing
                str_elements = Nothing

                For Each item As String In array_str

                    'string must not be "No." and "time"
                    If Not item = str_no_value And Not item = str_time_value Then

                        str_name = Strings.Left(item, 4) & "X"

                        If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_openports).Nodes, True, False) Is Nothing Then

                            'add specifig mp blade
                            Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_openports).Nodes.Add(str_name, str_name)
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name))
                            'add specific mp core
                            Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_openports).Nodes(str_name).Nodes.Add(item, item)
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                        Else
                            'add specific mp core
                            Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_openports).Nodes(str_name).Nodes.Add(item, item)
                            'hide checkbox
                            'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                        End If
                    End If
                Next
                str_name = Nothing
                array_str = Nothing

            End If

            '***************************************************
            'RemoteCopy_dat.ZIP
            If InStr(str_performance_data_available, str_performance_data_available_remotecopy, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' remotecopy data?

                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_truecopy, str_truecopy)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy))

                'is port data available
                If InStr(str_performance_data_available, str_performance_data_available_port, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                    If System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_iops) And System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_transfer) And System.IO.File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_response) Then
                        If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_port).Nodes, True, False) Is Nothing Then
                            'set key also
                            Me.TreeView_available_performancedata.Nodes(str_port).Nodes.Add(str_tchurports, str_tchurports)
                            'hide checkbox
                            HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_tchurports))
                        End If

                        'go through the file and look if there are several groups of data
                        str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_iops)

                        'clear variable
                        array_str = Nothing
                        '"No.","time","CL1-A","CL5-A","CL7-A","CL1-B","CL3-B","CL5-B","CL7-B","CL1-C","CL3-C"
                        array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                        str_name = Nothing
                        str_elements = Nothing

                        For Each item As String In array_str

                            'string must not be "No." and "time"
                            If Not item = str_no_value And Not item = str_time_value Then

                                str_name = Strings.Left(item, 4) & "X"

                                If searchTreeview(str_name, Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_tchurports).Nodes, True, False) Is Nothing Then

                                    'add specifig mp blade
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_tchurports).Nodes.Add(str_name, str_name)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name))
                                    'add specific mp core
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_tchurports).Nodes(str_name).Nodes.Add(item, item)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                                Else
                                    'add specific mp core
                                    Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_tchurports).Nodes(str_name).Nodes.Add(item, item)
                                    'hide checkbox
                                    'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_port).Nodes(str_name).Nodes(item))

                                End If
                            End If
                        Next
                        str_name = Nothing
                        array_str = Nothing


                        'Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_initiator_ports, str_truecopy_chart_name_initiator_ports)
                        ''hide checkbox
                        'HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_initiator_ports))


                    End If

                End If

                Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_remoteio, str_truecopy_chart_name_remoteio)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_remoteio))

                Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_remotetransfer, str_truecopy_chart_name_remotetransfer)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_remotetransfer))

                Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_remoteresponse, str_truecopy_chart_name_remoteresponse)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_remoteresponse))

                Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_remoteoutofsync, str_truecopy_chart_name_remoteoutofsync)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_remoteoutofsync))

                Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes.Add(str_truecopy_chart_name_remotesynchronized, str_truecopy_chart_name_remotesynchronized)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_truecopy).Nodes(str_truecopy_chart_name_remotesynchronized))

            End If

            '***************************************************
            'LU_dat.ZIP
            If InStr(str_performance_data_available, str_performance_data_available_lu, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then ' lu data?
                ' lu data?
                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_lu, str_lu)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_lu))

                'go through the file and look if there are several groups of data
                str_elements = str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_response)

                'clear variable
                array_str = Nothing
                'No.,"time","CL1-B.01(backfe60).0000","CL1-B.01(backfe60).0001","CL1-B.01(backfe60).0002","CL1-B.02(backt010).0000","CL1-B.02(backt010).0001"

                array_str = Split(Strings.Replace(str_elements, Chr(34), ""), ",")
                str_name = Nothing
                str_elements = Nothing

                Dim last_port_element As String = ""
                Dim last_hostgroup_element As String = ""
                For Each item As String In array_str
                    'string must not be "No." and "time"
                    If Not item = str_no_value And Not item = str_time_value Then

                        If Strings.Left(item, 5) <> last_port_element Then
                            last_port_element = Strings.Left(item, 5)
                            last_hostgroup_element = Strings.Mid(item, 7, InStr(item, ")") - 6)
                            'add port number
                            Me.TreeView_available_performancedata.Nodes(str_lu).Nodes.Add(last_port_element, last_port_element)
                            'hide checkbox
                            HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element))

                            'add hostgroup
                            Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element).Nodes.Add(last_hostgroup_element, last_hostgroup_element)
                            'add lun
                            Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element).Nodes(last_hostgroup_element).Nodes.Add(lu_get_lu_number(item), lu_get_lu_number(item))

                        Else
                            If Strings.Mid(item, 7, InStr(item, ")") - 6) <> last_hostgroup_element Then
                                last_hostgroup_element = Strings.Mid(item, 7, InStr(item, ")") - 6)
                                'add hostgroup
                                Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element).Nodes.Add(last_hostgroup_element, last_hostgroup_element)
                                'add the lun
                                Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element).Nodes(last_hostgroup_element).Nodes.Add(lu_get_lu_number(item), lu_get_lu_number(item))
                            Else
                                'add the lun
                                Me.TreeView_available_performancedata.Nodes(str_lu).Nodes(last_port_element).Nodes(last_hostgroup_element).Nodes.Add(lu_get_lu_number(item), lu_get_lu_number(item))
                            End If
                        End If

                    End If
                Next
                Me.TreeView_available_performancedata.Update()

                array_str = Nothing
                str_name = Nothing

            End If

            '***************************************************
            'URJNL_dat.ZIP (HUR Journal info)
            If InStr(str_performance_data_available, str_performance_data_available_hur_jnl, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                'set key also
                Me.TreeView_available_performancedata.Nodes.Add(str_hur, str_hur)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_initial_copy_transfer, str_hur_chart_name_jnl_initial_copy_transfer)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_initial_copy_transfer))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_write_transfer, str_hur_chart_name_jnl_write_transfer)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_write_transfer))

                'M
                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_m_usedrate, str_hur_chart_name_jnl_m_usedrate)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_m_usedrate))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_m_rio, str_hur_chart_name_jnl_m_rio)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_m_rio))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_m_transfer, str_hur_chart_name_jnl_m_transfer)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_m_transfer))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_m_response, str_hur_chart_name_jnl_m_response)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_m_response))

                'R
                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_r_usedrate, str_hur_chart_name_jnl_r_usedrate)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_r_usedrate))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_r_rio, str_hur_chart_name_jnl_r_rio)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_r_rio))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_r_transfer, str_hur_chart_name_jnl_r_transfer)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_r_transfer))

                Me.TreeView_available_performancedata.Nodes(str_hur).Nodes.Add(str_hur_chart_name_jnl_r_response, str_hur_chart_name_jnl_r_response)
                'hide checkbox
                HideRootCheckBox(Me.TreeView_available_performancedata.Nodes(str_hur).Nodes(str_hur_chart_name_jnl_r_response))
            End If

            End If

            'expand all subelements
            'artikel_TreeView.ExpandAll()
            'but only if there are any nodes
            'If Not TreeView_available_performancedata.Nodes.Count = 0 Then
            '    'select first element
            '    TreeView_available_performancedata.Select()
            '    TreeView_available_performancedata.SelectedNode = TreeView_available_performancedata.Nodes(0)
            'End If

    End Sub

    ''' <summary>
    ''' this sub prepares the data behind the selection to graph it. for example what ports should be shown?
    ''' </summary>
    ''' <param name="sender">The sender.</param>
    ''' <param name="e">The <see cref="System.Windows.Forms.TreeViewEventArgs"/> instance containing the event data.</param>
    ''' <param name="str_what_type_of_graph">The str_what_type_of_graph.</param>
    Private Sub TreeView_available_performancedata_AfterSelect(ByVal sender As System.Object, ByVal e As System.Windows.Forms.TreeViewEventArgs, Optional ByVal str_what_type_of_graph As String = str_default_value) Handles TreeView_available_performancedata.AfterSelect

        Dim str_performance_data_array As String() = Nothing

        Dim array_str_filepaths As String() = Nothing
        Dim array_str_elements As String() = Nothing

        'top of tops
        'this is needed if we have to calculate the top x out of several files
        Dim list_of_dictionary_elements As New List(Of Dictionary(Of String, Double))
        Dim dictionary_elements As New Dictionary(Of String, String)
        Dim str_temp As String = Nothing
        Dim list_dictionary_elements As List(Of Dictionary(Of String, Double)) = New List(Of Dictionary(Of String, Double))
        'top x results
        Dim dictionary_result_top_x As New Dictionary(Of String, Double)

        Dim str_collection_of_descriptors As String() = Nothing
        Dim str_collection_of_filepaths As String() = Nothing
        Dim i As Integer = Nothing
        Dim temp As String = Nothing
        Dim bl_file_exists As Boolean = False

        Dim boolean_all_elements_checked As Boolean
        Dim boolean_at_least_one_is_checked As Boolean

        'set datetimepicker values
        date_datetimepicker_start_selected = DateTimePicker_start_performancedate.Value
        date_datetimepicker_end_selected = DateTimePicker_end_performancedate.Value

        If e.Action = TreeViewAction.ByMouse Or IsNothing(e) Then
            'which level was clicked on
            Select Case e.Node.Level
                Case 0
#Region "Case0"
                    ' case 0 start *******************************************************
                    Select Case str_storage_system
                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid600, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000

                            'what type of data is it
                            Select Case e.Node.Name

                                Case str_lu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'top x iops
                                    '-----------------
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_iops
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'top x sequential write iops
                                    '-----------------
                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'top x random write iops
                                    '-----------------
                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'top x transfer
                                    '-----------------
                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'top x write transfer
                                    '-----------------
                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_kbps_write
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'top x read transfer
                                    '-----------------
                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_kbps_read
                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)
                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next
                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_processor 'mp data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)


                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If

                                        'check child child nodes
                                        For Each childchildnode As TreeNode In childnode.Nodes
                                            'find out if only some child nodes are marked
                                            If childchildnode.Checked Then
                                                boolean_at_least_one_is_checked = True
                                            Else
                                                boolean_all_elements_checked = False
                                            End If
                                        Next

                                    Next

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700 'VSP data

                                            'get the child mp names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                        'take all elements
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid700_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid700_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        End If
                                                    Else
                                                        'take only the checked elements
                                                        If childNodeLevel2.Checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = raid700_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & raid700_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            End If
                                                        End If
                                                    End If

                                                Next
                                            Next

                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid800
                                            '"MPB-1MA.MP00-1MA"

                                            'get the child mp names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                        'take all elements
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid800_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid800_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        End If
                                                    Else
                                                        'take only the checked elements
                                                        If childNodeLevel2.Checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = raid800_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & raid800_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            End If
                                                        End If
                                                    End If

                                                Next
                                            Next

                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_vsp5000
                                            '"MPU-010.MP010-00"

                                            'get the child mp names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                        'take all elements
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid900_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid900_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        End If
                                                    Else
                                                        'take only the checked elements
                                                        If childNodeLevel2.Checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = raid900_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & raid900_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            End If
                                                        End If
                                                    End If

                                                Next
                                            Next

                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing


                                        Case str_storage_type_raid750, str_storage_type_hm800 'HUS VM, VSP Gx00 data

                                            'get the child mp names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                        'take all elements
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid750_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid750_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                        End If
                                                    Else
                                                        'take only the checked elements
                                                        If childNodeLevel2.Checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = raid750_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & raid750_mp_get_mp_name_original(childNodeLevel1.Name, childNodeLevel2.Name)
                                                            End If
                                                        End If
                                                    End If

                                                Next
                                            Next

                                            'set the filepath where you can find all the elements
                                            Select Case str_storage_system
                                                Case str_storage_type_raid750
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                Case str_storage_type_hm800
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800
                                            End Select

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid600 'USPV data

                                            'get the child mp names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                        'take all elements
                                                        If IsNothing(array_str_elements(0)) Then
                                                            If Strings.Len(CStr(childNodeLevel1.Name)) = 2 Then
                                                                'usp-vm
                                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childNodeLevel2.Name, CChar(","))
                                                            Else
                                                                'usp-v
                                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childNodeLevel2.Name, CChar(","))
                                                            End If
                                                        Else
                                                            If Strings.Len(CStr(childNodeLevel1.Name)) = 2 Then
                                                                'usp-vm
                                                                array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childNodeLevel2.Name, CChar(","))
                                                            Else
                                                                'usp-v
                                                                array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childNodeLevel2.Name, CChar(","))
                                                            End If

                                                        End If
                                                    Else
                                                        'take only the checked elements
                                                        If childNodeLevel2.Checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                If Strings.Len(CStr(childNodeLevel1.Name)) = 2 Then
                                                                    'usp-vm
                                                                    array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childNodeLevel2.Name, CChar(","))
                                                                Else
                                                                    'usp-v
                                                                    array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childNodeLevel2.Name, CChar(","))
                                                                End If
                                                            Else
                                                                If Strings.Len(CStr(childNodeLevel1.Name)) = 2 Then
                                                                    'usp-vm
                                                                    array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childNodeLevel2.Name, CChar(","))
                                                                Else
                                                                    'usp-v
                                                                    array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childNodeLevel2.Name, CChar(","))
                                                                End If

                                                            End If
                                                        End If
                                                    End If

                                                Next
                                            Next

                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing


                                    End Select

                                Case str_paritygroup 'parity group data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If

                                        'check child child nodes
                                        For Each childchildnode As TreeNode In childnode.Nodes
                                            'find out if only some child nodes are marked
                                            If childchildnode.Checked Then
                                                boolean_at_least_one_is_checked = True
                                            Else
                                                boolean_all_elements_checked = False
                                            End If
                                        Next

                                    Next

                                    'get all child pg names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = pg_leading_zero_remove(childNodeLevel2.Name)
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childNodeLevel2.Name)
                                                End If
                                            Else
                                                If childNodeLevel2.Checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = pg_leading_zero_remove(childNodeLevel2.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childNodeLevel2.Name)
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next

                                    Select Case str_storage_system
                                        Case str_storage_type_hm800
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg_hm800
                                        Case Else
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg
                                    End Select

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_paritygroup, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_cache 'write pending rate data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing
                                    'extend the array by one
                                    ReDim array_str_elements(1)
                                    ReDim array_str_filepaths(1)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If

                                        'check child child nodes
                                        For Each childchildnode As TreeNode In childnode.Nodes
                                            'find out if only some child nodes are marked
                                            If childchildnode.Checked Then
                                                boolean_at_least_one_is_checked = True
                                            Else
                                                boolean_all_elements_checked = False
                                            End If
                                        Next
                                    Next

                                    If str_storage_system = str_storage_type_raid600 Then
                                        'RAID600 USP-V

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_phyesw
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_cache_usage
                                        For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = childNodeLevel1.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel1.Name
                                                End If
                                            Else
                                                If childNodeLevel1.Checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = childNodeLevel1.Name
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel1.Name
                                                    End If
                                                End If
                                            End If
                                        Next
                                        array_str_elements(1) = array_str_elements(0)

                                        'collect data and show chart
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    Else
                                        'RAID700, HUS-VM, HM800

                                        'get all child mp names
                                        i = 0
                                        For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                            For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                                                    'extend the array by one
                                                    ReDim Preserve array_str_elements(i)
                                                    ReDim Preserve array_str_filepaths(i)

                                                    Select Case str_storage_system
                                                        Case str_storage_type_raid700
                                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & childNodeLevel1.Name & ".csv"
                                                        Case str_storage_type_raid800
                                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & childNodeLevel1.Name & ".csv"
                                                        Case str_storage_type_raid750
                                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_HM700_phesw_write_pending & str_mpu & childNodeLevel1.Name & ".csv"
                                                        Case str_storage_type_hm800
                                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_write_pending_hm800 & str_mpu & childNodeLevel1.Name & ".csv"
                                                        Case str_storage_type_vsp5000
                                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_export_filename_start_phympu_write_pending_raid900 & str_mpu & childNodeLevel1.Name & ".csv"
                                                    End Select

                                                    If IsNothing(array_str_elements(i)) Then
                                                        array_str_elements(i) = childNodeLevel2.Name
                                                    Else
                                                        array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                                    End If
                                                    i = i + 1
                                                Else
                                                    If childNodeLevel2.Checked Then

                                                        'extend the array by one
                                                        ReDim Preserve array_str_elements(i)
                                                        ReDim Preserve array_str_filepaths(i)

                                                        Select Case str_storage_system
                                                            Case str_storage_type_raid700
                                                                array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & childNodeLevel1.Name & ".csv"
                                                            Case str_storage_type_raid800
                                                                array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & childNodeLevel1.Name & ".csv"
                                                            Case str_storage_type_raid750
                                                                array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_HM700_phesw_write_pending & str_mpu & childNodeLevel1.Name & ".csv"
                                                            Case str_storage_type_hm800
                                                                array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_write_pending_hm800 & str_mpu & childNodeLevel1.Name & ".csv"
                                                            Case str_storage_type_vsp5000
                                                                array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_export_filename_start_phympu_write_pending_raid900 & str_mpu & childNodeLevel1.Name & ".csv"
                                                        End Select

                                                        If IsNothing(array_str_elements(i)) Then
                                                            array_str_elements(i) = childNodeLevel2.Name
                                                        Else
                                                            array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                                        End If
                                                        i = i + 1
                                                    End If
                                                End If
                                            Next
                                        Next
                                        i = Nothing

                                        'collect data and show chart
                                        Select Case str_storage_system
                                            Case str_storage_type_hm800
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_hm800, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            Case Else
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        End Select
                                    End If

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_ldeveachofcu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'initialize variables
                                    Dim directory_info As DirectoryInfo = Nothing
                                    Dim file_info As IO.FileInfo() = Nothing

                                    'top x iops
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)

                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x sequential write iops
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_write_seq)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x random write iops
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_write_rand)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x sequential read iops
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_read_seq)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x random read iops
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_read_rand)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x transfer
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x write transfer
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate_write)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    'top x read transfer
                                    '-----------------
                                    'clear variables
                                    list_dictionary_elements.Clear()
                                    list_of_dictionary_elements.Clear()
                                    dictionary_elements.Clear()
                                    str_temp = Nothing

                                    'set the filepath where you can find all the elements
                                    directory_info = New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate_read)
                                    file_info = directory_info.GetFiles()

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(file_info.Count - 1)
                                    ReDim array_str_elements(file_info.Count - 1)
                                    'create the list for all files
                                    For int_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        list_dictionary_elements.Add(New Dictionary(Of String, Double))
                                    Next

                                    'list the filesnames and elements in the specified file
                                    For int_file_counter As Integer = 0 To file_info.Count - 1 Step 1
                                        array_str_filepaths(int_file_counter) = file_info(int_file_counter).FullName

                                        'top x dictionary per file
                                        list_dictionary_elements(int_file_counter) = New Dictionary(Of String, Double)

                                        list_dictionary_elements(int_file_counter) = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(int_file_counter), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_ldeveachofcu)

                                    Next

                                    'get the top x out of the list of top x dictionaries
                                    list_of_dictionary_elements = dictionary_get_top_x_out_of_several_dictionaries(list_dictionary_elements, CInt(ToolStripComboBox_topx_value.Text))

                                    'go through the elements and show what to delete and what elements to use
                                    For int_count As Integer = 0 To list_of_dictionary_elements.Count - 1 Step 1
                                        'are there any elements in that filepath
                                        If list_of_dictionary_elements(int_count).Count > 0 Then

                                            'elements
                                            str_temp = Nothing
                                            For Each dictionary_element In list_of_dictionary_elements(int_count)
                                                If IsNothing(str_temp) Then
                                                    str_temp = dictionary_element.Key
                                                Else
                                                    str_temp = str_temp & "," & dictionary_element.Key
                                                End If
                                            Next

                                            'add filepath and elements to the dictionary
                                            dictionary_elements.Add(array_str_filepaths(int_count), str_temp)

                                        End If
                                    Next

                                    'set array to the value of rows needed (loose all old data)
                                    ReDim array_str_filepaths(dictionary_elements.Count - 1)
                                    ReDim array_str_elements(dictionary_elements.Count - 1)
                                    'fill in the necessary data
                                    For int_count As Integer = 0 To dictionary_elements.Count - 1 Step 1
                                        array_str_filepaths(int_count) = dictionary_elements.ElementAt(int_count).Key
                                        array_str_elements(int_count) = dictionary_elements.ElementAt(int_count).Value
                                    Next

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case Else

                            End Select

                        Case str_storage_type_df800

                            'what type of data is it
                            Select Case e.Node.Name

                                Case str_df_name_cache

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        If IsNothing(str_collection_of_descriptors(0)) Then
                                            str_collection_of_descriptors(0) = childnode.Name
                                        Else
                                            str_collection_of_descriptors(0) = str_collection_of_descriptors(0) & "," & childnode.Name
                                        End If
                                    Next

                                    'get the performance data 
                                    '"DKA-1AU.ESW-1SA"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_cache & "\" & str_df_filename_cache_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Write Pending Rate " & e.Node.Name & "", e.Node.FullPath, 100, 1, "Cache Write Pending Rate [%]", e.Node.Name & " W'Pending Rate", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_processor

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        If IsNothing(str_collection_of_descriptors(0)) Then
                                            str_collection_of_descriptors(0) = childnode.Name
                                        Else
                                            str_collection_of_descriptors(0) = str_collection_of_descriptors(0) & "," & childnode.Name
                                        End If
                                    Next

                                    'get the performance data 
                                    '"CTL0-CoreX"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_processor & "\" & str_df_filename_cpu_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " busy", e.Node.FullPath, 100, 1, "CPU Busy [%]", e.Node.Name & " CPU Busy", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_port

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)

                                    'get all child port names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                            If IsNothing(str_collection_of_descriptors(0)) Then
                                                str_collection_of_descriptors(0) = childNodeLevel2.Name
                                            Else
                                                str_collection_of_descriptors(0) = str_collection_of_descriptors(0) & "," & childNodeLevel2.Name
                                            End If
                                        Next
                                    Next

                                    'get the performance data 
                                    '"CTL1-A"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                       str_df_name_port & "\" & str_df_filename_port_iops_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Port IOPS", e.Node.Name, 0, 1, "Port IOPS [IO/s]", "Port IOPS", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                    'Port Transfer
                                    'get the performance data 
                                    '"CTL1-A"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & _
                                                      str_df_filename_port_transfer_descriptor, _
                                                      str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Port Transfer " & e.Node.Name & "", _
                                                      e.Node.FullPath, 0, 1, "Port Transfer [MB/s]", e.Node.Name & " Port Transfer", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_lu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'create an an array with one element
                                    ReDim array_str_elements(0)
                                    ReDim array_str_filepaths(0)

                                    'LU IOPS
                                    '------------------------------------------
                                    'top x iops max
                                    '-----------------
                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_iops_descriptor

                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next

                                    ''get all child lu
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                    '        If IsNothing(array_str_elements(0)) Then
                                    '            array_str_elements(0) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        End If
                                    '    Next
                                    'Next

                                    'collect data and show chart
                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    'LU Transfer
                                    '------------------------------------------
                                    'top x transfer max
                                    '-----------------

                                    'create an an array with one element
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_transfer_descriptor

                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next

                                    ''get all child lu
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                    '        If IsNothing(array_str_elements(0)) Then
                                    '            array_str_elements(0) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        End If
                                    '    Next
                                    'Next

                                    'collect data and show chart
                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    'LU Read Tag Count
                                    '------------------------------------------
                                    'top x read tag count max
                                    '-----------------

                                    'create an an array with one element
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'set the filepath where you can find all the elements
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_tag_count_read_descriptor

                                    dictionary_result_top_x.Clear()
                                    dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                    For Each element In dictionary_result_top_x
                                        If IsNothing(array_str_elements(0)) Then
                                            array_str_elements(0) = element.Key
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                        End If
                                    Next

                                    ''get all child lu
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                    '        If IsNothing(array_str_elements(0)) Then
                                    '            array_str_elements(0) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        End If
                                    '    Next
                                    'Next

                                    'collect data and show chart
                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")


                                    'LU Response Time 
                                    '------------------------------------------
                                    'if the response time files are existent a tab for top x total, read, write response is created 
                                    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_total_descriptor) And File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_read_descriptor) And File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_df_name_lu & "\" & str_df_filename_lu_response_time_write_descriptor) Then

                                        'LU Total response time
                                        '----------------------
                                        'create an an array with one element
                                        ReDim array_str_filepaths(0)
                                        ReDim array_str_elements(0)

                                        'set the filepath where you can find all the elements
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_df_name_lu & "\" & str_df_filename_lu_response_time_total_descriptor


                                        dictionary_result_top_x.Clear()
                                        dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                        For Each element In dictionary_result_top_x
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = element.Key
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                            End If
                                        Next

                                        Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        'LU Read response time
                                        '----------------------
                                        'create an an array with one element
                                        ReDim array_str_filepaths(0)
                                        ReDim array_str_elements(0)

                                        'set the filepath where you can find all the elements
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_df_name_lu & "\" & str_df_filename_lu_response_time_read_descriptor


                                        dictionary_result_top_x.Clear()
                                        dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                        For Each element In dictionary_result_top_x
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = element.Key
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                            End If
                                        Next

                                        Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        'LU Write response time
                                        '----------------------
                                        'create an an array with one element
                                        ReDim array_str_filepaths(0)
                                        ReDim array_str_elements(0)

                                        'set the filepath where you can find all the elements
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_df_name_lu & "\" & str_df_filename_lu_response_time_write_descriptor


                                        dictionary_result_top_x.Clear()
                                        dictionary_result_top_x = dictionary_raid_performance_data_put_in_dictionary_topx(array_str_filepaths(0), date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.Text), "max", str_lu)

                                        For Each element In dictionary_result_top_x
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = element.Key
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & element.Key
                                            End If
                                        Next

                                        Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    End If


                                    ''create an an array with one element
                                    'ReDim array_str_filepaths(11)
                                    'ReDim array_str_elements(11)

                                    ''set the filepath where you can find all the elements
                                    'array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_write_count_descriptor
                                    'array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_write_descriptor
                                    'array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_count_descriptor
                                    'array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_descriptor
                                    'array_str_filepaths(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                 str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_count_descriptor
                                    'array_str_filepaths(5) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_descriptor
                                    'array_str_filepaths(6) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                 str_df_name_lu & "\" & str_df_filename_lu_response_job_read_count_descriptor
                                    'array_str_filepaths(7) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_read_descriptor
                                    'array_str_filepaths(8) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_count_descriptor
                                    'array_str_filepaths(9) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_descriptor
                                    'array_str_filepaths(10) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_count_descriptor
                                    'array_str_filepaths(11) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_descriptor

                                    ''get all child lu
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                    '        If IsNothing(array_str_elements(0)) Then
                                    '            array_str_elements(0) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(1) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(2) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(3) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(4) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(5) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(6) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(7) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(8) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(9) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(10) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(11) = "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(1) = array_str_elements(1) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(2) = array_str_elements(2) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(3) = array_str_elements(3) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(4) = array_str_elements(4) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(5) = array_str_elements(5) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(6) = array_str_elements(6) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(7) = array_str_elements(7) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(8) = array_str_elements(8) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(9) = array_str_elements(9) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(10) = array_str_elements(10) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '            array_str_elements(11) = array_str_elements(11) & "," & "CTL0-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel2.Name
                                    '        End If
                                    '    Next
                                    'Next

                                    ''collect data and show chart
                                    ''Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_lu_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    ''get the performance data 
                                    'str_performance_data_array = raid_performance_data_put_in_array_of_several_files(array_str_filepaths, array_str_elements, "", "")
                                    '' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    'Call create_chart(e.Node.Name & " Response Time", e.Node.Name, 0, dbl_conversion_us_ms, "LU Response Time [ms]", "LU Response Time", str_performance_data_array, "fastline", str_what_to_do_lu_response)
                                    'str_performance_data_array = Nothing

                                    array_str_filepaths = Nothing

                                Case str_df_name_drive_operate

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'create an an array with one element
                                    ReDim array_str_elements(0)
                                    ReDim array_str_filepaths(0)


                                    'get all child port names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                            If IsNothing(array_str_elements(0)) Then
                                                'No.,"time",CTL0-Unit00-HDU00,CTL0-Unit00-HDU01,CTL0-Unit00-HDU02,CTL0-Unit00-HDU03,CTL0-Unit00-HDU04,CTL0-Unit00-HDU05
                                                array_str_elements(0) = "CTL0-" & childNodeLevel1.Name & "-" & childNodeLevel2.Name & ",CTL1-" & childNodeLevel1.Name & "-" & childNodeLevel2.Name
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & childNodeLevel1.Name & "-" & childNodeLevel1.Name & ",CTL1-" & childNodeLevel1.Name & "-" & childNodeLevel2.Name
                                            End If
                                        Next
                                    Next

                                    'HDD operating rate
                                    '------------------------------------------
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_driveoperate_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing

                                    'HDD tag count
                                    '------------------------------------------
                                    'create an an array with one element
                                    ReDim array_str_filepaths(0)

                                    'HDD tag count
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_drive_tag_count_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                            End Select

                    End Select
                    ' case 0 start *******************************************************
#End Region
                Case 1
#Region "Case1"

                    ' case 1 start *******************************************************
                    Select Case str_storage_system
                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid600, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000
                            'what type of data is it
                            Select Case e.Node.Parent.Name

                                Case str_ldeveachofcu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If
                                    Next

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = childnode.Name
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                            End If
                                        Else
                                            If childnode.Checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = childnode.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                                End If
                                            End If
                                        End If
                                    Next


                                    'iops
                                    ReDim array_str_filepaths(0)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops & "\" & str_export_filename_ldeveachofcu_iops & e.Node.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    'transfer
                                    ReDim array_str_filepaths(0)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate & "\" & str_export_filename_ldeveachofcu_transrate & e.Node.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    'response
                                    ReDim array_str_filepaths(0)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_response & "\" & str_export_filename_ldeveachofcu_response & e.Node.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                Case str_lu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing


                                    '-------------------------------------------
                                    'LU IOPS

                                    'extend the array by one
                                    ReDim array_str_elements(e.Node.Nodes.Count - 1)
                                    ReDim array_str_filepaths(e.Node.Nodes.Count - 1)

                                    i = 0

                                    For Each childnode_level1 As TreeNode In e.Node.Nodes

                                        array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops


                                        For Each childnode_level2 As TreeNode In childnode_level1.Nodes
                                            If IsNothing(array_str_elements(i)) Then
                                                'CL1-A.01(ss001378).0000
                                                array_str_elements(i) = e.Node.Name & "." & childnode_level1.Name & "." & childnode_level2.Name
                                            Else
                                                array_str_elements(i) = array_str_elements(i) & "," & e.Node.Name & "." & childnode_level1.Name & "." & childnode_level2.Name
                                            End If
                                        Next

                                        i = i + 1
                                    Next
                                    i = Nothing

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU Transfer

                                    i = 0
                                    ReDim array_str_filepaths(e.Node.Nodes.Count - 1)

                                    For Each childnode_level1 As TreeNode In e.Node.Nodes

                                        array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_kbps

                                        i = i + 1
                                    Next
                                    i = Nothing

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU Response

                                    i = 0
                                    ReDim array_str_filepaths(e.Node.Nodes.Count - 1)

                                    For Each childnode_level1 As TreeNode In e.Node.Nodes

                                        array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_response

                                        i = i + 1
                                    Next
                                    i = Nothing

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                    array_str_filepaths = Nothing

                                Case str_port 'port data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False, "")
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(2)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If

                                        'check child child nodes
                                        For Each childchildnode As TreeNode In childnode.Nodes
                                            'find out if only some child nodes are marked
                                            If childchildnode.Checked Then
                                                boolean_at_least_one_is_checked = True
                                            Else
                                                boolean_all_elements_checked = False
                                            End If
                                        Next

                                    Next

                                    'get all child pg names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = childNodeLevel2.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel2.Name
                                                End If
                                            Else
                                                If childNodeLevel2.Checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = childNodeLevel2.Name
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel2.Name
                                                    End If
                                                End If
                                            End If
                                        Next
                                    Next

                                    Select Case e.Node.Name
                                        Case str_mfports

                                            'clear all old data
                                            ReDim array_str_filepaths(4)

                                            'MFPorts IOPS
                                            '-----------
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_iops
                                            'MFPorts Read Transfer
                                            '-----------
                                            'set directory path
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_read_kbps
                                            'MFPorts Write Transfer
                                            '-----------
                                            'set directory path
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_write_kbps
                                            'MFPorts Respone
                                            '-----------
                                            'set directory path
                                            array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_response

                                            'MFPorts Disctime
                                            '-----------
                                            'set directory path
                                            array_str_filepaths(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                              str_export_foldername_mfport & "\" & str_export_filename_mfport_disc_time

                                        Case str_tchurports
                                            '--------------
                                            'Initiator PORT IOPS
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_iops
                                            '--------------
                                            'Initiator PORT Transfer
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_transfer
                                            '--------------
                                            'Initiator PORT Response
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_initiator_ports_response

                                        Case str_openports
                                            '--------------
                                            'PORT IOPS
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_iops
                                            '--------------
                                            'PORT Transfer
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_kbps
                                            '--------------
                                            'PORT Response
                                            '--------------
                                            'set the filepath where you can find all the elements
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_port & "\" & str_export_filename_port_response


                                    End Select

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_port, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_processor 'mp data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If
                                    Next

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700 'VSP data

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = raid700_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & raid700_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid700_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid700_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        End If
                                                    End If
                                                End If
                                            Next

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid800 'VSP G1000 data

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = raid800_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & raid800_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid800_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid800_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        End If
                                                    End If
                                                End If
                                            Next

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_vsp5000 'VSP 5000 data

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = raid900_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & raid900_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid900_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid900_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        End If
                                                    End If
                                                End If
                                            Next

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid750, str_storage_type_hm800 'HUS VM data

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = raid750_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & raid750_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = raid750_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & raid750_mp_get_mp_name_original(e.Node.Name, childnode.Name)
                                                        End If
                                                    End If
                                                End If
                                            Next

                                            Select Case str_storage_system
                                                Case str_storage_type_hm800
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800
                                                Case str_storage_type_raid750
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                            End Select


                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid600 'USPV data

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        If Strings.Len(e.Node.Name) = 2 Then
                                                            'usp-vm
                                                            array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childnode.Name, CChar(","))
                                                        Else
                                                            'usp-v
                                                            array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childnode.Name, CChar(","))
                                                        End If

                                                    Else
                                                        If Strings.Len(e.Node.Name) = 2 Then
                                                            'usp-vm
                                                            array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childnode.Name, CChar(","))
                                                        Else
                                                            'usp-v
                                                            array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childnode.Name, CChar(","))
                                                        End If

                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            If Strings.Len(e.Node.Name) = 2 Then
                                                                'usp-vm
                                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childnode.Name, CChar(","))
                                                            Else
                                                                'usp-v
                                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childnode.Name, CChar(","))
                                                            End If

                                                        Else
                                                            If Strings.Len(e.Node.Name) = 2 Then
                                                                'usp-vm
                                                                array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, childnode.Name, CChar(","))
                                                            Else
                                                                'usp-v
                                                                array_str_elements(0) = array_str_elements(0) & "," & str_get_name_out_of_an_arraylist(arraylist_uspv_chp, childnode.Name, CChar(","))
                                                            End If

                                                        End If
                                                    End If
                                                End If
                                            Next

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                    End Select




                                Case str_paritygroup 'parity group data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If
                                    Next

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = pg_leading_zero_remove(childnode.Name)
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childnode.Name)
                                            End If
                                        Else
                                            If childnode.Checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = pg_leading_zero_remove(childnode.Name)
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childnode.Name)
                                                End If
                                            End If
                                        End If
                                    Next

                                    Select Case str_storage_system
                                        Case str_storage_type_hm800
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg_hm800
                                        Case Else
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phypg & "\" & str_export_filename_phypg
                                    End Select

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_paritygroup, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_ldeveachofcu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    i = 0
                                    'get all child names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                        ReDim Preserve array_str_filepaths(i)
                                        ReDim Preserve array_str_elements(i)

                                        ' PhyLDEV
                                        'ex. PHY_Short_LDEV_3-2.csv
                                        If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv") Then
                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv"

                                            For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                If IsNothing(array_str_elements(i)) Then
                                                    array_str_elements(i) = childNodeLevel2.Name
                                                Else
                                                    array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                                End If

                                            Next
                                            i = i + 1

                                        End If

                                    Next

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    i = 0
                                    'get all child names
                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                        ReDim Preserve array_str_filepaths(i)
                                        ReDim Preserve array_str_elements(i)

                                        ' PhyLDEV
                                        'ex. PHY_Short_LDEV_SI_3-2.csv
                                        If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv") Then
                                            array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv"

                                            For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                If IsNothing(array_str_elements(i)) Then
                                                    array_str_elements(i) = childNodeLevel2.Name
                                                Else
                                                    array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                                End If

                                            Next
                                            i = i + 1

                                        End If

                                    Next

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_cache 'write pending rate data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(1)
                                    ReDim array_str_elements(1)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If
                                    Next

                                    If str_storage_system = str_storage_type_raid600 Then
                                        'RAID600 USP-V

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_phyesw
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycsw & "\" & str_export_filename_cache_usage
                                        array_str_elements(0) = e.Node.Name
                                        array_str_elements(1) = array_str_elements(0)

                                        'collect data and show chart
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    Else
                                        'RAID700 und HUS-VM

                                        ReDim array_str_filepaths(2)
                                        ReDim array_str_elements(2)

                                        'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                        For Each childnode As TreeNode In e.Node.Nodes
                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = childnode.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                                End If
                                            Else
                                                If childnode.Checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = childnode.Name
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                                    End If
                                                End If
                                            End If
                                        Next
                                        array_str_elements(1) = array_str_elements(0)
                                        array_str_elements(2) = array_str_elements(0)

                                        Select Case str_storage_system
                                            Case str_storage_type_raid700
                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & _
                                                          e.Node.Name & ".csv"
                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpb_pattern & _
                                                         e.Node.Name & ".csv"
                                                array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpb_pattern & _
                                                         e.Node.Name & ".csv"
                                                'collect data and show chart
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            Case str_storage_type_raid750
                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_HM700_phesw_write_pending & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                'collect data and show chart
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            Case str_storage_type_raid800
                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & _
                                                          e.Node.Name & ".csv"
                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpb_pattern & _
                                                         e.Node.Name & ".csv"
                                                array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpb_pattern & _
                                                         e.Node.Name & ".csv"
                                                'collect data and show chart
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            Case str_storage_type_hm800
                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_write_pending_hm800 & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_cache_usage_hm800 & _
                                                          str_mpu & e.Node.Name & ".csv"
                                                'collect data and show chart
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            Case str_storage_type_vsp5000
                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_export_filename_start_phympu_write_pending_raid900 &
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_raid900_phympu & "\" & str_phy & str_export_filename_start_phesw_cache_allocation &
                                                          str_mpu & e.Node.Name & ".csv"
                                                array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_raid900_phympu & "\" & str_phy & str_short & str_export_filename_start_phympu_cache_usage_raid900 &
                                                          str_mpu & e.Node.Name & ".csv"
                                                'collect data and show chart
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        End Select
                                    End If

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_backend, str_backend_hm700

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 3 and 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False


                                    Select Case str_storage_system
                                        Case str_storage_type_raid700

                                            'find out if only some child nodes are marked
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                    'find out if only some child nodes are marked
                                                    If childNodeLevel2.Checked Then
                                                        boolean_at_least_one_is_checked = True
                                                    Else
                                                        boolean_all_elements_checked = False
                                                    End If

                                                Next
                                            Next

                                            Select Case e.Node.Name
                                                Case str_backend_cha_esw

                                                    '"CHA-1EU.ESW-1SA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "CHA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "CHA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_cha

                                                Case str_backend_dka_esw
                                                    '"DKA-1AU.ESW-1SA"

                                                    'get all child pg names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "DKA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "DKA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_dka

                                                Case str_backend_esw_cache
                                                    '"ESW-1SA.CACHE-1CA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "ESW-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "ESW-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "ESW-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "ESW-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_cache

                                                Case str_backend_mppcb_esw
                                                    '"MPB-1MA.ESW-1SA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "MPB-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "MPB-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Name & ".ESW-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_mppcb

                                            End Select

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        Case str_storage_type_raid750

                                            'find out if only some child nodes are marked
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                'find out if only some child nodes are marked
                                                If childNodeLevel1.Checked Then
                                                    boolean_at_least_one_is_checked = True
                                                Else
                                                    boolean_all_elements_checked = False
                                                End If

                                            Next

                                            'get all child names
                                            For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = childNodeLevel1.Name
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel1.Name
                                                    End If
                                                Else
                                                    If childNodeLevel1.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = childNodeLevel1.Name
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel1.Name
                                                        End If
                                                    End If
                                                End If

                                            Next

                                            Select Case e.Node.Name
                                                Case str_backend_hm700_bepk_mainkp
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_bepk
                                                Case str_backend_hm700_cache_mainpk
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_cache
                                                Case str_backend_hm700_fepk_mainpk
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_fepk
                                            End Select

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        Case str_storage_type_raid800

                                            Select Case e.Node.Name
                                                Case str_raid800_backend_cha_cmpk

                                                    'find out if only some child nodes are marked
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            'find out if only some child nodes are marked
                                                            If childNodeLevel2.Checked Then
                                                                boolean_at_least_one_is_checked = True
                                                            Else
                                                                boolean_all_elements_checked = False
                                                            End If

                                                        Next
                                                    Next

                                                    '"CHA-1PC.CACHE-1CA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "CHA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "CHA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cha

                                                Case str_raid800_backend_dka_cmpk
                                                    '"DKA-1PA.CACHE-1CA"

                                                    'find out if only some child nodes are marked
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            'find out if only some child nodes are marked
                                                            If childNodeLevel2.Checked Then
                                                                boolean_at_least_one_is_checked = True
                                                            Else
                                                                boolean_all_elements_checked = False
                                                            End If

                                                        Next
                                                    Next

                                                    'get all child pg names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "DKA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "DKA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_dka

                                                Case str_raid800_backend_cmpk_cache
                                                    '"CACHE-1CA"

                                                    'find out if only some child nodes are marked
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        'find out if only some child nodes are marked
                                                        If childNodeLevel1.Checked Then
                                                            boolean_at_least_one_is_checked = True
                                                        Else
                                                            boolean_all_elements_checked = False
                                                        End If

                                                    Next

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        If childNodeLevel1.Checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "CACHE-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "CACHE-" & childNodeLevel1.Name
                                                            End If
                                                        End If
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cache

                                                Case str_raid800_backend_mppcb_cmpk
                                                    '"MPB-1MA.CACHE-1CA"

                                                    'find out if only some child nodes are marked
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            'find out if only some child nodes are marked
                                                            If childNodeLevel2.Checked Then
                                                                boolean_at_least_one_is_checked = True
                                                            Else
                                                                boolean_all_elements_checked = False
                                                            End If

                                                        Next
                                                    Next

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes

                                                            If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "MPB-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                End If
                                                            Else
                                                                If childNodeLevel2.Checked Then
                                                                    If IsNothing(array_str_elements(0)) Then
                                                                        array_str_elements(0) = "MPB-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    Else
                                                                        array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Name & ".CACHE-" & childNodeLevel2.Name
                                                                    End If
                                                                End If
                                                            End If

                                                        Next
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_mppcb

                                            End Select

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        Case str_storage_type_vsp5000
                                            Select Case e.Node.Name

                                                Case str_raid900_backend_hie
                                                    'MPU-010.HIE-01G, HIE-01G.ISW01
                                                    'MPU-010.HIE-01G, HIE-01G.ISW01
                                                    'clear all old data
                                                    ReDim array_str_elements(1)
                                                    ReDim array_str_filepaths(1)

                                                    'find out if only some child nodes are marked
                                                    boolean_at_least_one_is_checked = False
                                                    boolean_all_elements_checked = True
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        'find out if only some child nodes are marked
                                                        If childNodeLevel1.Checked Then
                                                            boolean_at_least_one_is_checked = True
                                                        Else
                                                            boolean_all_elements_checked = False
                                                        End If
                                                    Next

                                                    'get all mp child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                                        If boolean_all_elements_checked Or boolean_at_least_one_is_checked Then
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = childNodeLevel1.Name.Split(CType(";", Char()))(0)
                                                                    array_str_elements(1) = childNodeLevel1.Name.Split(CType(";", Char()))(1)
                                                                Else
                                                                    array_str_elements(0) &= "," & childNodeLevel1.Name.Split(CType(";", Char()))(0)
                                                                    array_str_elements(1) &= "," & childNodeLevel1.Name.Split(CType(";", Char()))(1)
                                                                End If
                                                            End If
                                                        Else
                                                            'nothing selected means take all elements
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = childNodeLevel1.Name.Split(CType(";", Char()))(0)
                                                                array_str_elements(1) = childNodeLevel1.Name.Split(CType(";", Char()))(1)
                                                            Else
                                                                array_str_elements(0) &= "," & childNodeLevel1.Name.Split(CType(";", Char()))(0)
                                                                array_str_elements(1) &= "," & childNodeLevel1.Name.Split(CType(";", Char()))(1)
                                                            End If
                                                        End If
                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_export_filename_vsp5000_backend_mpu
                                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_export_filename_vsp5000_backend_hie


                                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_vsp5000, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                            End Select
                                    End Select

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing


                                Case str_truecopy

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 3 and 1 row (loose all old data)
                                    ReDim array_str_filepaths(2)
                                    ReDim array_str_elements(0)

                                    'remote io

                                    Select Case e.Node.Name

                                        Case str_truecopy_chart_name_remoteio 'remote response
                                            'get the performance data 
                                            ' "All RIO,All Write,Initial Copy RIO,Update Copy RIO"
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy
                                            array_str_elements(0) = str_truecopy_chart_name_remoteio

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_truecopy, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        Case str_truecopy_chart_name_remotetransfer 'remote transfer
                                            ' "Initial Copy Transfer(KB/s),Update Copy Transfer(KB/s)"
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy
                                            array_str_elements(0) = str_truecopy_chart_name_remotetransfer
                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_truecopy, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        Case str_truecopy_chart_name_remoteresponse 'remote response time
                                            ' "Initial Copy Response(ms),Update Copy Response(ms)"
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy
                                            array_str_elements(0) = str_truecopy_chart_name_remoteresponse
                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_truecopy, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        Case str_truecopy_chart_name_remoteoutofsync 'remote out of sync tracks
                                            ' "Out of Sync Tracks"
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy
                                            array_str_elements(0) = str_truecopy_chart_name_remoteoutofsync
                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_truecopy, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                        Case str_truecopy_chart_name_remotesynchronized 'remote pair synchronized
                                            ' "Pair Synchronized(%)"
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_remotecopy & "\" & str_export_filename_remotecopy
                                            array_str_elements(0) = str_truecopy_chart_name_remotesynchronized
                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_truecopy, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")


                                    End Select

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_hur

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 and 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    'remote io
                                    Select Case e.Node.Name

                                        Case str_hur_chart_name_jnl_initial_copy_transfer
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_initial_copy_transfer

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_initial_copy_transfer), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_write_transfer
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_write_transfer

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_write_transfer), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_m_usedrate 'm jnl usage rate
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_usedrate

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_usedrate), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_m_rio 'm jnl rio
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_rio

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_rio), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_m_transfer 'm jnl transfer
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_transfer

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_transfer), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")


                                        Case str_hur_chart_name_jnl_m_response 'm jnl response
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_response

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_m_response), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_r_usedrate 'r jnl usage rate
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_usedrate

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_usedrate), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_r_rio 'r jnl rio
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_rio

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_rio), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_hur_chart_name_jnl_r_transfer 'r jnl transfer
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_transfer

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_transfer), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")


                                        Case str_hur_chart_name_jnl_r_response 'm jnl response
                                            'get the performance data 
                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_response

                                            For Each str_element As String In Split(str_raid_performance_data_create_elements(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_hurjnl & "\" & str_export_filename_hurjnl_r_response), ",")
                                                If Not str_element = Chr(34) & "No." & Chr(34) And Not str_element = Chr(34) & "time" & Chr(34) Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = str_element.Replace(Chr(34), "")
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & str_element.Replace(Chr(34), "")
                                                    End If


                                                End If
                                            Next

                                            'collect data and show chart
                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_hur, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    End Select

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case Else

                            End Select

                        Case str_storage_type_df800
                            'case 1

                            'what type of data is it
                            Select Case e.Node.Parent.Name

                                Case str_df_name_cache

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)
                                    str_collection_of_descriptors(0) = e.Node.Name

                                    'get the performance data 
                                    '"CTL0-Partition0"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_cache & "\" & str_df_filename_cache_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Write Pending Rate " & e.Node.Name & "", e.Node.FullPath, 100, 1, "Cache Write Pending Rate [%]", e.Node.Name & " W'Pending Rate", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_processor

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)
                                    str_collection_of_descriptors(0) = e.Node.Name

                                    'get the performance data 
                                    '"CTL0-CoreX"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_processor & "\" & str_df_filename_cpu_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Parent.Name & " " & e.Node.Name & " busy", e.Node.FullPath, 100, 1, "CPU Busy [%]", e.Node.Name & " CPU Busy", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_port

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    str_collection_of_descriptors = Nothing
                                    'extend the array by one
                                    ReDim Preserve str_collection_of_descriptors(0)

                                    'collect all child nodes and put it into the string str_collection_of_ports (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        If IsNothing(str_collection_of_descriptors(0)) Then
                                            str_collection_of_descriptors(0) = childnode.Name
                                        Else
                                            str_collection_of_descriptors(0) = str_collection_of_descriptors(0) & "," & childnode.Name
                                        End If
                                    Next

                                    'get the performance data 
                                    '"CTL1-A"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                       str_df_name_port & "\" & str_df_filename_port_iops_descriptor, str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Port IOPS", e.Node.Name, 0, 1, "Port IOPS [IO/s]", "Port IOPS", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                    'Port Transfer
                                    'get the performance data 
                                    '"CTL1-A"
                                    str_performance_data_array = raid_performance_data_put_in_array(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & _
                                                      str_df_filename_port_transfer_descriptor, _
                                                      str_collection_of_descriptors(0), "", 0, 100)
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart("Port Transfer " & e.Node.Name & "", _
                                                      e.Node.FullPath, 0, 1, "Port Transfer [MB/s]", e.Node.Name & " Port Transfer", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                Case str_df_name_drive_operate

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'create an an array with one element
                                    ReDim array_str_elements(0)
                                    ReDim array_str_filepaths(0)

                                    'collect all child nodes and put it into the string str_collection_of_ports (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        If IsNothing(array_str_elements(0)) Then
                                            'No.,"time",CTL0-Unit00-HDU00,CTL0-Unit00-HDU01,CTL0-Unit00-HDU02,CTL0-Unit00-HDU03,CTL0-Unit00-HDU04,CTL0-Unit00-HDU05
                                            array_str_elements(0) = "CTL0-" & e.Node.Name & "-" & childnode.Name & ",CTL1-" & e.Node.Name & "-" & childnode.Name
                                        Else
                                            array_str_elements(0) = array_str_elements(0) & "," & "CTL0-" & e.Node.Name & "-" & childnode.Name & ",CTL1-" & e.Node.Name & "-" & childnode.Name
                                        End If
                                    Next

                                    'HDD operating rate
                                    '------------------------------------------

                                    'HDD operating rate
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_driveoperate_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing

                                    'HDD tag count
                                    '------------------------------------------
                                    'create an an array with one element
                                    ReDim array_str_filepaths(0)

                                    'HDD tag count
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_drive_tag_count_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                            End Select

                        Case Else


                    End Select
                    ' case 1 end *******************************************************
#End Region
                Case 2
#Region "Case2"

                    ' case 2 start *******************************************************
                    Select Case str_storage_system
                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid600, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000
                            'what typ of data is it
                            Select Case e.Node.Parent.Parent.Name
                                Case str_processor 'mp data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700 'VSP data

                                            ' is there mppk data available
                                            If InStr(str_performance_data_available, str_performance_data_available_mppk, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                                'mp and mppk data is available

                                                'mp
                                                ReDim array_str_filepaths(0)
                                                ReDim array_str_elements(0)

                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                'get the mp naming out of the treeview -> "MPB-1MA.MP00-1MA"
                                                array_str_elements(0) = raid700_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                                array_str_filepaths = Nothing
                                                array_str_elements = Nothing


                                                'mppk
                                                Dim array_top_ldev As Array = Nothing
                                                ReDim array_str_filepaths(1)
                                                ReDim array_str_elements(0)

                                                Dim directory_mppk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk)
                                                Dim files_of_directory_mppk As IO.FileInfo() = directory_mppk.GetFiles("*.csv")
                                                Dim file As IO.FileInfo

                                                For Each file In files_of_directory_mppk


                                                    If Strings.InStr(file.Name, e.Node.Name) <> 0 Then

                                                        'put array into comma separated string
                                                        array_top_ldev = array_raid_performance_data_put_in_array_mppk_topx(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk & "\" & file.Name, date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.SelectedItem))
                                                        For int_item_index As Integer = 0 To UBound(array_top_ldev, 1) Step 1
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = array_top_ldev.GetValue(int_item_index, 0).ToString
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & array_top_ldev.GetValue(int_item_index, 0).ToString
                                                            End If
                                                        Next

                                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk & "\" & file.Name
                                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                                    End If
                                                Next

                                            Else
                                                'only mp data is available

                                                'set array to 1 row (loose all old data)
                                                ReDim array_str_filepaths(0)
                                                ReDim array_str_elements(0)

                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                                'get the parameter name out of the filename "PHY_MPPK_MPB-1MA.MP00-1MA.csv -> MPB-1MA.MP00-1MA"
                                                array_str_elements(0) = raid700_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)

                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                                array_str_filepaths = Nothing
                                                array_str_elements = Nothing

                                            End If

                                        Case str_storage_type_raid800 'VSP G1000 data

                                            ' is there mppk data available
                                            If InStr(str_performance_data_available, str_performance_data_available_mppk, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                                                'mp
                                                ReDim array_str_filepaths(0)
                                                ReDim array_str_elements(0)

                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                'get the mp naming out of the treeview -> "MPB-1MA.MP00-1MA"
                                                array_str_elements(0) = raid800_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)
                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                                array_str_filepaths = Nothing
                                                array_str_elements = Nothing


                                                'mppk
                                                Dim array_top_ldev As Array = Nothing
                                                ReDim array_str_filepaths(1)
                                                ReDim array_str_elements(0)

                                                Dim directory_mppk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk)
                                                Dim files_of_directory_mppk As IO.FileInfo() = directory_mppk.GetFiles("*.csv")
                                                Dim file As IO.FileInfo

                                                For Each file In files_of_directory_mppk


                                                    If Strings.InStr(file.Name, e.Node.Parent.Name & "." & e.Node.Name) <> 0 Then

                                                        'mppk element data

                                                        'put array into comma separated string
                                                        array_top_ldev = array_raid_performance_data_put_in_array_mppk_topx(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk & "\" & file.Name, date_datetimepicker_start_selected, date_datetimepicker_end_selected, CInt(ToolStripComboBox_topx_value.SelectedItem))
                                                        For int_item_index As Integer = 0 To UBound(array_top_ldev, 1) Step 1

                                                            'if the elements in the mppk are only -1 (means no information) then we skip it
                                                            If Not CStr(array_top_ldev.GetValue(int_item_index, 0)) = "-1" And Not IsNothing(array_top_ldev.GetValue(int_item_index, 0)) Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = array_top_ldev.GetValue(int_item_index, 0).ToString
                                                                Else
                                                                    'if there are not 20 items
                                                                    If Not IsNothing(array_top_ldev.GetValue(int_item_index, 0)) Then
                                                                        array_str_elements(0) = array_str_elements(0) & "," & array_top_ldev.GetValue(int_item_index, 0).ToString
                                                                    End If
                                                                End If
                                                            End If

                                                        Next

                                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk & "\" & file.Name
                                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                        'only show the graph if there are elements to show
                                                        If Not IsNothing(array_str_elements(0)) Then
                                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")
                                                        End If

                                                    End If
                                                Next

                                            Else
                                                'only mp data is available

                                                'set array to 1 row (loose all old data)
                                                ReDim array_str_filepaths(0)
                                                ReDim array_str_elements(0)

                                                array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                                'get the parameter name out of the filename "PHY_MPPK_MPB-1MA.MP00-1MA.csv -> MPB-1MA.MP00-1MA"
                                                array_str_elements(0) = raid800_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)

                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                                array_str_filepaths = Nothing
                                                array_str_elements = Nothing

                                            End If

                                        Case str_storage_type_vsp5000 'VSP 5x00 data

                                            'set array to 1 row (loose all old data)
                                            ReDim array_str_filepaths(0)
                                            ReDim array_str_elements(0)

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp

                                            'get the parameter name out of the filename "MPU-010.MP010-00"
                                            array_str_elements(0) = raid900_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case str_storage_type_raid750, str_storage_type_hm800 'HUS V data

                                            ' is there mppk data available
                                            If InStr(str_performance_data_available, str_performance_data_available_mppk, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                                'mp and mppk data is available

                                                Dim directory_mppk As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                                                           str_export_foldername_mppk)
                                                Dim files_of_directory_mppk As IO.FileInfo() = directory_mppk.GetFiles("*.csv")
                                                Dim file As IO.FileInfo

                                                For Each file In files_of_directory_mppk
                                                    If Strings.Mid(file.Name, 10, file.Name.Length - 13) = raid750_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name) Then

                                                        'set array to 2 rows and 1 row (loose all old data)
                                                        ReDim array_str_filepaths(1)
                                                        ReDim array_str_elements(0)

                                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mppk & "\" & file.Name

                                                        Select Case str_storage_system
                                                            Case str_storage_type_raid750
                                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                            Case str_storage_type_hm800
                                                                array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800
                                                        End Select

                                                        'get the parameter name out of the filename "PHY_MPPK_MPB-1MA.MP00-1MA.csv -> MPB-1MA.MP00-1MA"
                                                        array_str_elements(0) = Strings.Mid(file.Name, 10, file.Name.Length - 13)

                                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                                        array_str_filepaths = Nothing
                                                        array_str_elements = Nothing

                                                        Exit For
                                                    End If
                                                Next
                                            Else
                                                'only mp data is available

                                                'set array to 1 row (loose all old data)
                                                ReDim array_str_filepaths(0)
                                                ReDim array_str_elements(0)

                                                Select Case str_storage_system
                                                    Case str_storage_type_hm800
                                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_phyproc_hm800
                                                    Case str_storage_type_raid750
                                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_mp
                                                End Select

                                                'get the parameter name out of the filename "PHY_MPPK_MPB-1MA.MP00-1MA.csv -> MPB-1MA.MP00-1MA"
                                                array_str_elements(0) = raid750_mp_get_mp_name_original(e.Node.Parent.Name, e.Node.Name)

                                                Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                                array_str_filepaths = Nothing
                                                array_str_elements = Nothing

                                            End If

                                        Case str_storage_type_raid600 'uspv data

                                            'set array to 1 row (loose all old data)
                                            ReDim array_str_filepaths(0)
                                            ReDim array_str_elements(0)

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_mp & "\" & str_export_filename_chp
                                            If Strings.Len(CStr(e.Node.Parent.Name)) = 2 Then
                                                'usp-vm
                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspvm_chp, CStr(e.Node.Name), CChar(","))
                                            Else
                                                'usp-v
                                                array_str_elements(0) = str_get_name_out_of_an_arraylist(arraylist_uspv_chp, CStr(e.Node.Name), CChar(","))
                                            End If

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_processor, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                            array_str_filepaths = Nothing
                                            array_str_elements = Nothing

                                        Case Else
                                    End Select

                                Case str_paritygroup

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'set array to 1 row (loose all old data)
                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    '------------------------
                                    ' PhyPG
                                    Select Case str_storage_system
                                        Case str_storage_type_hm800
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phypg & "\" & str_export_filename_phypg_hm800
                                        Case Else
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phypg & "\" & str_export_filename_phypg
                                    End Select

                                    array_str_elements(0) = pg_leading_zero_remove(e.Node.Name)

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_paritygroup, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_ldeveachofcu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    array_str_elements = Nothing
                                    ReDim array_str_elements(3)

                                    '00:00:00X(X2304-1)
                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = e.Node.Name
                                    array_str_elements(2) = e.Node.Name
                                    array_str_elements(3) = e.Node.Name

                                    '------------------------------------------
                                    'IOPS
                                    '------------------------------------------

                                    array_str_filepaths = Nothing
                                    ReDim array_str_filepaths(3)

                                    'LDEV_IOPS00.csv
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_read_rand & "\" & str_export_filename_ldeveachofcu_iops_read_rand & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_read_seq & "\" & str_export_filename_ldeveachofcu_iops_read_seq & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_write_rand & "\" & str_export_filename_ldeveachofcu_iops_write_rand & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops_write_seq & "\" & str_export_filename_ldeveachofcu_iops_write_seq & e.Node.Parent.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea;stackedarea;stackedarea")

                                    '------------------------------------------
                                    'TRANSFER
                                    '------------------------------------------

                                    array_str_elements = Nothing
                                    ReDim array_str_elements(1)

                                    '00:00:00X(X2304-1)
                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = e.Node.Name

                                    array_str_filepaths = Nothing
                                    ReDim array_str_filepaths(1)

                                    'LDEV_TRANSRATE00.csv
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate_read & "\" & str_export_filename_ldeveachofcu_transrate_read & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate_write & "\" & str_export_filename_ldeveachofcu_transrate_write & e.Node.Parent.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea")

                                    '------------------------------------------
                                    'RESPONSE
                                    '------------------------------------------

                                    array_str_elements = Nothing
                                    ReDim array_str_elements(1)

                                    '00:00:00X(X2304-1)
                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = e.Node.Name

                                    array_str_filepaths = Nothing
                                    ReDim array_str_filepaths(1)

                                    'LDEV_TRANSRATE00.csv
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_response_read & "\" & str_export_filename_ldeveachofcu_response_read & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_response_write & "\" & str_export_filename_ldeveachofcu_response_write & e.Node.Parent.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    '------------------------------------------
                                    'blocksize
                                    '------------------------------------------

                                    array_str_elements = Nothing
                                    ReDim array_str_elements(1)

                                    '00:00:00X(X2304-1)
                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = e.Node.Name

                                    array_str_filepaths = Nothing
                                    ReDim array_str_filepaths(1)

                                    'LDEV_TRANSRATE00.csv
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_transrate & "\" & str_export_filename_ldeveachofcu_transrate & e.Node.Parent.Name & ".csv"
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_ldeveachofcu & "\" & str_export_filename_ldeveachofcu_iops & "\" & str_export_filename_ldeveachofcu_iops & e.Node.Parent.Name & ".csv"

                                    'create graphs
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    ''-----------------------
                                    ''checkboxes
                                    ''hide
                                    'checkbox_extra_options(False, False)
                                    ''unhide
                                    'checkbox_scalabiliy_enable(False)
                                    ''-----------------------

                                    ''delete all previously created graphs
                                    'Call delete_tabpages_and_carts()

                                    'array_str_filepaths = Nothing
                                    'array_str_elements = Nothing

                                    'i = 0

                                    ''get all child names
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                    '    ReDim Preserve array_str_filepaths(i)
                                    '    ReDim Preserve array_str_elements(i)

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                                    '        If IsNothing(array_str_elements(i)) Then
                                    '            array_str_elements(i) = childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                    '        End If

                                    '    Next

                                    '    'ex. PHY_Short_LDEV_3-2.csv
                                    '    array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv"
                                    '    i = i + 1
                                    'Next

                                    ''create graphs
                                    'Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_phyldev, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'array_str_filepaths = Nothing
                                    'array_str_elements = Nothing

                                    'i = 0

                                    ''get all child names
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes
                                    '    ReDim Preserve array_str_filepaths(i)
                                    '    ReDim Preserve array_str_elements(i)

                                    '    For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                                    '        If IsNothing(array_str_elements(i)) Then
                                    '            array_str_elements(i) = childNodeLevel2.Name
                                    '        Else
                                    '            array_str_elements(i) = array_str_elements(i) & "," & childNodeLevel2.Name
                                    '        End If

                                    '    Next

                                    '    'ex. PHY_Short_LDEV_SI_3-2.csv
                                    '    array_str_filepaths(i) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '              str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(childNodeLevel1.Name) & ".csv"
                                    '    i = i + 1
                                    'Next

                                    ''create graphs
                                    'Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_phyldev, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                Case str_cache

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    ReDim array_str_elements(2)
                                    ReDim array_str_filepaths(2)

                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = array_str_elements(0)
                                    array_str_elements(2) = array_str_elements(0)

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpb_pattern & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phyesw & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpb_pattern & e.Node.Parent.Name & ".csv"

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_storage_type_raid750
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_HM700_phesw_write_pending & str_mpu & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpu & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM700_phyesw & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpu & e.Node.Parent.Name & ".csv"

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_storage_type_hm800
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_write_pending_hm800 & str_mpu & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpu & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_phy & str_export_filename_start_phympu_cache_usage_hm800 & str_mpu & e.Node.Parent.Name & ".csv"

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_storage_type_raid800
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpb_pattern & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpb_pattern & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_phycmpk & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpb_pattern & e.Node.Parent.Name & ".csv"

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                        Case str_storage_type_vsp5000
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_export_filename_start_phesw_write_pending & str_mpu_pattern_raid900 & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_export_filename_start_phesw_cache_allocation & str_mpu_pattern_raid900 & e.Node.Parent.Name & ".csv"
                                            array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_raid900_phympu & "\" & str_phy & str_export_filename_start_phyesw_cache_usage & str_mpu_pattern_raid900 & e.Node.Parent.Name & ".csv"

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_cache, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")


                                    End Select

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_port 'port group data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False, "")
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'set array to 3 and 1 row (loose all old data)
                                    ReDim array_str_filepaths(2)
                                    ReDim array_str_elements(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes

                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If

                                    Next

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = childnode.Name
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                            End If
                                        Else
                                            If childnode.Checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = childnode.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & childnode.Name
                                                End If
                                            End If
                                        End If
                                    Next


                                    If InStr(e.Node.FullPath, str_mfports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'clear all old data
                                        ReDim array_str_filepaths(4)

                                        'MFPorts IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_iops
                                        'MFPorts Read Transfer
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_read_kbps
                                        'MFPorts Write Transfer
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_write_kbps
                                        'MFPorts Respone
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_response
                                        'MFPorts Disctime
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_disc_time

                                    End If

                                    If InStr(e.Node.FullPath, str_openports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'Ports IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_iops

                                        'Ports Transfer
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_kbps

                                        'Ports Response
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_response
                                    End If

                                    If InStr(e.Node.FullPath, str_tchurports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'Ports IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_iops

                                        'Ports Transfer
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_transfer

                                        'Ports Response
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_response
                                    End If

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_port, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_lu

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    ReDim array_str_elements(0)
                                    ReDim array_str_filepaths(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        If e.Node.Checked Then
                                            boolean_all_elements_checked = True
                                        Else
                                            If childnode.Checked Then
                                                'child node is checked
                                                boolean_at_least_one_is_checked = True
                                            Else
                                                'defenetly not all child nodes are checked
                                                boolean_all_elements_checked = False
                                            End If
                                        End If
                                    Next

                                    'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'if all childnodes are checked or none then take all elements
                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                            'take all elements
                                            If IsNothing(array_str_elements(0)) Then
                                                array_str_elements(0) = e.Node.Parent.Name & "." & e.Node.Name & "." & childnode.Name
                                            Else
                                                array_str_elements(0) = array_str_elements(0) & "," & e.Node.Parent.Name & "." & e.Node.Name & "." & childnode.Name
                                            End If
                                        Else
                                            'take only the ones that are checked
                                            If childnode.Checked Then
                                                If IsNothing(array_str_elements(0)) Then
                                                    array_str_elements(0) = e.Node.Parent.Name & "." & e.Node.Name & "." & childnode.Name
                                                Else
                                                    array_str_elements(0) = array_str_elements(0) & "," & e.Node.Parent.Name & "." & e.Node.Name & "." & childnode.Name
                                                End If
                                            End If
                                        End If
                                    Next

                                    'if all childnodes are checked or none then take all elements
                                    If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                        'all elements are marked or nothing is marked (take all)

                                        '-----------------------
                                        'checkboxes
                                        'unhide
                                        checkbox_extra_options(True, False, "by line view")
                                        'hide
                                        checkbox_scalabiliy_enable(False)
                                        '-----------------------

                                        'extend array to 4 elements
                                        ReDim Preserve array_str_elements(3)
                                        ReDim array_str_filepaths(3)

                                        'elements
                                        array_str_elements(1) = array_str_elements(0)
                                        array_str_elements(2) = array_str_elements(0)
                                        array_str_elements(3) = array_str_elements(0)

                                        '-------------------------------------------
                                        'LU IOPS
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea;stackedarea;stackedarea")

                                        '-------------------------------------------
                                        'LU Transfer
                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(1)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        temp = Nothing

                                        'filepaths
                                        ReDim array_str_filepaths(1)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_kbps_write
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_kbps_read

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea")

                                        '-------------------------------------------
                                        'LU Response
                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(1)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        temp = Nothing

                                        'filepaths
                                        ReDim array_str_filepaths(1)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_response_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                         str_export_foldername_lu & "\" & str_export_filename_lu_response_write

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline;fastline")

                                        '-------------------------------------------
                                        'LU Blocksize
                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(1)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        temp = Nothing

                                        'filepaths
                                        ReDim array_str_filepaths(1)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU read/write ratio
                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(3)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        array_str_elements(2) = temp
                                        array_str_elements(3) = temp
                                        temp = Nothing

                                        'filepaths
                                        ReDim array_str_filepaths(3)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU HIT rates

                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(3)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        array_str_elements(2) = temp
                                        array_str_elements(3) = temp
                                        temp = Nothing

                                        'filepaths
                                        array_str_filepaths = Nothing
                                        ReDim array_str_filepaths(3)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_read
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_write
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_write

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                        array_str_filepaths = Nothing

                                    Else
                                        'only some elements are marked

                                        '-----------------------
                                        'checkboxes
                                        'unhide
                                        checkbox_extra_options(False, False)
                                        'hide
                                        checkbox_scalabiliy_enable(False)
                                        '-----------------------

                                        '-------------------------------------------
                                        'LU IOPS
                                        array_str_filepaths(0) = Nothing
                                        ReDim array_str_filepaths(0)

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops
                                        'create graph
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU Transfer
                                        array_str_filepaths(0) = Nothing
                                        ReDim array_str_filepaths(0)

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                            str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                                        'create graph
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU Response
                                        array_str_filepaths(0) = Nothing
                                        ReDim array_str_filepaths(0)

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                        str_export_foldername_lu & "\" & str_export_filename_lu_response
                                        'create graph
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU block size
                                        array_str_filepaths(0) = Nothing
                                        ReDim array_str_filepaths(1)

                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(1)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp

                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                        str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                        str_export_foldername_lu & "\" & str_export_filename_lu_iops
                                        'create graph
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                                        '-------------------------------------------
                                        'LU read/write ratio
                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(3)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        array_str_elements(2) = temp
                                        array_str_elements(3) = temp
                                        temp = Nothing

                                        'filepaths
                                        ReDim array_str_filepaths(3)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write

                                        'optional parameter set that only a few checkboxes are checked
                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline", , True)

                                        '-------------------------------------------
                                        'LU HIT rates

                                        array_str_filepaths(0) = Nothing
                                        ReDim array_str_filepaths(3)

                                        'elements
                                        temp = array_str_elements(0)
                                        array_str_elements = Nothing
                                        ReDim array_str_elements(3)
                                        array_str_elements(0) = temp
                                        array_str_elements(1) = temp
                                        array_str_elements(2) = temp
                                        array_str_elements(3) = temp
                                        temp = Nothing

                                        'filepaths
                                        array_str_filepaths = Nothing
                                        ReDim array_str_filepaths(3)
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_read
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_read
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_write
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_write

                                        Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                        array_str_filepaths = Nothing

                                    End If

                                    '-------------------------------------------
                                    'LU cummulated service time

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_backend, str_backend_hm700

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    ReDim array_str_elements(0)
                                    ReDim array_str_filepaths(0)

                                    'are all childnodes checked?
                                    boolean_all_elements_checked = True
                                    boolean_at_least_one_is_checked = False

                                    'find out if only some child nodes are marked
                                    For Each childnode As TreeNode In e.Node.Nodes
                                        'find out if only some child nodes are marked
                                        If childnode.Checked Then
                                            boolean_at_least_one_is_checked = True
                                        Else
                                            boolean_all_elements_checked = False
                                        End If
                                    Next

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700

                                            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
                                            For Each childnode As TreeNode In e.Node.Nodes
                                                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                    If IsNothing(array_str_elements(0)) Then
                                                        array_str_elements(0) = pg_leading_zero_remove(childnode.Name)
                                                    Else
                                                        array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childnode.Name)
                                                    End If
                                                Else
                                                    If childnode.Checked Then
                                                        If IsNothing(array_str_elements(0)) Then
                                                            array_str_elements(0) = pg_leading_zero_remove(childnode.Name)
                                                        Else
                                                            array_str_elements(0) = array_str_elements(0) & "," & pg_leading_zero_remove(childnode.Name)
                                                        End If
                                                    End If
                                                End If
                                            Next

                                            Select Case e.Node.Parent.Name
                                                Case str_backend_cha_esw
                                                    '"CHA-1EU.ESW-1SA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "CHA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "CHA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_cha

                                                Case str_backend_dka_esw
                                                    '"DKA-1AU.ESW-1SA"

                                                    'get all child pg names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "DKA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "DKA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_dka

                                                Case str_backend_esw_cache
                                                    '"ESW-1SA.CACHE-1CA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "ESW-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "ESW-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "ESW-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "ESW-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_cache

                                                Case str_backend_mppcb_esw
                                                    '"MPB-1MA.ESW-1SA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "MPB-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "MPB-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Parent.Name & ".ESW-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_mppcb

                                            End Select

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                        Case str_storage_type_raid750

                                            'selected element
                                            array_str_elements(0) = e.Node.Name

                                            Select Case e.Node.Parent.Name
                                                Case str_backend_hm700_bepk_mainkp
                                                    'PHY_Short_BEPK_MainPK.csv
                                                    'No.,"time","DKB-1E.MAIN1","DKB-1F.MAIN1","DKB-2E.MAIN2","DKB-2F.MAIN2"
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_bepk
                                                Case str_backend_hm700_cache_mainpk
                                                    'PHY_Short_Cache_MainPK.csv
                                                    'No.,"time","MAIN1","MAIN2"
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_cache
                                                Case str_backend_hm700_fepk_mainpk
                                                    'PHY_Short_FEPK_MainPK.csv
                                                    'No.,"time","CHB-1A.MAIN1","CHB-1B.MAIN1","CHB-2A.MAIN2","CHB-2B.MAIN2"
                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_HM700_phyesw & "\" & str_export_filename_backend_hm700_fepk

                                            End Select

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid750, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        Case str_storage_type_raid800
                                            Select Case e.Node.Parent.Name
                                                Case str_raid800_backend_cha_cmpk
                                                    '"CHA-1PC.CACHE-1CA"

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "CHA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "CHA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "CHA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cha

                                                Case str_raid800_backend_dka_cmpk
                                                    '"DKA-1PA.CACHE-1CA"

                                                    'get all child pg names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "DKA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "DKA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "DKA-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_dka

                                                Case str_raid800_backend_cmpk_cache
                                                    '"CACHE-1CA"

                                                    array_str_elements(0) = "CACHE-" & e.Node.Name

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cache

                                                Case str_raid800_backend_mppcb_cmpk
                                                    '"MPB-1MA.CACHE-1CA

                                                    'get all child names
                                                    For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                                        If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                                                            If IsNothing(array_str_elements(0)) Then
                                                                array_str_elements(0) = "MPB-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            Else
                                                                array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                            End If
                                                        Else
                                                            If childNodeLevel1.Checked Then
                                                                If IsNothing(array_str_elements(0)) Then
                                                                    array_str_elements(0) = "MPB-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                Else
                                                                    array_str_elements(0) = array_str_elements(0) & "," & "MPB-" & childNodeLevel1.Parent.Name & ".CACHE-" & childNodeLevel1.Name
                                                                End If
                                                            End If
                                                        End If

                                                    Next

                                                    'set directory path
                                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_mppcb


                                            End Select

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        Case str_storage_type_vsp5000
                                            'MPU-010.HIE-01G, HIE-01G.ISW01
                                            'clear all old data
                                            ReDim array_str_elements(1)
                                            ReDim array_str_filepaths(1)

                                            'HIE-01G.ISW01, HIE-1G.ISW02
                                            array_str_elements(0) = e.Node.Name.Split(CType(";", Char()))(0)
                                            array_str_elements(1) = e.Node.Name.Split(CType(";", Char()))(1)

                                            'set directory path
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_export_filename_vsp5000_backend_mpu
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_HM800_phympu & "\" & str_export_filename_vsp5000_backend_hie


                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_vsp5000, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    End Select

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case Else
                            End Select
                        Case str_storage_type_df800
                            'case 2

                            'what type of data is it
                            Select Case e.Node.Parent.Parent.Name

                                Case str_df_name_port

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    Dim str_filepath As String() = Nothing
                                    ReDim str_filepath(3)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_iops_random_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_iops_random_write_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_iops_sequential_read_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_iops_sequential_write_descriptor

                                    Dim str_element_multiple As String() = Nothing
                                    ReDim str_element_multiple(3)
                                    str_element_multiple(0) = e.Node.Name
                                    str_element_multiple(1) = e.Node.Name
                                    str_element_multiple(2) = e.Node.Name
                                    str_element_multiple(3) = e.Node.Name

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "df_port_detail", "")

                                    'create graph
                                    Call create_chart("Port IOPS", e.Node.Name, 0, 1, "Port IOPS [IO/s]", "Port IOPS", str_performance_data_array, "stackedarea", "")
                                    str_performance_data_array = Nothing
                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'Port Transfer
                                    'get the performance data 
                                    '"CTL1-A"
                                    ReDim str_filepath(3)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_transfer_random_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_transfer_random_write_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_transfer_sequential_read_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_port & "\" & str_df_filename_port_transfer_sequential_write_descriptor

                                    ReDim str_element_multiple(3)
                                    str_element_multiple(0) = e.Node.Name
                                    str_element_multiple(1) = e.Node.Name
                                    str_element_multiple(2) = e.Node.Name
                                    str_element_multiple(3) = e.Node.Name

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "df_port_detail", "")

                                    'create graph
                                    Call create_chart("Port Transfer " & e.Node.Name & "", _
                                                       e.Node.FullPath, 0, 1, "Port Transfer [MB/s]", e.Node.Name & " Port Transfer", str_performance_data_array, "stackedarea", "")
                                    str_performance_data_array = Nothing
                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                Case str_df_name_lu

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    Dim str_filepath As String() = Nothing
                                    ReDim str_filepath(3)

                                    'LU IOPS
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_iops_random_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_iops_random_write_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_iops_sequential_read_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_iops_sequential_write_descriptor

                                    Dim str_element_multiple As String() = Nothing
                                    ReDim str_element_multiple(3)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(2) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(3) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " LU IOPS", e.Node.Name, 0, 1, "LU IOPS [IO/s]", "LU IOPS", str_performance_data_array, "stackedarea;stackedarea;stackedarea;stackedarea", "")
                                    str_performance_data_array = Nothing
                                    str_filepath = Nothing

                                    'LU Transfer
                                    ReDim str_filepath(3)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_transfer_random_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_transfer_random_write_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_transfer_sequential_read_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_transfer_sequential_write_descriptor


                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " LU Transfer", e.Node.Name, 0, 1, "LU Transfer [MB/s]", "LU Transfer", str_performance_data_array, "stackedarea;stackedarea;stackedarea;stackedarea", "")
                                    str_performance_data_array = Nothing
                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'LU blocksize
                                    ReDim str_element_multiple(1)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    ReDim str_filepath(1)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_iops_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_transfer_descriptor

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "lu_blocksize", "df_sum_up")
                                    Call create_chart(e.Node.Name & " LU block size", e.Node.Name & " blocksize", 0, dbl_conversion_mb_kb, "LU block size [kB]", "LU block size", str_performance_data_array, "fastline", "div")
                                    str_performance_data_array = Nothing


                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'lu response time
                                    ReDim str_element_multiple(11)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(2) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(3) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(4) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(5) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(6) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(7) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(8) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(9) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(10) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(11) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    ReDim str_filepath(11)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_write_count_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_write_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_count_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_write_hit_descriptor
                                    str_filepath(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_count_descriptor
                                    str_filepath(5) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_write_miss_descriptor
                                    str_filepath(6) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_response_job_read_count_descriptor
                                    str_filepath(7) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_read_descriptor
                                    str_filepath(8) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_count_descriptor
                                    str_filepath(9) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_read_hit_descriptor
                                    str_filepath(10) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_count_descriptor
                                    str_filepath(11) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_response_job_read_miss_descriptor


                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up_all")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " Response Time", e.Node.Name, 0, dbl_conversion_us_ms, "LU Response Time [ms]", "LU Response Time", str_performance_data_array, "fastline", str_what_to_do_lu_response)
                                    str_performance_data_array = Nothing

                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'lu read delay
                                    ReDim str_element_multiple(11)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(2) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(3) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(4) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(5) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(6) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(7) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(8) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(9) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(10) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(11) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name

                                    ReDim str_filepath(11)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_hit_300ms_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_hit_499ms_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_hit_999ms_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_hit_1000msplus_descriptor
                                    str_filepath(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_job_300ms_descriptor
                                    str_filepath(5) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_job_499ms_descriptor
                                    str_filepath(6) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_job_999ms_descriptor
                                    str_filepath(7) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_job_1000msplus_descriptor
                                    str_filepath(8) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_miss_300ms_descriptor
                                    str_filepath(9) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_miss_499ms_descriptor
                                    str_filepath(10) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_miss_999ms_descriptor
                                    str_filepath(11) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_read_miss_1000msplus_descriptor

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up_all")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " Read Delay", e.Node.Name, 0, 1, "LU Read Delay [#]", "LU Read Delay", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'lu write delay
                                    ReDim str_element_multiple(11)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(2) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(3) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(4) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(5) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(6) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(7) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(8) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(9) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(10) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(11) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name

                                    ReDim str_filepath(11)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_hit_300ms_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_hit_499ms_descriptor
                                    str_filepath(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_hit_999ms_descriptor
                                    str_filepath(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_hit_1000msplus_descriptor
                                    str_filepath(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_job_300ms_descriptor
                                    str_filepath(5) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_job_499ms_descriptor
                                    str_filepath(6) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_job_999ms_descriptor
                                    str_filepath(7) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_job_1000msplus_descriptor
                                    str_filepath(8) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_miss_300ms_descriptor
                                    str_filepath(9) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_miss_499ms_descriptor
                                    str_filepath(10) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_miss_999ms_descriptor
                                    str_filepath(11) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_df_name_lu & "\" & str_df_filename_lu_job_delay_write_miss_1000msplus_descriptor

                                    'get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up_all")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " LU Write Delay", e.Node.Name, 0, 1, "LU Write Delay [#]", "LU Write Delay", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'tag count
                                    ReDim str_element_multiple(1)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    ReDim str_filepath(1)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_tag_count_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_tag_count_write_descriptor

                                    ''get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " LU Tag Count", e.Node.Name, 0, 1, "LU Tag Count []", "LU Tag Count", str_performance_data_array, "stackedarea;stackedarea", "")
                                    str_performance_data_array = Nothing


                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                    'hit rates
                                    ReDim str_element_multiple(1)
                                    str_element_multiple(0) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    str_element_multiple(1) = "CTL0-" & e.Node.Name & ",CTL1-" & e.Node.Name
                                    ReDim str_filepath(1)
                                    str_filepath(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_hit_rate_read_descriptor
                                    str_filepath(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_lu & "\" & str_df_filename_lu_hit_rate_write_descriptor

                                    ''get the performance data 
                                    str_performance_data_array = raid_performance_data_put_in_array_of_several_files(str_filepath, str_element_multiple, "", "df_sum_up")
                                    ' create_chart (path, what to graph, chart title, nodename, parent nodename)
                                    Call create_chart(e.Node.Name & " LU Hit Rate", e.Node.Name, 101, 1, "LU Hit Rate [%]", "LU Hit Rate", str_performance_data_array, "fastline", "")
                                    str_performance_data_array = Nothing

                                    str_filepath = Nothing
                                    str_element_multiple = Nothing

                                Case str_df_name_drive_operate

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    checkbox_scalabiliy_enable(False)
                                    'unhide

                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    ReDim array_str_filepaths(0)

                                    'No.,"time",CTL0-Unit00-HDU00,CTL0-Unit00-HDU01,CTL0-Unit00-HDU02,CTL0-Unit00-HDU03,CTL0-Unit00-HDU04,CTL0-Unit00-HDU05
                                    ReDim array_str_elements(0)
                                    array_str_elements(0) = "CTL0-" & e.Node.Parent.Name & "-" & e.Node.Name & ",CTL1-" & e.Node.Parent.Name & "-" & e.Node.Name

                                    'HDD operating rate
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_driveoperate_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing

                                    ReDim array_str_filepaths(0)

                                    'HDD tag count
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_df_name_drive_operate & "\" & str_df_filename_drive_tag_count_descriptor

                                    Call df_collect_data_and_show_the_charts_needed(str_storage_type_df800, str_df_drive_operate_section, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                            End Select

                    End Select
                    ' case 2 end *******************************************************
#End Region
                Case 3
#Region "Case3"
                    ' case 3 start *******************************************************
                    Select Case str_storage_system
                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid600, str_storage_type_raid800, str_storage_type_hm800, str_storage_type_vsp5000
                            'what typ of data is it
                            Select Case e.Node.Parent.Parent.Parent.Name
                                'what typ of data is it

                                Case str_ldeveachofcu

                                    ''-----------------------
                                    ''checkboxes
                                    ''hide
                                    'checkbox_extra_options(False, False)
                                    ''unhide
                                    'checkbox_scalabiliy_enable(False)
                                    ''-----------------------

                                    ''delete all previously created graphs
                                    'Call delete_tabpages_and_carts()

                                    'ReDim array_str_filepaths(0)
                                    'ReDim array_str_elements(0)

                                    ''get all child names
                                    'For Each childNodeLevel1 As TreeNode In e.Node.Nodes

                                    '    If IsNothing(array_str_elements(0)) Then
                                    '        array_str_elements(0) = childNodeLevel1.Name
                                    '    Else
                                    '        array_str_elements(0) = array_str_elements(0) & "," & childNodeLevel1.Name
                                    '    End If

                                    'Next

                                    '' PhyLDEV
                                    ''ex. PHY_Short_LDEV_3-2.csv
                                    'If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(e.Node.Name) & ".csv") Then
                                    '    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '              str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(e.Node.Name) & ".csv"
                                    'End If

                                    'If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                 str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Name) & ".csv") Then
                                    '    If array_str_filepaths Is Nothing Then
                                    '        'set array to 1 row (loose all old data)

                                    '        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Name) & ".csv"

                                    '    Else
                                    '        'extend array to 2 rows (keep all old data)
                                    '        ReDim Preserve array_str_filepaths(1)
                                    '        ReDim Preserve array_str_elements(1)
                                    '        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                    '                  str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Name) & ".csv"
                                    '        array_str_elements(1) = array_str_elements(0)
                                    '    End If

                                    'End If

                                    ''create graphs
                                    'Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_phyldev, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    'array_str_filepaths = Nothing
                                    'array_str_elements = Nothing

                                Case str_lu 'lu host group data

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    Dim str_element As String = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    ReDim array_str_elements(3)
                                    ReDim array_str_filepaths(3)

                                    '-------------------------------------------
                                    'LU IOPS
                                    '-------------------------------------------

                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write
                                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write


                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(2) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(3) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea;stackedarea;stackedarea")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU Transfer
                                    '-------------------------------------------

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_hm800, str_storage_type_raid800

                                            ReDim array_str_filepaths(1)
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_kbps_write
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_lu & "\" & str_export_filename_lu_kbps_read

                                            ReDim array_str_elements(1)
                                            array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                            array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea")

                                        Case str_storage_type_raid600

                                            ReDim array_str_filepaths(0)
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & str_export_foldername_lu & "\" & str_export_filename_lu_kbps

                                            ReDim array_str_elements(0)
                                            array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea")

                                    End Select
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU Response
                                    '-------------------------------------------

                                    Select Case str_storage_system
                                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_hm800, str_storage_type_raid800

                                            ReDim array_str_filepaths(1)
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_response_read
                                            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                              str_export_foldername_lu & "\" & str_export_filename_lu_response_write

                                            ReDim array_str_elements(1)
                                            array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                            array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                        Case str_storage_type_raid600

                                            ReDim array_str_filepaths(0)
                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_response

                                            ReDim array_str_elements(0)
                                            array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                            Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid600, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    End Select
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing


                                    '-------------------------------------------
                                    'LU Blocksize
                                    '-------------------------------------------
                                    ReDim array_str_filepaths(1)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_iops

                                    ReDim array_str_elements(1)
                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU read/write ratio
                                    '-------------------------------------------
                                    ReDim array_str_filepaths(3)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                              str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write

                                    ReDim array_str_elements(3)
                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(2) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(3) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU Hit Rates
                                    '-------------------------------------------
                                    ReDim array_str_filepaths(3)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_read
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_write
                                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_read
                                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_write

                                    ReDim array_str_elements(3)
                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(1) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(2) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(3) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                    '-------------------------------------------
                                    'LU C2D (Cache 2 Disk)
                                    'The number of data transfer operations per second from cache memories and hard disk drives (for example, LUs)

                                    'elements
                                    ReDim array_str_elements(0)
                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    'filepaths
                                    ReDim array_str_filepaths(0)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_c2d_trans

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")

                                    '-------------------------------------------
                                    'LU D2C (Disk 2 Cache)
                                    'The number of data transfer operations per second from hard disk drives to cache memories (for example, LUs)

                                    'elements
                                    ReDim array_str_elements(1)
                                    array_str_elements(0) = e.Node.Parent.Parent.Name & "." & e.Node.Parent.Name & "." & e.Node.Name
                                    array_str_elements(1) = array_str_elements(0)

                                    'filepaths
                                    ReDim array_str_filepaths(1)
                                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_d2c_trans_sequential
                                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_lu & "\" & str_export_filename_lu_d2c_trans_random

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "stackedarea;stackedarea")

                                Case str_port

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'hide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    'clear all old data
                                    ReDim array_str_elements(2)
                                    ReDim array_str_filepaths(2)

                                    array_str_elements(0) = e.Node.Name
                                    array_str_elements(1) = e.Node.Name
                                    array_str_elements(2) = e.Node.Name

                                    If InStr(e.Node.FullPath, str_mfports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'clear all old data
                                        ReDim array_str_elements(4)
                                        ReDim array_str_filepaths(4)

                                        array_str_elements(0) = e.Node.Name
                                        array_str_elements(1) = e.Node.Name
                                        array_str_elements(2) = e.Node.Name
                                        array_str_elements(3) = e.Node.Name
                                        array_str_elements(4) = e.Node.Name

                                        'MFPorts IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_iops
                                        'MFPorts Read Transfer
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_read_kbps
                                        'MFPorts Write Transfer
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_write_kbps
                                        'MFPorts Respone
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_response
                                        'MFPorts Disctime
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(4) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" &
                                                          str_export_foldername_mfport & "\" & str_export_filename_mfport_disc_time

                                    End If

                                    If InStr(e.Node.FullPath, str_openports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'Ports IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_iops

                                        'Ports Transfer
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_kbps

                                        'Ports Response
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_port_response
                                    End If

                                    If InStr(e.Node.FullPath, str_tchurports, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                                        'Ports IOPS
                                        '-----------
                                        'set directory path
                                        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_iops

                                        'Ports Transfer
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_transfer

                                        'Ports Response
                                        '--------------
                                        'set directory path
                                        array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                          str_export_foldername_port & "\" & str_export_filename_initiator_ports_response
                                    End If

                                    'collect data and show chart
                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_port, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                    array_str_filepaths = Nothing
                                    array_str_elements = Nothing

                                Case str_backend

                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    Select Case e.Node.Parent.Parent.Name
                                        Case str_backend_cha_esw
                                            '"CHA-1EU.ESW-1SA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_cha
                                            array_str_elements(0) = "CHA-" & e.Node.Parent.Name & ".ESW-" & e.Node.Name

                                        Case str_backend_dka_esw
                                            '"DKA-1AU.ESW-1SA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_dka
                                            array_str_elements(0) = "DKA-" & e.Node.Parent.Name & ".ESW-" & e.Node.Name

                                        Case str_backend_esw_cache
                                            '"ESW-1SA.CACHE-1CA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_export_foldername_phyesw & "\" & str_export_filename_backend_cache
                                            array_str_elements(0) = "ESW-" & e.Node.Parent.Name & ".CACHE-" & e.Node.Name

                                        Case str_backend_mppcb_esw
                                            '"MPB-1MA.ESW-1SA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phyesw & "\" & str_export_filename_backend_mppcb
                                            array_str_elements(0) = "MPB-" & e.Node.Parent.Name & ".ESW-" & e.Node.Name

                                    End Select

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                Case str_backend_hm700
                                    '-----------------------
                                    'checkboxes
                                    'hide
                                    checkbox_extra_options(False, False)
                                    'unhide
                                    checkbox_scalabiliy_enable(False)
                                    '-----------------------

                                    'delete all previously created graphs
                                    Call delete_tabpages_and_carts()

                                    ReDim array_str_filepaths(0)
                                    ReDim array_str_elements(0)

                                    Select Case e.Node.Parent.Parent.Name
                                        Case str_raid800_backend_cha_cmpk
                                            '"CHA-1PC.CACHE-1CA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cha
                                            array_str_elements(0) = "CHA-" & e.Node.Parent.Name & ".CACHE-" & e.Node.Name

                                        Case str_raid800_backend_cmpk_cache
                                            '"CACHE-1CA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_cache
                                            array_str_elements(0) = "CACHE-" & e.Node.Name

                                        Case str_raid800_backend_dka_cmpk
                                            '"DKA-1PA.CACHE-1CA"

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                     str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_dka
                                            array_str_elements(0) = "DKA-" & e.Node.Parent.Name & ".CACHE-" & e.Node.Name

                                        Case str_raid800_backend_mppcb_cmpk
                                            '"MPB-1MA.CACHE-1CA

                                            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                                      str_export_foldername_phycmpk & "\" & str_export_filename_raid800_backend_mppcb
                                            array_str_elements(0) = "MPB-" & e.Node.Parent.Name & ".CACHE-" & e.Node.Name

                                    End Select

                                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid800, str_backend, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "fastline")
                                    array_str_elements = Nothing
                                    array_str_filepaths = Nothing

                                Case Else
                            End Select

                        Case str_storage_type_df800


                    End Select
                    ' case 3 end *******************************************************
#End Region


                Case 4
#Region "Case4"

                    ' case 4 start *******************************************************
                    Select Case str_storage_system
                        Case str_storage_type_raid700, str_storage_type_raid750, str_storage_type_raid600, str_storage_type_raid800, str_storage_type_vsp5000
                            'what typ of data is it
                            Select Case e.Node.Parent.Parent.Parent.Parent.Name
                                'Case str_ldeveachofcu
                                '    '-----------------------
                                '    'checkboxes
                                '    'hide
                                '    checkbox_extra_options(False, False)
                                '    'unhide
                                '    checkbox_scalabiliy_enable(False)
                                '    '-----------------------

                                '    'delete all previously created graphs
                                '    Call delete_tabpages_and_carts()

                                '    ReDim array_str_filepaths(0)
                                '    ReDim array_str_elements(0)

                                '    array_str_elements(0) = e.Node.Name

                                '    ' PhyLDEV
                                '    'ex. PHY_Short_LDEV_3-2.csv
                                '    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                '                      str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(e.Node.Parent.Name) & ".csv") Then
                                '        array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                '                  str_export_foldername_phyldev & "\" & str_export_filename_phyldev_start & pg_leading_zero_remove(e.Node.Parent.Name) & ".csv"
                                '    End If

                                '    If File.Exists(path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                '                     str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Parent.Name) & ".csv") Then
                                '        If array_str_filepaths Is Nothing Then
                                '            'set array to 1 row (loose all old data)

                                '            array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                '                      str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Parent.Name) & ".csv"

                                '        Else
                                '            'extend array to 2 rows (keep all old data)
                                '            ReDim Preserve array_str_filepaths(1)
                                '            ReDim Preserve array_str_elements(1)
                                '            array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                '                      str_export_foldername_phyldev & "\" & str_export_filename_phyldev_si_start & pg_leading_zero_remove(e.Node.Parent.Name) & ".csv"
                                '            array_str_elements(1) = array_str_elements(0)
                                '        End If

                                '    End If

                                '    'create graphs
                                '    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_ldeveachofcu, array_str_filepaths, array_str_elements, CStr(e.Node.Level), e.Node.FullPath, "")

                                'array_str_filepaths = Nothing
                                'array_str_elements = Nothing

                            End Select
                        Case str_storage_type_df800
                            'what typ of data is it
                            Select Case e.Node.Parent.Parent.Parent.Name

                            End Select
                    End Select
                    ' case 4 end *******************************************************
#End Region
                Case Else

            End Select

        End If

    End Sub

    '''check/uncheck all subitems
    ''' <summary>
    ''' check/uncheck all subitems
    ''' Handles the uncheck event of the checkbox_treeview_sub_check control.
    ''' </summary>
    ''' <param name="sender">The source of the event.</param>
    ''' <param name="e">The <see cref="System.Windows.Forms.TreeViewEventArgs"/> instance containing the event data.</param>
    Private Sub checkbox_treeview_sub_check_uncheck(sender As Object, e As System.Windows.Forms.TreeViewEventArgs) Handles TreeView_available_performancedata.AfterCheck

        If e.Node.Checked = True Then
            CheckNode(e.Node.Nodes)
        Else
            UnCheckNode(e.Node.Nodes)
        End If

    End Sub

    Public Function CheckNode(ByVal _nodeCollection As TreeNodeCollection) As TreeNode
        Dim tmpNode As TreeNode
        For Each _child As TreeNode In _nodeCollection
            _child.Checked = True
            tmpNode = CheckNode(_child.Nodes)
            If Not tmpNode Is Nothing Then
                Return tmpNode
            End If
        Next
        Return Nothing
    End Function

    Public Function UnCheckNode(ByVal _nodeCollection As TreeNodeCollection) As TreeNode
        Dim tmpNode As TreeNode
        For Each _child As TreeNode In _nodeCollection
            _child.Checked = False
            tmpNode = UnCheckNode(_child.Nodes)
            If Not tmpNode Is Nothing Then
                Return tmpNode
            End If
        Next
        Return Nothing
    End Function


#End Region

#Region "Checkboxes"

    Private Sub CheckBox_stacked_view_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBox_stacked_view.CheckedChanged

        Dim int_temp As Integer = Nothing
        Dim str_temp As String = Nothing
        'option to have the acual view as stacked view or vice versa
        Dim str_what_type_of_graph As String = Nothing

        Dim array_str_filepaths As String() = Nothing
        Dim array_str_elements As String() = Nothing

        'mal später zu tun?????

        'Dim eventargs_treeview As System.Windows.Forms.TreeViewEventArgs = Nothing
        'eventargs_treeview.Node.Level = TreeView_available_performancedata.SelectedNode.Level
        'Call TreeView_available_performancedata_AfterSelect(TreeView_available_performancedata.SelectedNode, eventargs_treeview)

        'only working when LU and node level 2 (hsd level) is active
        If Strings.Left(TreeView_available_performancedata.SelectedNode.FullPath, str_lu.Length) = str_lu And TreeView_available_performancedata.SelectedNode.Level = 2 Then

            Dim str_performance_data_array As String() = Nothing
            Dim str_collection_of_descriptors As String() = Nothing

            Dim temp As String = Nothing


            'clear all old data
            ReDim array_str_elements(0)
            ReDim array_str_filepaths(0)

            'are all childnodes checked?
            Dim boolean_all_elements_checked As Boolean = True
            Dim boolean_at_least_one_is_checked As Boolean = False

            'find out if only some child nodes are marked
            For Each childnode As TreeNode In TreeView_available_performancedata.SelectedNode.Nodes
                If TreeView_available_performancedata.SelectedNode.Checked Then
                    boolean_all_elements_checked = True
                Else
                    If childnode.Checked Then
                        'child node is checked
                        boolean_at_least_one_is_checked = True
                    Else
                        'defenetly not all child nodes are checked
                        boolean_all_elements_checked = False
                    End If
                End If
            Next

            'collect all child nodes and put it into the string str_collection_of_paritygroups (comma seperated)
            For Each childnode As TreeNode In TreeView_available_performancedata.SelectedNode.Nodes
                'if all childnodes are checked or none then take all elements
                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                    'take all elements
                    If IsNothing(array_str_elements(0)) Then
                        array_str_elements(0) = TreeView_available_performancedata.SelectedNode.Parent.Name & "." & TreeView_available_performancedata.SelectedNode.Name & "." & childnode.Name
                    Else
                        array_str_elements(0) = array_str_elements(0) & "," & TreeView_available_performancedata.SelectedNode.Parent.Name & "." & TreeView_available_performancedata.SelectedNode.Name & "." & childnode.Name
                    End If
                Else
                    'take only the ones that are checked
                    If childnode.Checked Then
                        If IsNothing(array_str_elements(0)) Then
                            array_str_elements(0) = TreeView_available_performancedata.SelectedNode.Parent.Name & "." & TreeView_available_performancedata.SelectedNode.Name & "." & childnode.Name
                        Else
                            array_str_elements(0) = array_str_elements(0) & "," & TreeView_available_performancedata.SelectedNode.Parent.Name & "." & TreeView_available_performancedata.SelectedNode.Name & "." & childnode.Name
                        End If
                    End If
                End If
            Next

            'checkboxes and numeric up and down
            NumericUpDown_amber.Enabled = False
            NumericUpDown_green.Enabled = False
            CheckBox_scalability.Enabled = False

            Call delete_tabpages_and_carts()

            If CheckBox_stacked_view.Checked Then
                'checkbox checked

                'clear all old data
                ReDim array_str_filepaths(0)

                'if all childnodes are checked or none then take all elements
                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then
                    'all elements are marked or nothing is marked (take all)

                    '---------------------
                    'show all luns seperately
                    '---------------------

                    'LU IOPS
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops
                    'create graph
                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                    array_str_filepaths(0) = Nothing
                    ReDim array_str_filepaths(0)

                    'LU Transfer
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
        str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                    'create graph
                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                    'LU Response
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                    str_export_foldername_lu & "\" & str_export_filename_lu_response
                    'create graph
                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                    '-------------------------------------------
                    'LU read/write ratio
                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(3)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    array_str_elements(2) = temp
                    array_str_elements(3) = temp
                    temp = Nothing

                    'filepaths
                    ReDim array_str_filepaths(3)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")
                End If

            Else 'checkbox unchecked

                'if all childnodes are checked or none then take all elements
                If boolean_all_elements_checked Or Not boolean_at_least_one_is_checked Then

                    '---------------------
                    'show all luns stacked
                    '---------------------

                    'LU IOPS

                    'set array to 4 rows (loose all old data)
                    ReDim array_str_filepaths(3)
                    ReDim Preserve array_str_elements(3)

                    'elements
                    array_str_elements(1) = array_str_elements(0)
                    array_str_elements(2) = array_str_elements(0)
                    array_str_elements(3) = array_str_elements(0)

                    'filepaths
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write
                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "stackedarea;stackedarea;stackedarea;stackedarea")

                    array_str_filepaths = Nothing

                    'LU Transfer

                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(1)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    temp = Nothing

                    'filepaths
                    ReDim array_str_filepaths(1)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_kbps_write
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_kbps_read

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "stackedarea;stackedarea")

                    'LU response
                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(1)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    temp = Nothing

                    'filepaths
                    ReDim array_str_filepaths(1)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_response_read
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                     str_export_foldername_lu & "\" & str_export_filename_lu_response_write

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline;fastline")

                    'LU blocksize
                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(1)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    temp = Nothing

                    'filepaths
                    ReDim array_str_filepaths(1)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_kbps
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                     str_export_foldername_lu & "\" & str_export_filename_lu_iops

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                    '-------------------------------------------
                    'LU read/write ratio
                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(3)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    array_str_elements(2) = temp
                    array_str_elements(3) = temp
                    temp = Nothing

                    'filepaths
                    ReDim array_str_filepaths(3)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_read
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_read
                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_seq_write
                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_iops_ran_write

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                    'LU Hit Rates
                    'elements
                    temp = array_str_elements(0)
                    array_str_elements = Nothing
                    ReDim array_str_elements(3)
                    array_str_elements(0) = temp
                    array_str_elements(1) = temp
                    array_str_elements(2) = temp
                    array_str_elements(3) = temp
                    temp = Nothing

                    'filepaths
                    array_str_filepaths = Nothing
                    ReDim array_str_filepaths(3)
                    array_str_filepaths(0) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_read
                    array_str_filepaths(1) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_read
                    array_str_filepaths(2) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_rnd_write
                    array_str_filepaths(3) = path_performance_export_data & "\" & str_export_foldername_unzipped & "\" & _
                                      str_export_foldername_lu & "\" & str_export_filename_lu_hit_seq_write

                    Call raid_collect_data_and_show_the_charts_needed(str_storage_type_raid700, str_lu, array_str_filepaths, array_str_elements, CStr(TreeView_available_performancedata.SelectedNode.Level), TreeView_available_performancedata.SelectedNode.FullPath, "fastline")

                End If
            End If

            array_str_elements = Nothing
            array_str_filepaths = Nothing

            NumericUpDown_amber.Update()
            NumericUpDown_green.Update()
            CheckBox_scalability.Update()
            CheckBox_stacked_view.Update()

        End If
        'only working when LU and node level 2 (hsd level) is active


    End Sub

    Sub checkbox_scalabiliy_enable(ByVal boolean_enable As Boolean)

        'checkboxes and numeric up and down
        CheckBox_scalability.Visible = boolean_enable
        'CheckBox_scalability.Checked = False
        CheckBox_scalability.Enabled = boolean_enable
        GroupBox_scalability.Visible = boolean_enable
        NumericUpDown_amber.Visible = boolean_enable
        NumericUpDown_amber.Enabled = boolean_enable
        NumericUpDown_green.Visible = boolean_enable
        NumericUpDown_green.Enabled = boolean_enable
        Label_amber.Visible = boolean_enable
        Label_green.Visible = boolean_enable

        If Not boolean_enable Then
            CheckBox_scalability.Checked = False
        End If

    End Sub

    Sub checkbox_extra_options(ByVal boolean_enable As Boolean, ByVal boolean_checkbox_set As Boolean, Optional ByVal str_label_name As String = Nothing)

        If Not str_label_name = Nothing Then
            CheckBox_stacked_view.Text = str_label_name
        End If

        CheckBox_stacked_view.Visible = boolean_enable
        CheckBox_stacked_view.Checked = boolean_checkbox_set
        GroupBox_extra_options.Visible = boolean_enable

    End Sub

#End Region

#Region "Tabs"

    Private Sub TabControl_chart1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabControl_chart1.SelectedIndexChanged
        'this sub selects the actual node in the treeview if you change the tab

        TreeView_available_performancedata.Select()
    End Sub

#End Region

#Region "ToolStrip Rightclick Procedures"

    Private Sub save_as_ToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles save_as_ToolStripMenuItem.Click

        ' Create a new save file dialog
        Dim saveFileDialog1 As New SaveFileDialog()

        ' Sets the current file name filter string, which determines 
        ' the choices that appear in the "Save as file type" or 
        ' "Files of type" box in the dialog box.
        ' standard is JPG
        saveFileDialog1.Filter = "Bitmap (*.bmp)|*.bmp|JPEG (*.jpg)|*.jpg|EMF (*.emf)|*.emf|PNG (*.png)|*.png|GIF (*.gif)|*.gif|TIFF (*.tif)|*.tif"
        saveFileDialog1.FilterIndex = 2
        saveFileDialog1.RestoreDirectory = True
        saveFileDialog1.FileName = str_storage_system_serial & "_" & TabControl_chart1.SelectedTab.Text

        ' Set image file format
        If saveFileDialog1.ShowDialog() = DialogResult.OK Then
            Dim format As ChartImageFormat = ChartImageFormat.Bmp

            If saveFileDialog1.FileName.EndsWith("bmp") Then
                format = ChartImageFormat.Bmp
            Else
                If saveFileDialog1.FileName.EndsWith("jpg") Then
                    format = ChartImageFormat.Jpeg
                Else
                    If saveFileDialog1.FileName.EndsWith("emf") Then
                        format = ChartImageFormat.Emf
                    Else
                        If saveFileDialog1.FileName.EndsWith("gif") Then
                            format = ChartImageFormat.Gif
                        Else
                            If saveFileDialog1.FileName.EndsWith("png") Then
                                format = ChartImageFormat.Png
                            Else
                                If saveFileDialog1.FileName.EndsWith("tif") Then
                                    format = ChartImageFormat.Tiff
                                End If ' Save image
                            End If
                        End If
                    End If
                End If
            End If

            If Me.ToolStripMenuItem_no_background_color.Checked Then
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.White
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.White
            Else
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
            End If

            'save it
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).SaveImage(saveFileDialog1.FileName, format)

            'set it back to gray
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
            TabControl_chart1.SelectedTab.Controls(0).Update()
        End If


    End Sub

    Private Sub print_ToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles print_ToolStripMenuItem.Click

        If Me.ToolStripMenuItem_no_background_color.Checked Then
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.White
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.White
        Else
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
        End If

        ' Print chart (with Printer dialog)
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Printing.Print(True)

        'set it back to gray
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
        TabControl_chart1.SelectedTab.Controls(0).Update()

    End Sub

    Private Sub ClipboardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClipboardToolStripMenuItem.Click

        If Me.ToolStripMenuItem_no_background_color.Checked Then
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.White
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.White
        Else
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
        End If

        TabControl_chart1.SelectedTab.Controls(0).Update()

        'hide the context menu strip
        'ContextMenuStrip.Visible = False

        ' Bitmap-Objekt für die aktuelle Form
        Dim oBitmap As Bitmap

        ' Rechteck in der benötigten Größe erstellen
        'MsgBox(AutoScaleMode.Dpi)


        Dim oRect As New Rectangle(Me.Left + TabControl_chart1.Left + 27, Me.Top + TabControl_chart1.Top + 78, CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Width - 37, CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Height - 50)


        ' Bitmap-Objekt erstellen
        With oRect
            oBitmap = New Bitmap(.Width, .Height, Imaging.PixelFormat.Format24bppRgb)
        End With

        'Screenshot des Desktops für das ausgewählten Rechteckes erstellen
        Using g As Graphics = Graphics.FromImage(oBitmap)
            g.CopyFromScreen(oRect.Left, oRect.Top, 0, 0, New Size(oRect.Width, oRect.Height))
        End Using

        Clipboard.SetImage(oBitmap)

        ' Bitmap zerstören
        oBitmap.Dispose()

        'set it back to gray
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackColor = Color.Gray
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).BackSecondaryColor = Color.WhiteSmoke
        TabControl_chart1.SelectedTab.Controls(0).Update()

    End Sub

    Private Sub ToggleLabelToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ToggleLabelToolStripMenuItem.Click
        If CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Legends("Legend1").Enabled Then
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Legends("Legend1").Enabled = False
        Else
            CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Legends("Legend1").Enabled = True
        End If

    End Sub

    Private Sub ChangeYAxisToolStripTextBox_enter_key_pressed(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) Handles ChangeYAxisToolStripTextBox.KeyPress
        'key pressed must be the enter key
        If e.KeyChar = Microsoft.VisualBasic.ChrW(Keys.Return) Then
            'value must be numeric
            If IsNumeric(Me.ChangeYAxisToolStripTextBox.Text) Then
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).ChartAreas("ChartArea1").AxisY.Maximum = CInt(Me.ChangeYAxisToolStripTextBox.Text)
            Else
                'CType(TabControl_chart1.SelectedTab.Controls(0), Chart).ChartAreas("ChartArea1").AxisY.Maximum
            End If
        End If

    End Sub

    Private Sub ChartTypeToolStripMenuItem_toggle_chart_type_Click(sender As Object, e As EventArgs) Handles ChartTypeToolStripMenuItem_toggle_chart_type.Click

        If CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Series(0).ChartType = SeriesChartType.FastLine Then
            'all series elements to stacked area
            For i As Integer = 0 To CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Series.Count - 1 Step 1
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Series(i).ChartType = SeriesChartType.StackedArea
            Next
        Else
            'all series elements to fast line
            For i As Integer = 0 To CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Series.Count - 1 Step 1
                CType(TabControl_chart1.SelectedTab.Controls(0), Chart).Series(i).ChartType = SeriesChartType.FastLine
            Next
        End If


    End Sub

    Private Sub y_axis_automatic_ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles y_axis_automatic_ToolStripMenuItem.Click
        'reset the maximum value back to autosize
        CType(TabControl_chart1.SelectedTab.Controls(0), Chart).ChartAreas("ChartArea1").AxisY.Maximum = Double.NaN
    End Sub

#End Region

#Region "Mouse Events Procedures"

    ' Mouse Move Event on chart
    Private Sub Chart_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TabControl_chart1.MouseMove

        'the flickering is not so anoying if this is done
        Static MyPoint As New Point(0, 0)
        If e.Location = MyPoint Then Exit Sub
        MyPoint = e.Location

        'Call Hit Test Method
        Dim hitresult As HitTestResult = CType(TabControl_chart1.SelectedTab.Controls(0), Chart).HitTest(e.X, e.Y)

        ' If the mouse if over a data point
        If hitresult.ChartElementType = ChartElementType.DataPoint Then
            'show tooltip message (series name)
            'toolTip_chart_name.SetToolTip()

            toolTip_chart_name.SetToolTip(CType(TabControl_chart1.SelectedTab.Controls(0), Chart), hitresult.Series.Name & vbNewLine & CStr(hitresult.Series.Points(hitresult.PointIndex).YValues(0)) & vbNewLine & hitresult.Series.Points(hitresult.PointIndex).AxisLabel.ToString)
        End If

    End Sub

    Private Sub delete_series_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles TabControl_chart1.MouseDown
        Dim result As HitTestResult = CType(TabControl_chart1.SelectedTab.Controls(0), Chart).HitTest(e.X, e.Y)
        If Not (result Is Nothing) And Not (result.Object Is Nothing) Then
            ' When user hits the LegendItem
            If TypeOf result.Object Is LegendItem Then

                ' series item selected
                Dim selectedSeries As Series = CType(result.Series, Series)

                If Not (selectedSeries Is Nothing) Then

                    If Not selectedSeries.Color = Color.Transparent Then
                        selectedSeries.Color = Color.Transparent
                    Else
                        selectedSeries.Color = Color.Empty
                    End If
                End If
            End If
        End If
    End Sub

#End Region

#Region "ToolStrip Menu Procedures"

    Private Sub ClearAllCheckboxesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles ClearAllCheckboxesToolStripMenuItem.Click
        'clear all checkboxes

        Dim n As TreeNode
        For Each n In TreeView_available_performancedata.Nodes
            If n.Checked Then
                n.Checked = False
            End If
            treeview_recursive(n)
        Next



    End Sub

    Private Sub treeview_recursive(ByVal n As TreeNode)
        'help sub for recursive clear all checkboxes
        Dim aNode As TreeNode
        For Each aNode In n.Nodes
            If aNode.Checked Then
                aNode.Checked = False
            End If
            treeview_recursive(aNode)
        Next
    End Sub


#End Region

#Region "raidcom"

    ''' <summary>
    ''' This function checks if a folder called *horcmdir* exists in the parent folder of the perfromance data folder. if so the return value is "True"
    ''' </summary>
    ''' <param name="folderpath">The folderpath is the full name of the performance data path. </param>
    ''' <returns></returns>
    Function boolean_raidcom_folder_available(folderpath As String) As Boolean

        boolean_raidcom_folder_available = False

        Try
            Dim directoryinfo_parent As System.IO.DirectoryInfo
            directoryinfo_parent = System.IO.Directory.GetParent(path_performance_export_data)
            For Each directory_name As System.IO.DirectoryInfo In directoryinfo_parent.GetDirectories
                If InStr(directory_name.Name, str_raidcom_horcmdir_pattern, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                    'directory path of the raidcom output folder
                    str_raidcom_full_path = directory_name.FullName
                    boolean_raidcom_folder_available = True
                    Exit Function

                Else
                    str_raidcom_full_path = ""

                End If
            Next

        Catch exp As ArgumentNullException
            'NOP
        Catch exp As ArgumentException
            'NOP
        End Try

    End Function


    ''' <summary>
    ''' This Function reads the outputfile of the raidcom command "raidcom get ldevlist defined" and puts it into 2 arrays. a physical ldev and a vvol ldev array.
    ''' </summary>
    ''' <param name="str_filepath">This is the fullpath of the raidcom directory.</param>
    ''' <returns>A dictionary containing the two arrays. a physical ldev array with the key name "physical_ldev" and a vvol ldev array with the key name "vvol_ldev".</returns>
    Function dict_raidcom_parse_get_ldevlist_def(ByVal str_filepath As String) As Dictionary(Of String, Array)

        dict_raidcom_parse_get_ldevlist_def = Nothing

        'dictionary to return the arrays
        Dim dic_of_array_raidcom_get_ldevlist As New Dictionary(Of String, Array)

        'this is the separator char of all elements of an ldev
        Dim str_separator As String = ";"

        'you have to know the serial number to know the horcmfile name as it contains the serial number
        Dim str_serial As String = Nothing
        'get the serial out of the path
        str_serial = Strings.Right(str_filepath, 5)

        'error handling
        'check if folder and file exists.
        If Directory.Exists(str_filepath) Then
            If Not File.Exists(str_filepath & "\" & str_serial & str_raidcom_get_ldevlist_def_pattern) Then
                MsgBox("The raidcom file specified does not exist! The path looked for was:" & vbCrLf & Chr(34) & str_filepath & "\" & str_serial & str_raidcom_get_ldevlist_def_pattern & Chr(34) & vbCrLf & "Please Create the folders and put the raidcom output (named as above) in this folder and retry.", MsgBoxStyle.Critical)
                Exit Function
            End If
        Else
            MsgBox("The raidcom folder specified does not exist! The path looked for was:" & vbCrLf & Chr(34) & str_filepath & Chr(34) & vbCrLf & "Please Create the folders (named as above) and retry.", MsgBoxStyle.Critical)
            Exit Function
        End If

        '-----------------------------------------
        'calculate elements of the ldev by type and how many ldevs there are
        Dim int_number_of_vvol_ldevs_hdp As Integer = 0
        Dim boolean_number_of_vvol_ldev_hdp_elements As Boolean = False
        Dim int_number_of_elements_of_the_vvol_ldev_hdp As Integer = 0

        Dim int_number_of_vvol_ldevs_hdt As Integer = 0
        Dim boolean_number_of_vvol_ldev_hdt_elements As Boolean = False
        Dim int_number_of_elements_of_the_vvol_ldev_hdt As Integer = 0

        Dim int_number_of_physical_ldevs As Integer = 0
        Dim int_number_of_elements_of_the_physical_ldev As Integer = 0
        Dim boolean_number_of_physical_ldev_elements As Boolean = False


        'count the number of elements and the number of ldevs
        '-----------------------------------------------------
        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(str_filepath & "\" & str_serial & str_raidcom_get_ldevlist_def_pattern)
        Dim str_line As String = obj_reader.ReadLine
        Dim str_element As String = Nothing

        Do

            Do
                If IsNothing(str_element) Then
                    str_element = str_line
                Else
                    str_element = str_element & str_separator & str_line
                End If

                'next line
                str_line = obj_reader.ReadLine()

            Loop Until str_line = ""

            'physical ldev
            'count the number of elements per ldev and the number of ldevs
            If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_physical_ldev, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                'go to this if when it is unknown what number of elements the ldev type have
                If Not boolean_number_of_physical_ldev_elements Then
                    int_number_of_elements_of_the_physical_ldev = Split(str_element, str_separator).Count
                    boolean_number_of_physical_ldev_elements = True
                End If

                'count the number of ldevs
                int_number_of_physical_ldevs = int_number_of_physical_ldevs + 1

            End If

            'vvol ldev hdt or hdp
            'count the number of elements per ldev and the number of ldevs
            If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_vvol_ldev, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_vvol_ldev_hdt, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                    'HDT Elements
                    'go to this if when it is unknown what number of elements the ldev type have
                    If Not boolean_number_of_vvol_ldev_hdt_elements Then
                        int_number_of_elements_of_the_vvol_ldev_hdt = Split(str_element, str_separator).Count
                        boolean_number_of_vvol_ldev_hdt_elements = True
                    End If

                    'count the number of ldevs
                    int_number_of_vvol_ldevs_hdt = int_number_of_vvol_ldevs_hdt + 1

                Else
                    'HDP Elements
                    'go to this if when it is unknown what number of elements the ldev type have
                    If Not boolean_number_of_vvol_ldev_hdp_elements Then
                        int_number_of_elements_of_the_vvol_ldev_hdp = Split(str_element, str_separator).Count
                        boolean_number_of_vvol_ldev_hdp_elements = True
                    End If

                    'count the number of ldevs
                    int_number_of_vvol_ldevs_hdp = int_number_of_vvol_ldevs_hdp + 1

                End If

            End If

            'clear temp variable
            str_element = Nothing

            'next line
            str_line = obj_reader.ReadLine()

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        'create an array of the correct size
        'physical array
        Dim str_array_raidcom_get_ldevlist_def_physical_ldev(int_number_of_physical_ldevs, int_number_of_elements_of_the_physical_ldev - 1) As String
        'hdp array
        Dim str_array_raidcom_get_ldevlist_def_vvol_ldev_hdp(int_number_of_vvol_ldevs_hdp, int_number_of_elements_of_the_vvol_ldev_hdp - 1) As String
        'hdp array
        Dim str_array_raidcom_get_ldevlist_def_vvol_ldev_hdt(int_number_of_vvol_ldevs_hdt, int_number_of_elements_of_the_vvol_ldev_hdt - 1) As String

        'clear variables
        int_number_of_vvol_ldevs_hdp = Nothing
        int_number_of_vvol_ldevs_hdt = Nothing
        int_number_of_elements_of_the_vvol_ldev_hdp = Nothing
        int_number_of_elements_of_the_vvol_ldev_hdt = Nothing
        boolean_number_of_vvol_ldev_hdp_elements = Nothing
        boolean_number_of_vvol_ldev_hdt_elements = Nothing

        int_number_of_physical_ldevs = Nothing
        int_number_of_elements_of_the_physical_ldev = Nothing
        boolean_number_of_physical_ldev_elements = Nothing


        'put the ldevs in the arrays
        '-----------------------------------------------------
        Dim boolean_header_set_physical_ldev As Boolean = False
        Dim boolean_header_set_vvol_ldev_hdp As Boolean = False
        Dim boolean_header_set_vvol_ldev_hdt As Boolean = False

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_filepath & "\" & str_serial & str_raidcom_get_ldevlist_def_pattern)
        str_line = obj_reader.ReadLine
        str_element = Nothing

        Dim int_column_counter_hdp As Integer = 0
        Dim int_column_counter_hdt As Integer = 0
        Dim int_column_counter_phy As Integer = 0
        Dim int_physical_ldev_row_counter As Integer = 1
        Dim int_vvol_ldev_row_counter_hdp As Integer = 1
        Dim int_vvol_ldev_row_counter_hdt As Integer = 1

        Do
            'put all elements in a ";" (see str_separator) separeted string
            Do Until str_line = ""
                If IsNothing(str_element) Then
                    str_element = str_line
                Else
                    str_element = str_element & str_separator & str_line
                End If

                'next line
                str_line = obj_reader.ReadLine()

            Loop

            'physical ldev
            'count the number of elements per ldev and the number of ldevs
            If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_physical_ldev, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                'is the header set in the array
                If Not boolean_header_set_physical_ldev Then

                    int_column_counter_phy = 0
                    Dim test = Split(str_element, str_separator)
                    For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                        str_array_raidcom_get_ldevlist_def_physical_ldev(0, int_column_counter_phy) = Strings.Left(str_elements_of_ldev, str_elements_of_ldev.IndexOf(":") - 1)
                        int_column_counter_phy = int_column_counter_phy + 1
                    Next
                    boolean_header_set_physical_ldev = True

                End If

                'fill the ldev into the array
                int_column_counter_phy = 0
                For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                    str_array_raidcom_get_ldevlist_def_physical_ldev(int_physical_ldev_row_counter, int_column_counter_phy) = Strings.Trim(Strings.Right(str_elements_of_ldev, str_elements_of_ldev.Length - (str_elements_of_ldev.IndexOf(":") + 1)))
                    int_column_counter_phy = int_column_counter_phy + 1
                Next
                int_physical_ldev_row_counter = int_physical_ldev_row_counter + 1

            End If

            'vvol ldev
            'count the number of elements per ldev and the number of ldevs
            If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_vvol_ldev, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                If InStr(str_element, str_raidcom_get_ldevlist_def_pattern_vvol_ldev_hdt, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                    'HDT
                    'is the header set in the array
                    If Not boolean_header_set_vvol_ldev_hdt Then

                        int_column_counter_hdt = 0
                        'Dim test = Split(str_element, str_separator)
                        For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                            'is it hdp or hdt
                            str_array_raidcom_get_ldevlist_def_vvol_ldev_hdt(0, int_column_counter_hdt) = Strings.Left(str_elements_of_ldev, str_elements_of_ldev.IndexOf(":") - 1)
                            int_column_counter_hdt = int_column_counter_hdt + 1
                        Next
                        boolean_header_set_vvol_ldev_hdt = True

                    End If



                    'fill the ldev into the array
                    int_column_counter_hdt = 0
                    For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                        'is it hdp or hdt
                        str_array_raidcom_get_ldevlist_def_vvol_ldev_hdt(int_vvol_ldev_row_counter_hdt, int_column_counter_hdt) = Strings.Trim(Strings.Right(str_elements_of_ldev, str_elements_of_ldev.Length - (str_elements_of_ldev.IndexOf(":") + 1)))
                        int_column_counter_hdt = int_column_counter_hdt + 1
                    Next
                    int_vvol_ldev_row_counter_hdt = int_vvol_ldev_row_counter_hdt + 1

                Else
                    'HDP
                    'is the header set in the array
                    If Not boolean_header_set_vvol_ldev_hdp Then

                        int_column_counter_hdp = 0
                        'Dim test = Split(str_element, str_separator)
                        For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                            'is it hdp or hdt
                            str_array_raidcom_get_ldevlist_def_vvol_ldev_hdp(0, int_column_counter_hdp) = Strings.Left(str_elements_of_ldev, str_elements_of_ldev.IndexOf(":") - 1)
                            int_column_counter_hdp = int_column_counter_hdp + 1
                        Next
                        boolean_header_set_vvol_ldev_hdp = True

                    End If



                    'fill the ldev into the array
                    int_column_counter_hdp = 0
                    For Each str_elements_of_ldev As String In Split(str_element, str_separator)
                        'is it hdp or hdt
                        str_array_raidcom_get_ldevlist_def_vvol_ldev_hdp(int_vvol_ldev_row_counter_hdp, int_column_counter_hdp) = Strings.Trim(Strings.Right(str_elements_of_ldev, str_elements_of_ldev.Length - (str_elements_of_ldev.IndexOf(":") + 1)))
                        int_column_counter_hdp = int_column_counter_hdp + 1
                    Next
                    int_vvol_ldev_row_counter_hdp = int_vvol_ldev_row_counter_hdp + 1

                End If

            End If

            'clear temp variable
            str_element = Nothing

            'next line
            str_line = obj_reader.ReadLine()

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        'put the array in the list to return both arrays
        dic_of_array_raidcom_get_ldevlist.Add(str_raidcom_get_ldevlist_def_availabale_pattern_physical_ldev, str_array_raidcom_get_ldevlist_def_physical_ldev)
        If IsNothing(str_raidcom_data_available) Then
            str_raidcom_data_available = str_raidcom_get_ldevlist_def_availabale_pattern_physical_ldev
        Else
            str_raidcom_data_available = str_raidcom_data_available & "," & str_raidcom_get_ldevlist_def_availabale_pattern_physical_ldev
        End If

        dic_of_array_raidcom_get_ldevlist.Add(str_raidcom_get_ldevlist_def_availabale_pattern_vvol_ldev, str_array_raidcom_get_ldevlist_def_vvol_ldev_hdp)
        dic_of_array_raidcom_get_ldevlist.Add(str_raidcom_get_ldevlist_def_availabale_pattern_vvol_ldev, str_array_raidcom_get_ldevlist_def_vvol_ldev_hdt)
        If IsNothing(str_raidcom_data_available) Then
            str_raidcom_data_available = str_raidcom_get_ldevlist_def_availabale_pattern_vvol_ldev
        Else
            str_raidcom_data_available = str_raidcom_data_available & "," & str_raidcom_get_ldevlist_def_availabale_pattern_vvol_ldev
        End If

        'clear variables
        boolean_header_set_physical_ldev = Nothing
        boolean_header_set_vvol_ldev_hdp = Nothing
        boolean_header_set_vvol_ldev_hdt = Nothing
        int_number_of_elements_of_the_vvol_ldev_hdp = Nothing
        int_number_of_elements_of_the_vvol_ldev_hdt = Nothing
        int_column_counter_hdt = Nothing
        int_column_counter_hdp = Nothing

        dict_raidcom_parse_get_ldevlist_def = dic_of_array_raidcom_get_ldevlist

        str_array_raidcom_get_ldevlist_def_physical_ldev = Nothing
        str_array_raidcom_get_ldevlist_def_vvol_ldev_hdp = Nothing
        str_array_raidcom_get_ldevlist_def_vvol_ldev_hdt = Nothing

        'V-Vol
        '------------------
        'Serial#  : 86175
        'LDEV : 1
        'SL : 0
        'CL : 0
        'VOL_TYPE: OPEN -V - CVS
        'VOL_Capacity(BLK) : 209715200
        'NUM_PORT : 2
        'PORTs : CL3-R-1 2 arguin : CL4-R-1 2 arguin
        'F_POOLID: NONE()
        'VOL_ATTR: CVS() : HDP() : HDT()
        'B_POOLID : 0
        'LDEV_NAMING:
        'STS:    NML()
        'OPE_TYPE: RBL()
        'OPE_RATE : 100
        'MP# : 5
        'SSID : 2000
        'Used_Block(BLK) : 181235712
        'TIER_Relocation: Enable()
        'TIER_level : 4
        'TIER#1(MB) : 0
        'TIER#2(MB) : 88200
        'TIER#3(MB) : 294
        'TIER_Alloc_level: H()

        'physical Volume
        '------------------
        'Serial#  : 86175
        'LDEV:   f0ef()
        'SL : 0
        'CL : 0
        'VOL_TYPE: OPEN -V - CVS
        'VOL_Capacity(BLK) : 5736536064
        'NUM_LDEV : 1
        'LDEVs:  f0ef()
        'NUM_PORT : 0
        'PORTs:
        'F_POOLID : 0
        'VOL_ATTR: CVS() : POOL() : ENCD()
        'RAID_LEVEL: RAID6()
        'RAID_TYPE   : 6D+2P
        'NUM_GROUP : 1
        'RAID_GROUPs : 07-04
        'DRIVE_TYPE: DKS2C -H2R0SS
        'DRIVE_Capa : 3884114598
        'LDEV_NAMING: SAS -Pool - VOL236
        'STS:    NML()
        'OPE_TYPE: NONE()
        'OPE_RATE : 100
        'MP# : 2
        'SSID:   F000()




        'Serial#  : 53476
        'Serial#: Product serial number.

        'LDEV : 0
        'LDEV: LDEV number.

        'SL : 0
        'SL: SLPR information ("0" is displayed for storage systems other than USP V/VM).

        'CL : 0
        'CL: CLPR information.

        'VOL_TYPE: OPEN -V - CVS

        'VOL_Capacity(BLK) : 1048576000
        'VOL_Capacity (BLK): capacity of LDEV in block size.

        'NUM_PORT : 28
        'NUM_PORT: number of ports defined to the paths for relevant LDEV.

        'PORTs : CL5-E-8 0 sf00060a : CL6-H-23 37 bkpmo618p01 : CL6-H-22 37 bkpfe618p01 : CL6-H-21 37 bkpfe40p02 : CL6-H-20 37 bkpmo40p01 : CL6-H-19 37 bkpmo40p02 : CL6-H-11 4 bkpfe40p01 : CL2-F-13 0 sbef38esx4016 : CL2-F-12 0 sbef38esx4015 : CL2-F-11 5 sbef38esx4014 : CL2-F-10 5 sbef38esx4013 : CL2-F-9 5 sbef38esx4012 : CL2-F-8 5 sbef38esx4011 : CL6-E-9 0 sf00061a : CL6-E-8 0 sf00060a : CL5-H-23 37 bkpmo618p01 : CL5-H-22 37 bkpfe618p01 : CL5-H-21 37 bkpmo40p02 : CL5-H-20 37 bkpmo40p01 : CL5-H-19 37 bkpfe40p02 : CL5-H-11 4 bkpfe40p01 : CL1-F-13 0 sbef38esx4016 : CL1-F-12 0 sbef38esx4015 : CL1-F-11 5 sbef38esx4014 : CL1-F-10 5 sbef38esx4013 : CL1-F-9 5 sbef38esx4012 : CL1-F-8 5 sbef38esx4011 : CL5-E-9 0 sf00061a

        'F_POOLID: NONE()
        'F_POOLID: pool ID if the LDEV is a component of the pool. In other cases, "NONE" is displayed.

        'VOL_ATTR: CVS() : HDP() : HDT()
        'VOL_ATTR: attributes of the LDEV.
        '• CMD: Command device (open-systems only)
        '• CLUN: Cache LUN (DCR)
        '• CVS: CVS volume
        '• LUSE: LUSE volume
        '• ALUN: Volume Migration volume
        '• ELUN: External volume
        '• OLG: OpenLDEV Guard volume
        '• VVOL: V-VOL
        '• HORC: The remote copy pair volumes:
        '􀁼 TrueCopy, Universal Replicator, Universal Replicator for Mainframe: P -VOL Or S - VOL
        '􀁼 TrueCopy for Mainframe: M-VOL or R-VOL
        '􀁼 MRCF: ShadowImage volume (PVOL or SVOL)
        '􀁼 QS: Thin Image or Copy-on-Write Snapshot volume (PVOL or SVOL)
        '􀁼 JNL: JNL volume
        '􀁼 HDP: Dynamic Provisioning(HDP) or Dynamic Provisioning for Mainframe volume
        '􀁼 HDT: Dynamic Tiering (HDT) or Dynamic Tiering for Mainframe volume
        '􀁼 POOL: POOL volume
        '􀁼 QRD: Quorum disk
        '􀁼 ENCD: Encryption disk
        '􀁼 SYSD: System disk
        '􀁼 TSE: Dynamic Provisioning for Mainframe volumes that are used in FlashCopy SE.

        'B_POOLID : 0
        'B_POOL ID: Pool ID to which the LDEV is associated.

        'LDEV_NAMING:
        'LDEV_NAMING: nickname of the LDEV.

        'STS:    NML()
        '􀁼 NML: Normal
        '􀁼 BLK: Blocked
        '􀁼 BSY: Status is changing

        'OPE_TYPE: RLC()
        '􀁼 FMT: Formatting
        '􀁼 QFMT: Quick formatting
        '􀁼 CCOPY: Copying the collections
        '􀁼 CACCS: Accessing to collections
        '􀁼 NONE: Not in operation
        '􀁼 SHRD: Shredding
        '􀁼 ZPD: Page discarding
        '􀁼 SHRPL: Deleting from the pool
        '􀁼 RLC: Pool relocating
        '􀁼 RBL: Pool rebalancing

        'OPE_RATE : 100
        'OPE_RATE: progress of the format or shred operation. When the status is other than formatting or shredding, 100 is displayed. If the process ended abnormally, "BSY" is displayed on the "STS".

        'MP# : 5
        'MP#: MP blade ID.

        'SSID : 0004
        'SSID: storage subsystem ID number (hexadecimal). The Unified Storage VM does not support SSID but displays the specified value.

        'Used_Block(BLK) : 739479552
        'Used_Block(BLK): Number of blocks used in the pool.

        'TIER_Relocation: Enable()
        'TIER_Relocation: Status of the relocation setting:
        '• Enable: The status where the relocation is enabled
        '• Disable: The status where the relocation is disabled

        'TIER_level : 4
        'TIER_LEVEL: Shows the level of tiering policy that is used for reallocation.
        '• all: Shows that all tiers of the pool to which the relevant LDEV is allocated are being used.
        '• 1-5: Shows the tiering policy level that is configured to the relevant LDEV.
        '• 6-31: Shows the tiering policy (customized policy (1-26)) that is configured to the relevant LDEV. For details, see the Provisioning Guide or LUN Manager User Guide for the storage system.

        'TIER#1(MB) : 0
        'TIER#2(MB) : 355992
        'TIER#3(MB) : 5082

        'TIER_Alloc_level: H()
        'TIER_Alloc_level: Shows the new page assignment tier level.
        '• H: High
        '• M: Middle
        '• L: Low

        'TIER#1_Alloc_rate : MAX : 50 : MIN : 30
        'TIER#3_Alloc_rate : MAX : 50 : MIN : 30
        'TIER#1_Alloc_rate: Shows the Tier1 Max or Min value that is set in the tiering policy.
        'TIER#3_Alloc_rate: Shows the Tier3 Max or Min value that is set in the tiering policy.

    End Function

#End Region

#Region "DF Procedures"

    Public Function boolean_df_is_it_df(ByRef str_filepath As String) As Boolean
        ' check if the performance output is from DF800

        boolean_df_is_it_df = False

        'temp variables to open files
        Dim str_line As String = Nothing
        Dim obj_reader As System.IO.StreamReader = Nothing

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_filepath)

        str_line = obj_reader.ReadLine

        If InStr(str_line, "No.", Microsoft.VisualBasic.CompareMethod.Binary) <> 0 Then
            boolean_df_is_it_df = True
        End If

        obj_reader.Dispose()
        obj_reader.Close()
        obj_reader = Nothing
        str_line = Nothing

    End Function

    Public Function str_df_create_performance_files(ByVal directory As IO.DirectoryInfo) As String
        'this function creates the performance files like from high end storage

        str_df_create_performance_files = "-1"

        If directory.Exists Then

            If directory.GetFiles(str_df_pfm_file_filter).Length <> 0 Then

                'is the unzipped folder already created
                Dim directory_unzipped As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped)
                If Not directory_unzipped.Exists Then 'is it already extracted?
                    'create "UnZippedFiles" folder
                    directory_unzipped.Create()
                    directory_unzipped.Refresh()
                End If

                'create performance files was successful
                str_df_create_performance_files = "0"

                'temp variable
                Dim int_where_to_start_with_performance_values As Integer = Nothing
                'Dim i As Integer = Nothing

                'the value represents the number of the file that is processed
                Dim int_what_file_number_is_calculated As Integer = Nothing

                'temp variables to open files
                Dim str_line_now As String = Nothing
                Dim str_line_before As String = Nothing
                Dim obj_reader As System.IO.StreamReader = Nothing

                'we create files that look like high end performance exports

                'header info
                '-------------------
                'Port_IOPS.csv
                'Serial number : 86173(VSP)
                'From : 2012/05/18 17:00
                'To   : 2012/05/19 05:00
                'sampling rate : 1

                'data info
                '-------------------
                'No.,"time","CL1-A","CL5-A","CL7-A","CL1-B","CL3-B","CL5-B","CL7-B","CL1-C","CL3-C","CL5-C","CL7-C","CL1-D","CL3-D","CL5-D","CL7-D","CL1-E","CL3-E","CL5-E","CL7-E","CL1-F","CL3-F","CL5-F","CL7-F","CL1-G","CL3-G","CL5-G","CL7-G","CL1-H","CL3-H","CL5-H","CL7-H","CL2-A","CL6-A","CL8-A","CL2-B","CL4-B","CL6-B","CL8-B","CL2-C","CL4-C","CL6-C","CL8-C","CL2-D","CL4-D","CL6-D","CL8-D","CL2-E","CL4-E","CL6-E","CL8-E","CL2-F","CL4-F","CL6-F","CL8-F","CL2-G","CL4-G","CL6-G","CL8-G","CL2-H","CL4-H","CL6-H","CL8-H","CL1-J","CL3-J","CL5-J","CL7-J","CL1-K","CL3-K","CL5-K","CL7-K","CL1-L","CL3-L","CL5-L","CL7-L","CL1-M","CL3-M","CL5-M","CL7-M","CL1-N","CL3-N","CL5-N","CL7-N","CL1-P","CL3-P","CL5-P","CL7-P","CL1-Q","CL3-Q","CL5-Q","CL7-Q","CL1-R","CL3-R","CL5-R","CL7-R","CL2-J","CL4-J","CL6-J","CL8-J","CL2-K","CL4-K","CL6-K","CL8-K","CL2-L","CL4-L","CL6-L","CL8-L","CL2-M","CL4-M","CL6-M","CL8-M","CL2-N","CL4-N","CL6-N","CL8-N","CL2-P","CL4-P","CL6-P","CL8-P","CL2-Q","CL4-Q","CL6-Q","CL8-Q","CL2-R","CL4-R","CL6-R","CL8-R"
                '1,"2012/05/18 17:01",0,0,0,61,405,0,0,4,403,0,0,0,0,0,0,4,408,0,3,0,0,0,3,5,0,0,0,42,0,0,0,0,0,0,62,396,0,0,6,396,0,0,0,0,0,0,4,392,0,4,0,0,0,2,5,0,0,0,62,0,0,0,0,114,0,0,0,10,0,0,0,398,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,9,0,0,0,402,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

                Dim str_filename_csv As String = Nothing
                Dim str_filename_csv_possible As String = Nothing

                'to know what section it is to be able to create the right descriptor line
                ' example:  
                '0     A -> CTL0-A
                Dim str_section As String = Nothing

                Dim str_foldername_descriptor_name As String = Nothing

                Dim str_number As String = Nothing
                Dim str_serial As String = Nothing
                Dim str_from As String = Nothing
                Dim str_to As String = Nothing
                Dim str_sampling_rate As String = Nothing

                Dim date_from As Date = Nothing
                Dim date_to As Date = Nothing

                Dim arraylist_elements As New ArrayList

                Dim int_number_of_pfm_files As Integer = directory.GetFiles(str_df_pfm_file_filter).Length

                'if the unzipped folder exists and it is not empty then the function is stopped
                ' and no conversion of the pfm files is done
                If System.IO.Directory.GetDirectories(directory.FullName & "\" & str_export_foldername_unzipped).Length <> 0 Then
                    'create performance files was done before. there is no need to convert the pfm files
                    str_df_create_performance_files = "1"
                    Exit Function
                End If

                'progress bar and label counter
                int_what_file_number_is_calculated = 1

                For Each str_file As FileInfo In directory.GetFiles(str_df_pfm_file_filter)
                    'modular systems?
                    If boolean_df_is_it_df(str_file.FullName) Then

                        'otherwise if you loose focus on the application it does not show any progress and it seems to hang
                        Application.DoEvents()

                        'progress bar and label
                        Label_progress_chart.Text = "Creating Performance Files : " & int_what_file_number_is_calculated & "/" & directory.GetFiles(str_df_pfm_file_filter).Length
                        Label_progress_chart.Refresh()
                        Label_progress_chart.Visible = True
                        ProgressBar_chart.Value = CInt(Math.Abs(100 / directory.GetFiles(str_df_pfm_file_filter).Length) * int_what_file_number_is_calculated)
                        ProgressBar_chart.Refresh()
                        ProgressBar_chart.Visible = True

                        'open the stream and read it by line
                        obj_reader = New System.IO.StreamReader(str_file.FullName)

                        'get first line
                        str_line_now = obj_reader.ReadLine

                        'get the file number
                        str_number = Strings.Right(str_line_now, str_line_now.Length - 3)

                        'second line
                        str_line_now = obj_reader.ReadLine

                        If Not InStr(str_line_now, str_skipped_pfm_file, Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then
                            'get serial, from, to, sampling rate
                            'ex. 2011/12/15 11:06:18 - 2011/12/15 11:07:19 - SN:85012451

                            'Serial number : 86173(VSP)
                            str_serial = "Serial number : " & Strings.Right(str_line_now, str_line_now.Length - InStr(str_line_now, "SN:", Microsoft.VisualBasic.CompareMethod.Text) - 2) & "(DF800)"

                            str_to = Strings.Mid(str_line_now, InStr(str_line_now, " - ") + 3, InStrRev(str_line_now, " - ") + 3 - InStr(str_line_now, " - ") - 9)
                            str_from = Strings.Left(str_line_now, InStr(str_line_now, " - ") - 4)
                            'sampling rate : 1
                            date_from = New DateTime(CInt(Strings.Mid(str_from, 1, 4)), CInt(Strings.Mid(str_from, 6, 2)), CInt(Strings.Mid(str_from, 9, 2)), CInt(Strings.Mid(str_from, 12, 2)), CInt(Strings.Right(str_from, 2)), 0)
                            date_to = New DateTime(CInt(Strings.Mid(str_to, 1, 4)), CInt(Strings.Mid(str_to, 6, 2)), CInt(Strings.Mid(str_to, 9, 2)), CInt(Strings.Mid(str_to, 12, 2)), CInt(Strings.Right(str_to, 2)), 0)
                            str_sampling_rate = "sampling rate : " & CStr(DateDiff(DateInterval.Minute, date_from, date_to))
                            'From : 2012/05/18 17:00
                            str_from = "From : " & str_to
                            'To   : 2012/05/19 05:00
                            Dim int_test = CInt(Strings.Replace(str_sampling_rate, "sampling rate : ", ""))
                            str_to = "To   : " & DateAdd(Microsoft.VisualBasic.DateInterval.Minute, (int_number_of_pfm_files - 1) * CInt(Strings.Replace(str_sampling_rate, "sampling rate : ", "")), date_from).ToString("yyyy/MM/dd HH:mm", New CultureInfo("en-US"))
                            date_from = Nothing

                            'next line
                            str_line_now = obj_reader.ReadLine

                            'read through the file
                            Do
                                'str_df_port_section 'there are two columns that are specified for the element naming
                                'CTL  Port        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS) Read Hit(%) Write Hit(%)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S)
                                '  0     A                  212                  101                  110           6          100                    2                      1                       1

                                'str_df_rg_section 'there are two columns that are specified for the element naming
                                'CTL    RG        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS) Read Hit(%) Write Hit(%)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S)
                                '0     1                   95                   54                   40           0          100                    1                      0                       0
                                '0     2                   38                   13                   25           1          100                    0                      0                       0

                                'str_df_lu_section 'there are two columns that are specified for the element naming
                                'CTL    LU        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS) Read Hit(%) Write Hit(%)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S)
                                '  0     0                   19                    3                   15           2          100                    0                      0                       0
                                '  0     1                   13                    4                    8           1          100                    0                      0                       0

                                'str_df_cache_section 'there only one column is specified for the element naming
                                'CTL Write Pending Rate(%)
                                '  0                     5
                                '  1                     1
                                'CTL Clean Queue Usage Rate(%) Middle Queue Usage Rate(%) Physical Queue Usage Rate(%) Total Queue Usage Rate(%)
                                '  0                        95                          0                            5                       100
                                '  1                        99                          0                            1                       100

                                'str_df_processor_section, str_df_cache_section 'there only one column is specified for the element naming
                                'CTL Core Usage(%)
                                '  0    X        0
                                '  1    X        0
                                'CTL Host-Cache Bus Usage Rate(%) Drive-Cache Bus Usage Rate(%) Processor-Cache Bus Usage Rate(%)
                                '  0                            0                             0                                 0
                                '  1                            0                             0                                 0

                                'str_df_drive_section 'there are three columns that are specified for the element naming
                                'CTL Unit HDU        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S) Online Verify Rate(IOPS)
                                '  0    0   0                   12                    3                    8                    0                      0                       0                        0
                                '  0    0   1                   11                    3                    8                    0                      0                       0                        0

                                'str_df_drive_operate_section 'there are three columns that are specified for the element naming
                                'CTL Unit HDU Operating Rate(%)  Tag Count  Unload Time(min.)  Average Tag Count
                                '0    0   0                11          8                  0                  0
                                '0    0   1                 9          8                  0                  0

                                'str_df_backend_section 'there are three columns that are specified for the element naming
                                'CTL Path        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S) Online Verify Rate(IOPS)
                                '0    0                  339                  166                  173                    4                      2                       2                       49
                                '0    1                   81                   25                   55                    1                      0                       1                        0


                                'is it a section descriptor line then set the str_section variable
                                'this variable is used for the foldername of the section and the way the descriptor and then performance values are converted into a understandable value
                                'example "---- Port Information ----"
                                If InStr(str_line_now, " Information ----") <> 0 Then
                                    ' this variable is to specify how to handle the descriptor
                                    'example "---- Port Information ----" -> "Port"
                                    str_section = Strings.Replace(Strings.Replace(str_line_now, "---- ", ""), " Information ----", "")
                                End If

                                Do

                                    If InStr(str_line_now, str_df_descriptor_identifier) <> 0 Then 'descriptor line

                                        str_line_before = str_line_now
                                        str_line_now = obj_reader.ReadLine

                                        'add descriptor line to arraylist
                                        arraylist_elements.Add(str_df_put_descriptorline_2_csv(str_line_before, str_line_now, CChar(",")))

                                        'create files for each parameter in the export files
                                        'start with parameter 3 (start with 1)
                                        Select Case str_section
                                            Case str_df_name_cache
                                                If Not InStr(CStr(arraylist_elements(0)), str_df_name_cache_partitition) <> 0 Then
                                                    ' if it is only one column descriptor
                                                    int_where_to_start_with_performance_values = 2
                                                Else
                                                    ' if it is two column descriptor
                                                    int_where_to_start_with_performance_values = 3
                                                End If
                                            Case str_df_name_drive, str_df_name_drive_operate
                                                ' drive has 3 columns of description
                                                int_where_to_start_with_performance_values = 4
                                            Case Else
                                                'default is 2 columns for the description
                                                int_where_to_start_with_performance_values = 3
                                        End Select

                                        'performance line to arraylist
                                        Do
                                            arraylist_elements.Add(str_df_put_performanceline_2_csv(str_line_now, CChar(",")))
                                            'next line
                                            str_line_now = obj_reader.ReadLine

                                        Loop Until obj_reader.EndOfStream Or InStr(str_line_now, str_df_descriptor_identifier) <> 0 Or InStr(str_line_now, "----") <> 0

                                        For counter As Integer = int_where_to_start_with_performance_values To csv_length(CStr(arraylist_elements(0)), CChar(","))

                                            'the regex replaces the chars that are not allowed
                                            str_filename_csv_possible = Regex.Replace(csv_extract(CStr(arraylist_elements(0)), counter, CChar(",")) & ".csv", "[\/:<>]", "_")
                                            'set the path to the next file created

                                            Select Case str_section
                                                Case str_df_name_cache
                                                    If InStr(CStr(arraylist_elements(0)), str_df_name_cache_partitition) <> 0 Then
                                                        'filename as the parameter name but with partition on the beginning
                                                        str_filename_csv = directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section & "\" & str_df_name_cache_partitition & "_" & str_filename_csv_possible
                                                    Else
                                                        'filename as the parameter name
                                                        str_filename_csv = directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section & "\" & str_filename_csv_possible
                                                    End If
                                                Case str_df_name_processor
                                                    'filename as the parameter name but with partition on the beginning
                                                    '
                                                    str_filename_csv = directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section & "\" & Regex.Replace(csv_extract(CStr(arraylist_elements(0)), counter - 1, CChar(",")), "[\/:<>]", "_") & " " & str_filename_csv_possible
                                                Case Else
                                                    str_filename_csv = directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section & "\" & str_filename_csv_possible
                                            End Select


                                            'create file if it does not exist
                                            If Not File.Exists(str_filename_csv) Then


                                                Dim obj_filstream As FileStream = File.Create(str_filename_csv)
                                                obj_filstream.Close()
                                                obj_filstream = Nothing

                                                Using obj_writer As StreamWriter = New StreamWriter(str_filename_csv)

                                                    'create header info of the file

                                                    'LU_Read_Response.csv()
                                                    'Serial number : 86173(VSP)
                                                    'From : 2012/05/18 17:00
                                                    'To   : 2012/05/19 05:00
                                                    'sampling rate : 1
                                                    obj_writer.WriteLine(str_filename_csv_possible)
                                                    obj_writer.WriteLine(str_serial)
                                                    obj_writer.WriteLine(str_from)
                                                    obj_writer.WriteLine(str_to)
                                                    obj_writer.WriteLine(str_sampling_rate)
                                                    obj_writer.WriteLine()

                                                    'create the descriptor line of the file
                                                    'No.,"time","CL1-A.01(ss001378).0000","CL1-A.02(ss001379).0000","CL1-A.03(ss001382).0000"
                                                    obj_writer.Write(Chr(34) & "No." & Chr(34) & "," & Chr(34) & "time" & Chr(34))

                                                    'add all the descriptor values (ex. CTL0-PortA
                                                    For Each line As String In arraylist_elements
                                                        If Not InStr(line, str_df_descriptor_identifier) <> 0 Then

                                                            Select Case str_section
                                                                Case str_df_name_port
                                                                    'No.,"time",CTL1-A
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & csv_extract(line, 2, CChar(",")))
                                                                Case str_df_name_rg
                                                                    'No.,"time",CTL0-RG0
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & str_df_name_rg & str_add_leading_zero(csv_extract(line, 2, CChar(",")), 2))
                                                                Case str_df_name_dppool
                                                                    'No.,"time",CTL0-Pool0
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & Strings.Right(str_df_name_dppool, 4) & csv_extract(line, 2, CChar(",")))
                                                                Case str_df_name_lu
                                                                    'No.,"time",CTL0-LU0
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & str_df_name_lu & str_add_leading_zero(csv_extract(line, 2, CChar(",")), 4))
                                                                Case str_df_name_cache
                                                                    'if the description has a partition column add it to the description
                                                                    If InStr(CStr(arraylist_elements(0)), str_df_name_cache_partitition) <> 0 Then
                                                                        'No.,"time",CTL0-Partition0
                                                                        obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & str_df_name_cache_partitition & csv_extract(line, 2, CChar(",")))
                                                                    Else
                                                                        'No.,"time",CTL0
                                                                        obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")))
                                                                    End If
                                                                Case str_df_name_processor
                                                                    'if the description has a core column add it to the description
                                                                    If InStr(CStr(arraylist_elements(0)), str_df_name_processor_core) <> 0 Then
                                                                        'No.,"time",CTL0-Core0
                                                                        obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-" & str_df_name_processor_core & csv_extract(line, 2, CChar(",")))
                                                                    Else
                                                                        'No.,"time",CTL0
                                                                        obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")))
                                                                    End If
                                                                Case str_df_name_drive, str_df_name_drive_operate
                                                                    'No.,"time",CTL0-Unit0-HDU0
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-Unit" & str_add_leading_zero(csv_extract(line, 2, CChar(",")), 2) & "-HDU" & str_add_leading_zero(csv_extract(line, 3, CChar(",")), 2))
                                                                Case str_df_name_backend
                                                                    'No.,"time",CTL0-Path0
                                                                    obj_writer.Write("," & str_df_descriptor_identifier & csv_extract(line, 1, CChar(",")) & "-Path" & csv_extract(line, 2, CChar(",")))
                                                                Case Else

                                                            End Select

                                                        End If
                                                    Next

                                                    obj_writer.WriteLine()
                                                    obj_writer.Close()
                                                    obj_writer.Dispose()
                                                End Using

                                            End If


                                            'open file for append and add a performance line
                                            Using obj_writer As StreamWriter = New StreamWriter(str_filename_csv, True)
                                                '1,"2012/05/18 17:01",0,0,0,0,0,11,0,0,0,0,0,0,0,0
                                                obj_writer.Write(str_number & "," & Chr(34) & date_to.ToString("yyyy/MM/dd HH:mm", New CultureInfo("en-US")) & Chr(34))


                                                For Each line In arraylist_elements
                                                    If Not InStr(CStr(line), str_df_descriptor_identifier) <> 0 Then 'descriptor line

                                                        'missing! performance data does not look the same in each section. correct!

                                                        obj_writer.Write("," & csv_extract(CStr(line), counter, CChar(",")))

                                                    End If
                                                Next

                                                obj_writer.WriteLine()
                                                obj_writer.Close()
                                                obj_writer.Dispose()
                                            End Using

                                        Next

                                        int_where_to_start_with_performance_values = Nothing

                                        'clear arraylist 
                                        arraylist_elements.Clear()

                                    Else
                                        'if this is a descriptor line create a folder for it
                                        'create descriptor folder if it does not exist
                                        If Not System.IO.Directory.Exists(directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section) Then
                                            System.IO.Directory.CreateDirectory(directory.FullName & "\" & str_export_foldername_unzipped & "\" & str_section)
                                            str_foldername_descriptor_name = str_line_now
                                        End If
                                        'next line
                                        str_line_now = obj_reader.ReadLine
                                    End If

                                Loop Until InStr(str_line_now, "----") <> 0 Or obj_reader.EndOfStream

                            Loop Until obj_reader.EndOfStream

                            str_line_now = Nothing
                            str_line_before = Nothing

                            obj_reader.Close()
                            obj_reader.Dispose()
                            obj_reader = Nothing

                        End If

                        'progress bar and label counter
                        int_what_file_number_is_calculated = int_what_file_number_is_calculated + 1
                    End If

                Next

                str_filename_csv = Nothing
                str_serial = Nothing
                str_from = Nothing
                str_to = Nothing
                str_sampling_rate = Nothing
                str_number = Nothing
                int_what_file_number_is_calculated = Nothing

            Else

                'is the unzipped folder already created
                Dim directory_unzipped As New IO.DirectoryInfo(path_performance_export_data & "\" & str_export_foldername_unzipped)
                If directory_unzipped.Exists Then 'is it already extracted?
                    str_df_create_performance_files = "0"
                End If



            End If

        End If

    End Function

    Function str_df_put_descriptorline_2_csv(ByVal str_descriptor_line As String, ByVal str_performance_line As String, ByVal char_separator As Char) As String
        ' get the comma separated descripter line back

        ' example
        ' CTL Host-Cache Bus Usage Rate(%) Drive-Cache Bus Usage Rate(%) Processor-Cache Bus Usage Rate(%)
        ' ->
        ' CTL,Host-Cache Bus Usage Rate(%),Drive-Cache Bus Usage Rate(%),Processor-Cache Bus Usage Rate(%)
        '
        ' to extract the descriptor line you need to have the first performance line
        ' too to know when the descriptor name ends and the next one begins

        str_df_put_descriptorline_2_csv = "-1"

        Dim str_temp As String = Nothing
        Dim int_index As Integer = 0
        Dim int_index_element_before As Integer = 1
        Dim int_index_descriptor As Integer = 0

        'CTL  Port        IO Rate(IOPS)      Read Rate(IOPS)     Write Rate(IOPS) Read Hit(%) Write Hit(%)    Trans. Rate(MB/S) Read Trans. Rate(MB/S) Write Trans. Rate(MB/S)
        '  0     A                  212                  101                  110           6          100                    2                      1                       1

        Do
            If str_performance_line(int_index) <> " " Then 'look for a character that is not " "
                If str_performance_line(int_index + 1) = " " Then 'the next char should be a " ". so i can be sure that i have the index of the end of the descriptor
                    If str_temp = Nothing Then
                        str_temp = str_temp & Strings.Trim(Strings.Mid(str_descriptor_line, int_index_element_before, int_index + 2 - int_index_element_before))
                    Else
                        str_temp = str_temp & char_separator & Strings.Trim(Strings.Mid(str_descriptor_line, int_index_element_before, int_index + 2 - int_index_element_before))
                    End If

                    int_index_element_before = int_index + 2
                End If
            End If

            int_index = int_index + 1

            If int_index + 1 = str_performance_line.Length Then
                If str_temp = Nothing Then
                    str_temp = str_temp & Strings.Trim(Strings.Mid(str_descriptor_line, int_index_element_before, int_index + 2 - int_index_element_before))
                Else
                    str_temp = str_temp & char_separator & Strings.Trim(Strings.Mid(str_descriptor_line, int_index_element_before, int_index + 2 - int_index_element_before))
                End If
            End If


        Loop Until str_performance_line.Length <= int_index + 1

        str_df_put_descriptorline_2_csv = str_temp


    End Function

    Function str_df_put_performanceline_2_csv(ByVal str_performance_line As String, ByVal char_separator As Char) As String
        ' get the comma separated performance line back

        ' example
        '   0                            0                             0                                 0
        '->
        ' 0,0,0,0

        str_df_put_performanceline_2_csv = "-1"

        Dim str_temp As String = Nothing
        Dim int_index As Integer = 0
        Dim int_index_element_start As Integer = 0

        If str_performance_line.Length <> 0 Then
            Do

                'a performance value has started
                int_index_element_start = int_index

                If str_performance_line(int_index) <> " " Then 'look for a character that is not " "

                    'the next char should be a " ". so i can be sure that i have the index of the end of the performance value
                    Do
                        int_index = int_index + 1
                    Loop Until str_performance_line(int_index) = " " Or str_performance_line.Length = int_index + 1

                    If str_temp = Nothing Then
                        str_temp = str_temp & Strings.Mid(str_performance_line, int_index_element_start + 1, int_index - int_index_element_start)
                    Else
                        str_temp = str_temp & char_separator & Strings.Mid(str_performance_line, int_index_element_start + 1, int_index + 1 - int_index_element_start)
                    End If

                End If

                int_index = int_index + 1

                If int_index + 1 = str_performance_line.Length Then
                    If str_temp = Nothing Then
                        str_temp = str_temp & Strings.Mid(str_performance_line, int_index + 1, 1) 'int_index - int_index_element_start)
                    Else
                        str_temp = str_temp & char_separator & Strings.Mid(str_performance_line, int_index + 1, 1) 'int_index - int_index_element_start)
                    End If
                End If

            Loop Until str_performance_line.Length <= int_index + 1

            'delete all " " spaces.
            str_df_put_performanceline_2_csv = Strings.Replace(str_temp, " ", "")
        End If

    End Function


#End Region

#Region "calculation procedures"

    ''' <summary>
    ''' str_df_create_response_time_files creates out of a lot of data the response time of the lun.
    ''' simple:
    ''' LUN response time = 1 / (total read and write counts) * ((read cmd job * read cmd time) + (read cmd hit count * read cmd hit time) + (read cmd miss count * read cmd miss time) + (write cmd job * write cmd time) + (write cmd hit count * write cmd hit time) + (write cmd miss count * write cmd miss time))
    ''' in full detail:
    ''' LUN response time = 1 / (Read CMD Job Count + Read CMD Hit Count + Read CMD Miss Count + Write CMD Job Count + Write CMD Hit Count + Write CMD Miss Count) * ((Write CMD Job Count * Write CMD Job Time) + (Write CMD Hit Count * Write CMD Hit Time) + (Write CMD Miss Count * Write CMD Miss Time) + (Read CMD Job Count * Read CMD Job Time) + (Read CMD Hit Count * Read CMD Hit Time) + (Read CMD Miss Count * Read CMD Miss Time))
    ''' </summary>
    ''' <param name="array_str_performance_data">The "array_str_performance_data" array contains the values of all parameters to calculate the response time of all luns over the whole timespan.</param>
    ''' <param name="arraylist_str_element_name">The "arraylist_str_element_name" is an arraylist of string that contains the labels of each element. this is used to know the name of each element and how many times the formula in "str_what _to_do" should be repeated and to know how many columns to skip to get to the right data</param>
    ''' <param name="str_formula">The "str_what_to_do" contains what to do with the parameters of the element.
    ''' for example: the array contains the following colums config:
    ''' time,lun0000 write iops,lun00001 write iops,lun0000 read iops,lun00001 read iops,lun0000 write transfer,lun0001 writen transfer,lun0000 read transfer,lun0001 read transfer
    ''' the formula (:1:+:2:)/(:3:+:4:) in str_what_to_do" would mean:
    ''' ("lun0000 write iops"+"lun0000 read iops")/("lun0000 write transfer"+"lun0000 read transfer")
    ''' and the variable "int_how_many_elements" contains 2 that would mean:
    ''' the line above is repeated 1 time (2 executions)
    ''' so LU0000 and lu0001 are processed.
    ''' ''' </param>
    ''' <param name="str_filename">The "str_filename" contains the filename that will be in the first line of the file.
    ''' </param>
    Function array_str_create_array_calculated_with_formula(ByRef array_str_performance_data As Array, ByVal int_array_descriptor_line_count As Integer, ByVal arraylist_str_element_name As ArrayList, ByVal str_formula As String, ByVal str_filename As String, Optional ByVal str_progress_bar_text As String = "") As Array

        '---------------------------------------
        'progressbar
        'calculate lines in file for the progressbar
        Label_progress_chart.TextAlign = ContentAlignment.TopCenter
        Label_progress_chart.Text = "Calculate performance data " & str_progress_bar_text
        Label_progress_chart.Visible = True
        Label_progress_chart.Update()
        ProgressBar_chart.Value = 0
        ProgressBar_chart.Visible = True
        ProgressBar_chart.Update()
        '-----------------------------------------

        'create array of "input array" row lines and "int_how_many_elements" +1 (time) columns
        Dim array_str_performance_data_after_formula(UBound(array_str_performance_data, 1), arraylist_str_element_name.Count) As String

        'filename
        array_str_performance_data_after_formula(0, 0) = CStr(str_filename)

        'fill in header info
        For i As Integer = 1 To int_array_descritor_line_count - 1 Step 1
            array_str_performance_data_after_formula(i, 0) = CStr(array_str_performance_data.GetValue(i, 1))
        Next

        'go through all elements to fill in header info
        For int_elements As Integer = 1 To arraylist_str_element_name.Count Step 1

            'header info
            For i As Integer = 1 To int_array_descritor_line_count - 1 Step 1
                array_str_performance_data_after_formula(i, int_elements) = CStr(array_str_performance_data.GetValue(i, int_elements))
            Next

            'label
            'first i take the label of the first column
            array_str_performance_data_after_formula(int_array_descritor_line_count, int_elements) = CStr(arraylist_str_element_name(int_elements - 1))

        Next


        Dim int_progress_bar_update_counter As Integer = 0
        'go through all performance lines
        For int_row_counter = int_array_descritor_line_count + 1 To UBound(array_str_performance_data, 1) Step 1

            'ten updates for an action
            If int_progress_bar_update_counter = CInt(UBound(array_str_performance_data, 1) / 10) Then

                '---------------------------------------
                'progressbar
                'calculate lines in file for the progressbar
                Label_progress_chart.TextAlign = ContentAlignment.TopCenter
                Label_progress_chart.Text = "Calculate performance data " & str_progress_bar_text
                Label_progress_chart.Visible = True
                Label_progress_chart.Update()
                ProgressBar_chart.Value = CInt(100 / CInt(UBound(array_str_performance_data, 1)) * int_row_counter)
                ProgressBar_chart.Visible = True
                ProgressBar_chart.Update()
                '-----------------------------------------

                int_progress_bar_update_counter = 0
            Else
                int_progress_bar_update_counter = int_progress_bar_update_counter + 1
            End If

            'row time 
            array_str_performance_data_after_formula(int_row_counter, 0) = CStr(array_str_performance_data.GetValue(int_row_counter, 0))

            'go through all elements in a performance line
            For int_elements As Integer = 1 To arraylist_str_element_name.Count Step 1

                'calculation
                array_str_performance_data_after_formula(int_row_counter, int_elements) = CStr(dbl_calculate(array_str_performance_data, str_formula, int_row_counter, arraylist_str_element_name.Count, int_elements))

            Next

        Next

        'return value
        array_str_create_array_calculated_with_formula = array_str_performance_data_after_formula

        'free variables
        array_str_performance_data_after_formula = Nothing

        'hide progress bar
        Label_progress_chart.Visible = False
        Label_progress_chart.Update()
        ProgressBar_chart.Visible = False
        ProgressBar_chart.Update()

    End Function

    ''' <summary>
    ''' Dbl_calculates calculates a value out from the formula.
    ''' </summary>
    ''' <param name="array_str_performance_data">The array_str_performance_data.</param>
    ''' <param name="str_formula">The str_formula contains the formula.</param>
    ''' <param name="int_row">The int_row tells you what row in the array you have to take the values from.</param>
    ''' <param name="int_total_element_count">The int_total_element_count tells you how many elements you have in the array. this is important to know how many colums to jump to get the next value. example: int_total_element_count is 3 and the formula is :1:+:2:. the to get element :2: you have to jump 3 columns</param>
    ''' <param name="int_element_number">The int_element_number you know what field to get the values from. if it is 2 (second element of the section) then this means that :1: is column 2 (0 is time, 1 is the first element and 2 is the second element.</param>
    ''' <returns></returns>
    Function dbl_calculate(ByRef array_str_performance_data As Array, ByVal str_formula As String, ByVal int_row As Integer, ByVal int_total_element_count As Integer, ByVal int_element_number As Integer) As Double

        dbl_calculate = 0

        Dim str_formula_with_values As String = str_formula
        Dim result As String = Nothing
        Dim int_how_many_prameters_in_formula As Integer = 0

        'find out how many :1: elements are in the formula
        '1/(:7:+:9:+:11:+:1:+:3:+:5:)*((:7:*:8:)+(:9:*:10:)+(:11:*:12)+(:1:*:2:)+(:3:*:4:)+(:5:*:6:)
        Dim int_count As Integer = 0
        For Each chr_char As Char In str_formula
            If chr_char = CChar(":") Then int_count += 1
        Next
        int_count = CInt(int_count / 2)

        'a maximum of 100 parameters are allowed
        If int_count > 100 Then
            MsgBox("PAT ERROR: dbl_calculate : In a formula there should not be more than 100 elements.")
            Exit Function
        End If

        'replace the :1: values with the real values of the array
        int_count = 1
        Do Until InStr(str_formula_with_values, ":", Microsoft.VisualBasic.CompareMethod.Text) = 0
            'if the ":1:" parameter exists replace the variable with the value
            If InStr(str_formula, ":" & CStr(int_count) & ":", Microsoft.VisualBasic.CompareMethod.Text) <> 0 Then

                'if it is not a number replace by a zero
                If Not IsNumeric(array_str_performance_data.GetValue(int_row, int_element_number + ((int_count - 1) * int_total_element_count))) Then
                    'replace this variable with a zero
                    str_formula_with_values = Strings.Replace(str_formula_with_values, ":" & CStr(int_count) & ":", CStr(0))
                Else
                    'is a number
                    'replace negative numbers by a zero
                    If CDbl(array_str_performance_data.GetValue(int_row, int_element_number + ((int_count - 1) * int_total_element_count))) < 0 Then
                        'negative number
                        'replace by a zeeo
                        str_formula_with_values = Strings.Replace(str_formula_with_values, ":" & CStr(int_count) & ":", CStr(0))
                    Else
                        'positive number or zero
                        str_formula_with_values = Strings.Replace(str_formula_with_values, ":" & CStr(int_count) & ":", CStr(array_str_performance_data.GetValue(int_row, int_element_number + ((int_count - 1) * int_total_element_count))))
                    End If

                End If

            End If

            int_count = int_count + 1
        Loop

        'normal calculation
        Try
            result = evaluator1.Eval(str_formula_with_values).ToString
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try

        'if an indefinit result for example (1/0) occures the use 0
        If InStr(result, "n. def.") <> 0 Then
            result = "0"
        End If

        dbl_calculate = CDbl(result)


        Return dbl_calculate
    End Function

#End Region

#Region "Helpful Procedures"


    ''' <summary>
    ''' Int_save_file_out_of_arrays saves the performance data of the array_str_performance_data to a file at acertain location.
    ''' </summary>
    ''' <param name="array_str_performance_data">The array_str_performance_data contains all perormance data.</param>
    ''' <param name="str_filepath">The str_filepath contains the filepath (filename and path).</param>
    ''' <param name="int_array_descriptor_line_count">The int_array_descriptor_line_count contains how many descriptor lines are in the array.</param>
    ''' <returns></returns>
    Function int_save_file_out_of_array(ByRef array_str_performance_data As Array, ByVal str_filepath As String, ByVal int_array_descriptor_line_count As Integer) As Integer

        'does the directory exists? if not exit function
        If Not System.IO.Directory.Exists(Strings.Left(str_filepath, InStrRev(str_filepath, "\"))) Then
            MsgBox("PAT ERROR: Directory to write to does not exist. : int_save_file_out_of_array")
            int_save_file_out_of_array = -1
            Exit Function
        End If

        Dim objWriter As New System.IO.StreamWriter(str_filepath)

        'Total Average Tag Count.csv
        'Serial number : 85012451(DF800)
        'From : 2011/12/15 11:07
        'To   : 2011/12/15 11:36
        'sampling rate : 1

        'No.,"time",CTL0-LU0000,CTL0-LU0001,CTL0-LU0002,CTL0-LU0003,CTL0-LU0004,CTL0-LU0005,CTL0-LU0006,CTL0-LU0007,CTL0-LU0008,CTL0-LU0009,CTL0-LU0010,CTL0-LU0011

        'header info
        objWriter.WriteLine(array_str_performance_data.GetValue(0, 0))
        For i = 1 To int_array_descriptor_line_count - 4 Step 1
            objWriter.WriteLine(array_str_performance_data.GetValue(i, 1))
        Next
        objWriter.WriteLine()

        'descriptor line
        Dim str_temp As String = Nothing
        For j = 1 To UBound(array_str_performance_data, 2) Step 1
            If j = 1 Then
                'add 'No.,"time",'
                str_temp = Chr(34) & "No." & Chr(34) & "," & Chr(34) & "time" & Chr(34) & "," & Chr(34) & CStr(array_str_performance_data.GetValue(int_array_descriptor_line_count, j)) & Chr(34)
            Else
                str_temp = str_temp & "," & Chr(34) & CStr(array_str_performance_data.GetValue(int_array_descriptor_line_count, j)) & Chr(34)
            End If
        Next
        objWriter.WriteLine(str_temp)
        str_temp = Nothing

        'counter to add in the performance line
        Dim int_counter As Integer = 1
        For i = int_array_descriptor_line_count + 1 To UBound(array_str_performance_data, 1) Step 1
            For j = 0 To UBound(array_str_performance_data, 2) Step 1
                If j = 0 Then
                    str_temp = Chr(34) & CStr(int_counter) & Chr(34) & "," & Chr(34) & array_str_performance_data.GetValue(i, j).ToString & Chr(34)
                Else
                    str_temp = str_temp & "," & array_str_performance_data.GetValue(i, j).ToString
                End If
            Next
            int_counter = int_counter + 1
            objWriter.WriteLine(str_temp)
        Next
        int_counter = Nothing

        objWriter.Close()
        objWriter.Dispose()
        objWriter = Nothing
        str_temp = Nothing

        Return 0
    End Function


    Function boolean_is_in_array_descriptor_line(ByVal str_element_name As String, ByVal int_array_descriptor_number As Integer, ByVal array_performance_data As Array) As Boolean
        boolean_is_in_array_descriptor_line = False

        If UBound(array_performance_data, 2) > 0 Then
            For i As Integer = 1 To UBound(array_performance_data, 2) Step 1
                If CStr(array_performance_data.GetValue(int_array_descriptor_number, i)) = str_element_name Then
                    boolean_is_in_array_descriptor_line = True
                    Exit For
                End If

            Next
        End If

    End Function

    Function int_position_in_array_descriptor_line(ByVal str_element_name As String, ByVal int_array_descriptor_number As Integer, ByVal array_performance_data As Array) As Integer
        'if the element cannot be find the return value is set to 0
        int_position_in_array_descriptor_line = 0

        For i As Integer = 1 To UBound(array_performance_data, 2) Step 1
            If CStr(array_performance_data.GetValue(int_array_descriptor_number, i)) = str_element_name Then
                int_position_in_array_descriptor_line = i
                Exit For
            End If

        Next

    End Function

    Private Function str_get_descriptor_names_out_of_csv_file(ByVal str_path_and_filename As String, ByVal str_descripter_find_pattern As String) As String
        str_get_descriptor_names_out_of_csv_file = "-1"

        '-----------------------------------------
        Dim boolean_found_descriptor_line As Boolean = False
        Dim str_temp_element_list As String = Nothing
        Dim array_temp_descriptor_line As Array = Nothing

        'open the stream and read it by line
        Dim obj_reader As New System.IO.StreamReader(str_path_and_filename)
        Dim str_line As String = obj_reader.ReadLine

        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()
        'next line
        str_line = obj_reader.ReadLine()

        Do
            'next line
            str_line = obj_reader.ReadLine()

            If InStr(str_line, str_descripter_find_pattern) <> 0 Then

                array_temp_descriptor_line = str_line.Split(CChar(","))
                For i As Integer = 2 To array_temp_descriptor_line.Length - 1 Step 1
                    If IsNothing(str_temp_element_list) Then
                        str_temp_element_list = array_temp_descriptor_line.GetValue(i).ToString
                    Else
                        str_temp_element_list = str_temp_element_list & "," & array_temp_descriptor_line.GetValue(i).ToString
                    End If
                Next
                array_temp_descriptor_line = Nothing

            End If

        Loop Until obj_reader.EndOfStream
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing
        str_line = Nothing

        str_get_descriptor_names_out_of_csv_file = Strings.Replace(str_temp_element_list, Chr(34), "")
        str_temp_element_list = Nothing

    End Function

    'this function combines the perf data elements even if they are from multiple element lines
    Private Function str_raid_performance_data_create_elements(ByVal path_and_filename As String) As String
        'go through the file and look if there are several groups of data
        'clear variables
        Dim str_elements As String = "-1"
        Dim obj_reader As System.IO.StreamReader = Nothing
        Dim str_line As String = Nothing
        Dim str_date_temp As String = Nothing

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(path_and_filename)
        str_line = obj_reader.ReadLine
        'go through all lines in the file
        Do While obj_reader.Peek() <> -1
            If InStr(str_line, Chr(34) & "No." & Chr(34)) <> 0 Then
                If str_elements = "-1" Then
                    str_elements = str_line
                Else
                    '"No.","time","1-1","1-2",.........,"15-16"
                    '"No.","time","19-1","19-2","19-3"
                    str_elements = str_elements & Strings.Right(str_line, str_line.Length - 12)
                End If

            End If

            'next line
            str_line = obj_reader.ReadLine()
        Loop
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing

        str_raid_performance_data_create_elements = str_elements

        str_line = Nothing
    End Function

    Public Function str_get_name_out_of_an_arraylist(ByRef arraylist_in As ArrayList, ByVal what_entry_do_you_look_for As String, ByVal separator As Char) As String
        'this function is used to make a name conversion
        'input is an arraylist like this with 2 colums
        '"CHP00-1EU,CHP00(CL1-A/CL5-A)"
        '"CHP01-1EU,CHP01(CL3-A/CL7-A)"
        '"CHP02-1EU,CHP02(CL1-B/CL5-B)"
        'thins function gets the other name of the one you enter. 
        'for example 
        'get_name_out_of_an_arraylist(arraylist_uspv_chp,"CHP00-1EU") -> CHP00(CL1-A/CL5-A)
        'get_name_out_of_an_arraylist(arraylist_uspv_chp,"CHP00(CL1-A/CL5-A") -> CHP00-1EU)

        str_get_name_out_of_an_arraylist = "-1"

        For Each arraylist_item As String In arraylist_in
            If InStr(arraylist_item, what_entry_do_you_look_for) <> 0 Then

                Dim test As Integer = csv_get_position(arraylist_item, what_entry_do_you_look_for, separator)
                Select Case CStr(csv_get_position(arraylist_item, what_entry_do_you_look_for, separator))
                    Case "1"
                        str_get_name_out_of_an_arraylist = csv_extract(arraylist_item, 2, separator)
                        Exit For
                    Case "2"
                        str_get_name_out_of_an_arraylist = csv_extract(arraylist_item, 1, separator)
                        Exit For
                    Case Else
                End Select
            End If
        Next

    End Function

    Public Function str_what_storage_is_it(ByVal str_file_path As String) As String

        str_what_storage_is_it = "-1"

        'find out what type of storage system it is
        'temp variables to open files
        Dim str_line As String = Nothing
        Dim obj_reader As System.IO.StreamReader = Nothing

        'open the stream and read it by line
        obj_reader = New System.IO.StreamReader(str_file_path)

        'first line
        str_line = obj_reader.ReadLine()

        Do While obj_reader.Peek() <> -1

            'set the info of the chart
            If InStr(str_line, "Serial number :") <> 0 Then

                Dim str_storage_identifier As String = Strings.Mid(str_line, InStr(str_line, "(") + 1, Strings.InStr(str_line, ")") - Strings.InStr(str_line, "(") - 1)

                If (InStr(str_storage_identifier, str_storage_type_raid600) > 0) Then
                    str_what_storage_is_it = str_storage_type_raid600
                    Exit Do
                End If

                If (InStr(str_storage_identifier, str_storage_type_raid750) > 0) Then
                    str_what_storage_is_it = str_storage_type_raid750
                    Exit Do
                End If

                If (InStr(str_storage_identifier, str_storage_type_raid800) > 0) Then
                    str_what_storage_is_it = str_storage_type_raid800
                    Exit Do
                End If

                If InStr(str_storage_identifier, str_storage_type_vsp5000) > 0 Then
                    str_what_storage_is_it = str_storage_type_vsp5000
                    Exit Do
                End If

                If (InStr(str_storage_identifier, str_storage_type_G100) > 0) Or (InStr(str_storage_identifier, str_storage_type_G200) > 0) Or (InStr(str_storage_identifier, str_storage_type_G400_G600) > 0) Or (InStr(str_storage_identifier, str_storage_type_G800) > 0) Or (InStr(str_storage_identifier, str_storage_type_F370) > 0) Or (InStr(str_storage_identifier, str_storage_type_F700) > 0) Or (InStr(str_storage_identifier, str_storage_type_G900) > 0 Or (InStr(str_storage_identifier, str_storage_type_GF350) > 0 Or (InStr(str_storage_identifier, str_storage_type_GF130) > 0))) Then
                    str_what_storage_is_it = str_storage_type_hm800
                    Exit Do
                End If

                If (InStr(str_storage_identifier, str_storage_type_raid700) > 0) Then
                    str_what_storage_is_it = str_storage_type_raid700
                    Exit Do
                End If


            End If


            'next line
            str_line = obj_reader.ReadLine()

        Loop
        str_line = Nothing
        obj_reader.Close()
        obj_reader.Dispose()
        obj_reader = Nothing

        'error handling
        If str_what_storage_is_it = "-1" Then
            MessageBox.Show("This Storage is not supported by the PAT Tool and therefore the Program will close.", "Important Messaage")

        End If


    End Function

    Function str_add_leading_zero(ByVal str_item As String, int_length_of_number As Integer) As String
        'this function add a leading 0 in a string
        'what works
        'example: aaa23 int_length_of_number 3 -> aaa023
        'example: arut.23daf int_length_of_number 5 -> arut.00023daf
        'example: arut.2,3daf int_length_of_number 5 -> arut.00002,3daf
        'what does not work
        'example: arut.23daf int_length_of_number 1 -> "-1"

        Dim int_start As Integer = Nothing
        Dim int_end As Integer = Nothing
        Dim int_difference As Integer = Nothing
        Dim str_number As String = Nothing

        str_add_leading_zero = "-1"

        'empty string
        If str_item.Length = 0 Then
            Return "-1"
            Exit Function
        End If

        'go through string
        For int_i = 1 To str_item.Length
            Select Case Strings.Mid(str_item, int_i, 1)
                ' Is this character a number?
                Case "0" To "9"
                    'start of numbers in string
                    If str_number = Nothing Then
                        int_start = int_i
                    End If
                    ' Add it to the string being built.
                    str_number = str_number & Strings.Mid(str_item, int_i, 1)
                    'whats the last number in the string
                    int_end = int_i
            End Select

        Next

        'nothing changed. input will be output
        If str_number.Length = int_length_of_number Then
            Return str_number
        End If

        'error. the wished length of the number is shorter than the actual length of the number
        If str_number.Length > int_length_of_number Then
            Return "-1"
        End If

        'error. the wished length of the number is shorter than the actual length of the number
        If str_number.Length < int_length_of_number Then
            int_difference = int_length_of_number - str_number.Length

            str_add_leading_zero = Strings.Left(str_item, int_start - 1)

            For i As Integer = 1 To int_difference
                str_add_leading_zero = str_add_leading_zero & "0"
            Next

            str_add_leading_zero = str_add_leading_zero & Strings.Right(str_item, str_item.Length - int_start + 1)

            Return str_add_leading_zero
        End If


    End Function

    Public Function str_get_treeview_name(ByVal str_treeview_fullpath As String, ByVal str_treeview_level As String) As String
        'gets back the name of the specified level out of the fullpath
        'input -> "LU\CL1-A\01(testserver)","2"
        'output -> "01(testserver)

        str_get_treeview_name = "-1"

        Dim array_str_temp As String() = Split(str_treeview_fullpath, "\")

        str_get_treeview_name = array_str_temp(CInt(str_treeview_level))
        array_str_temp = Nothing

    End Function

    Public Function bl_all_files_exist(ByVal str_filepaths As Array) As Boolean

        bl_all_files_exist = True
        'see if all file paths exist
        For Each item As String In str_filepaths
            If Not System.IO.File.Exists(item) Then
                bl_all_files_exist = False
            End If
        Next

    End Function

    Private Function str_find_first_file_in_folder_and_subfolders(ByVal str_path_to_find_it_in As String, str_file_ending As String) As String

        str_find_first_file_in_folder_and_subfolders = "-1"

        Dim directory_unzipped As New IO.DirectoryInfo(str_path_to_find_it_in)
        If directory_unzipped.Exists Then
            'unzipped folder exists

            'is there a file in the root folder
            If directory_unzipped.GetFiles(str_file_ending).Length > 0 Then
                str_find_first_file_in_folder_and_subfolders = directory_unzipped.GetFiles(str_file_ending)(0).FullName
            Else
                'are there subfolders
                If directory_unzipped.GetDirectories.Length > 0 Then
                    For Each item_directory As DirectoryInfo In directory_unzipped.GetDirectories
                        If item_directory.GetFiles(str_file_ending).Length > 0 Then
                            For Each file In item_directory.GetFiles(str_file_ending)
                                If file.Length > 1500 Then
                                    str_find_first_file_in_folder_and_subfolders = item_directory.GetFiles(str_file_ending)(0).FullName
                                End If
                            Next
                        End If
                    Next
                End If
            End If
        End If

        directory_unzipped = Nothing

    End Function

    Function searchTreeview(ByVal SearchString As String, ByVal Nodes As TreeNodeCollection, _
Optional ByVal ExactMatch As Boolean = False, _
Optional ByVal Recursive As Boolean = True) _
As TreeNode
        Dim ret As TreeNode
        For Each tn As TreeNode In Nodes
            If ExactMatch = True Then
                If tn.Text = SearchString Then Return tn
            Else
                If tn.Text.IndexOf(SearchString) <> -1 Then Return tn
            End If

            If Recursive = True Then
                If tn.Nodes.Count > 0 Then
                    ret = searchTreeview(SearchString, tn.Nodes, ExactMatch, Recursive)
                    If Not ret Is Nothing Then Return ret
                End If
            End If
        Next
        Return Nothing
    End Function

    '---------------------------------------------------------------------------------------------------------------------
    ' start: configurationfile
    '---------------------------------------------------------------------------------------------------------------------

    ' write configuration
    Private Sub write_configuration()
        ' set encoding
        Dim enc As New System.Text.UnicodeEncoding

        ' XmlTextWriter-Objekt für unsere Ausgabedatei erzeugen: 
        Dim XMLobj As Xml.XmlTextWriter _
          = New Xml.XmlTextWriter(System.Environment.CurrentDirectory & "\" & str_configurationfilename, enc)

        With XMLobj

            ' formatting: by 4 
            .Formatting = Xml.Formatting.Indented
            .Indentation = 4

            'start document
            .WriteStartDocument()

            ' begin of the element configuration
            .WriteStartElement("configuration")

            'Beginn of the element "last_known_performance_export_location".  
            .WriteStartElement("last_known_performance_export_location")
            .WriteAttributeString("last_known_performance_export_location", path_performance_export_data)
            .WriteEndElement() ' </last_known_performance_export_location>

            'Beginn of the element "unzipped_folder_name".  
            .WriteStartElement("unzipped_folder_name")
            .WriteAttributeString("unzipped_folder_name", str_export_foldername_unzipped)
            .WriteEndElement() ' </unzipped_folder_name>

            'Beginn of the element "save_configuration".  
            .WriteStartElement("save_configuration")
            .WriteAttributeString("save_configuration", CStr(ToolStripMenuItem_save_configuration.Checked))
            .WriteEndElement() ' </unzipped_folder_name>

            .WriteEndElement() ' </configuration>

            ' ... and closes the xml-document (and the file) 
            .Close() ' Document 

        End With
    End Sub

    ' read configuration
    Private Sub read_configuration()

        '-------------------------------------------------------------------------
        'description:
        'read configurationfile and set the variables
        '-------------------------------------------------------------------------

        Dim myXmlSettings As New XmlReaderSettings()

        Using read_xml_configuration As XmlReader = XmlReader.Create(System.Environment.CurrentDirectory & "\" & str_configurationfilename, myXmlSettings)
            While read_xml_configuration.Read()

                'last_known_performance_export_location
                If read_xml_configuration.Name = "last_known_performance_export_location" Then
                    read_xml_configuration.MoveToNextAttribute()
                    path_performance_export_data = read_xml_configuration.Value
                End If

                'unzipped_folder_name
                If read_xml_configuration.Name = "unzipped_folder_name" Then
                    read_xml_configuration.MoveToNextAttribute()
                    str_export_foldername_unzipped = read_xml_configuration.Value
                End If

                'save_configuration
                If read_xml_configuration.Name = "save_configuration" Then
                    read_xml_configuration.MoveToNextAttribute()
                    'only set value if it is of type boolean otherwise set to false
                    If read_xml_configuration.Value = "True" Then
                        ToolStripMenuItem_save_configuration.Checked = CBool(read_xml_configuration.Value)
                    Else
                        ToolStripMenuItem_save_configuration.Checked = False
                    End If
                End If

            End While
            read_xml_configuration.Close()
        End Using

    End Sub

    '---------------------------------------------------------------------------------------------------------------------
    ' ende: configurationfile
    '---------------------------------------------------------------------------------------------------------------------

#End Region

End Class

